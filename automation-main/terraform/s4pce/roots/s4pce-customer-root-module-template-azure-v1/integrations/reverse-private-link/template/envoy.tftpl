#cloud-config
# Description: This is a Cloud-Init configuration file for setting up an Envoy Proxy on a Ubuntu 20.04 LTS instance.
# Inputs:
#   - app_keyid: The GPG Key ID for the Envoy repository.
#   - app_repo: The repository URL for the Envoy repository.
#   - app_package: The package name for the Envoy package.
#   - app_branch: The branch name for the Envoy repository.
#   - custom_nameservers: The list of custom nameservers to use for DNS resolution.
#   - ip: The IP address to use for the Envoy configuration.
#   - ports: The list of ports to use for the Envoy configuration.
# Outputs:
#   - Bootstrapped install of Envoy
#   - Envoy configured with Dynamic Listeners, Dynamic Clusters, and Dynamic Config
#   - Listeners and Clusters configures with the provided IP and Ports, and DNS Resolvers
#   - Envoy service file created and started

bootcmd:
  - ansible-playbook /etc/ansible/playbooks/repository-management.yml -i localhost, -c local -e repo_enable=true -e application_preset_selection=base

apt:
  sources:
    envoy:
      keyid: ${app_keyid}
      source: "deb [signed-by=$KEY_FILE] ${app_repo} $RELEASE ${app_branch}"
packages:
  - ${app_package}
write_files:
# Configure Envoy with Dynamic Config
  - path: /etc/envoy/dynamic-config.yaml
    defer: true
    content: |
      ---
      node:
        cluster: main
        id: id_1
      dynamic_resources:
        cds_config:
          resource_api_version: V3
          path: /etc/envoy/dynamic-cds.yaml
        lds_config:
          resource_api_version: V3
          path: /etc/envoy/dynamic-lds.yaml
      ...
# Add this to above to expose the Envoy Admin Interface
      # admin:
      #   access_log_path: /var/log/envoy_admin_access.log
      #   address:
      #     socket_address:
      #       address: 127.0.0.1
      #       port_value: 9901
# Example Admin queries `curl 127.0.0.1:9901/clusters`

# Configure Envoy with Dynamic Listeners
  - path: /etc/envoy/dynamic-lds.yaml
    defer: true
    content: |
      ---
      resources:
%{    for port in ports ~}
        - '@type': type.googleapis.com/envoy.config.listener.v3.Listener
          name: listener-${ip}-${port}
          address:
            socket_address:
              protocol: TCP
              address: 0.0.0.0
              port_value: ${port}
          filter_chains:
            - filters:
              - name: envoy.tcp_proxy
                typed_config:
                  '@type': type.googleapis.com/envoy.extensions.filters.network.tcp_proxy.v3.TcpProxy
                  stat_prefix: tcp_proxy
                  cluster: cluster-${ip}-${port}
%{    endfor ~}
      ...

# Configure Envoy with Dynamic Cluster Definitions
  - path: /etc/envoy/dynamic-cds.yaml
    defer: true
    content: |
      ---
      resources:
%{    for port in ports ~}
        - '@type': type.googleapis.com/envoy.config.cluster.v3.Cluster
          name: cluster-${ip}-${port}
          connect_timeout: 0.25s
          type: STRICT_DNS
          lb_policy: ROUND_ROBIN
          respect_dns_ttl: true
          use_tcp_for_dns_lookups: false
          dns_resolvers:
%{        for addr in custom_nameservers ~}
            - socket_address:
                protocol: UDP
                address: ${addr}
                port_value: 53
%{        endfor ~}
          load_assignment:
            cluster_name: cluster-${ip}-${port}
            endpoints:
              - lb_endpoints:
                  - endpoint:
                      address:
                        socket_address:
                          address: ${ip}
                          port_value: ${port}
%{    endfor ~}
      ...
# "typed_dns" is only available in latest Envoy version using older "dns_resolvers" format instead
#           typed_dns_resolver_config:
#             name: envoy.network.dns_resolver.cares
#             typed_config:
#               '@type': type.googleapis.com/envoy.extensions.network.dns_resolver.cares.v3.CaresDnsResolverConfig
#               resolvers:
# %{            for addr in custom_nameservers ~}
#               - socket_address:
#                   protocol: UDP
#                   address: ${addr}
#                   port_value: 53
# %{            endfor ~}
#               dns_resolver_options:
#                 use_tcp_for_dns_lookups: false
#                 no_default_search_domain: true

# Create Envoy Service File
  - path: /etc/systemd/system/envoy.service
    defer: true
    content: |
      [Unit]
      Description=Envoy
      [Service]
      ExecStart=/usr/bin/envoy -c /etc/envoy/dynamic-config.yaml
      Restart=always
      RestartSec=5
      KillMode=mixed
      SyslogIdentifier=envoy
      LimitNOFILE=640000
      [Install]
      WantedBy=multi-user.target
# or maybe this?  https://www.envoyproxy.io/docs/envoy/v1.27.1/operations/hot_restarter


runcmd:
  - sudo systemctl enable envoy.service
  - sudo systemctl daemon-reload
  - sudo systemctl start envoy.service
# when going to k8s, we should get rid of the service/unit file and systemctl commands
# NOTE: dependency on the upstream target also relies on the Customer's TTL on the DNS Record

final_message: |
  cloud-init has finished
  version: $version
  timestamp: $timestamp
  datasource: $datasource
  uptime: $uptime
