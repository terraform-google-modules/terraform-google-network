/*
  Description: Test the module
  Comments:
    - NOTE: Additional Networks can have different CIDR Masks, but must be in the same network class.
    - NOTE: IPv6 support is rudimentary with the following constraints
      - IPv6 CIDR must be generated by AWS.
      - VPC CIDR must be /56
      - IPv6 Subnet Mask must be /64
*/

##### Network Object
# map (
#   object({                                   // network human-readable name. Requires a "primary"
#     cidr      = string                       // network cidr
#     ipv6_ipam = optional(string, "disabled") // network ipv6 cidr.  Only accepts "aws" for aws generated ipv6 for now.
#     subnets = optional(
#       map( // subnet human-readable name
#         object({
#           cidr        = string                 // subnet cidr
#           zone        = string                 // subnet zone
#           ipv6_netnum = optional(string, null) // Optional ipv6 subnet number. Auto-generates from allocated ipv6 CIDR.
#         })
#     ), null)
#     subnets_edge = optional( // This will be the egress subnet for NGWs and Routes.
#       map(                   // subnet human-readable name
#         object({
#           cidr        = string                 // subnet cidr
#           zone        = string                 // subnet zone.  Each Edge Zone must be unique
#           ipv6_netnum = optional(string, null) // Optional ipv6 subnet number. Auto-generates from allocated ipv6 CIDR.
#         })
# ), null) }))

# NOTE: Additional Networks can have different CIDR Masks, but must be in the same network class.
# NOTE: Known Terraform Lifecycle issue.  If you subnet `ipv6_netnum` must be removed before removing `ipv6_ipam`.

locals {
  network = {
    primary = {
      cidr      = "10.108.0.0/22"
      ipv6_ipam = "aws"
      subnets = {
        production  = { cidr = "10.108.0.0/24", zone = "a", ipv6_netnum = 1 }
        random_name = { cidr = "10.108.1.0/24", zone = "a" }
      }
      subnets_edge = {
        edge_a = { cidr = "10.108.2.0/26", zone = "a", ipv6_netnum = 2 }
    } }
    secondary = {
      cidr = "10.109.0.0/23"
      subnets = {
        extra_subnet = { cidr = "10.109.0.0/25", zone = "b" }
        extra_zone_a = { cidr = "10.109.0.128/25", zone = "a" }
      }
      subnets_edge = {
        nonstandard_name = { cidr = "10.109.1.0/26", zone = "b" }
  } } }

  tags = {}
  # tags = {
  #   # Typical tags applied by null-context
  #   Business                 = "test-business"
  #   Customer                 = "test-customer"
  #   Description              = "Test-Description"
  #   Environment              = "test-env"
  #   GeneratedBy              = "terraform"
  #   ManagedBy                = "terraform"
  #   Name                     = "test-module-aws-network"
  #   Organization             = "test-org"
  #   OrganizationFriendlyName = "Sovereign Cloud STE"
  #   Owner                    = "test-owner"
  #   SecurityBoundary         = "test"
  #   TerraformModule          = "aws-network"
  #   TerraformModuleVersion   = "1.0.0"
  # }
}


module "module_test" {
  source     = "../"
  aws_region = var.aws_region
  build_user = var.build_user
  tags       = local.tags
  network    = local.network //   (object) required input.  Configuration of the VPC Network. See above for detailed explanation.
  #### Optional paramaters
  # use_default_security_rules      = true // (boolean) default:true Use the default security group rules.  Allow all egress. Allow all intra-VPC
  # deploy_nat_gateways             = true // (boolean) default:true Deploys Nat Gateways per zone
  # associates_private_route_tables = true // (boolean) default:true Associates each private (non-edge) subnet to a route table
  # deploy_private_route_tables     = true // (boolean) default:true Creates (private) route tables per zone
  # custom_dhcpoptions_id           = ""   // (string) default:"" AWS ID of alternative dhcptions to associate with VPC. Defaults to AWS account default
}
output "module_test" { value = module.module_test }
