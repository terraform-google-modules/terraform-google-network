---
# Playbook Name: s4pce-create-disks.yml
# Description: Creates and mounts necessary EBS and EFS mounts on SPR systems.
#     It is designed to work with the spr-ansible-inventory-template file without additional inputs.
# Dependencies:
# - Ansible v2.9+
# - AWS CLI v1.16+
# - sudo capability or root privileges on target machine
# - Instances with base S3 repository configured
# - disk-management ansible role
# Variables:
#   - efs_staging_ip: IP Address of the staging EFS to be mounted. (Inventory GroupVar)
#   - nfs_usr_sap_trans_ip: IP Address of the usr_sap_trans GCP Filestore instance (Inventory GroupVar)
#   - efs_usr_sap_trans_fsid: AWS EFS ID of the Customer's EFS Volume (Inventory GroupVar)
#   - spr_gcp_filestore_name: Name of the Filestore instance (Inventory GroupVar)
#   - aws_efs_ip_address: IP address of the file system. When defined will use this var instead of the efs_usr_sap_trans_fsid (Inventory GroupVar)
#   - spr_azure_staging_storage_account: Azure Storage Account to be used for Staging (Inventory GroupVar)
#   - spr_azure_staging_file_share: Azure File Share Name to be used for Staging (Inventory GroupVar)
#   - spr_azure_customer_storage_account: Azure Storage Account to be used for Customer NFS (Inventory GroupVar)
#   - spr_azure_customer_file_share: Azure File Share Name to be used for Customer NFS (Inventory GroupVar)
#   - spr_productname: Used to create dynamic group (Inventory HostVar)
#   - spr_landscape: Used to create dynamic group (Inventory HostVar)
#   - spr_nodetype: Used to create dynamic group (Inventory HostVar)
#   - spr_usr_sap_mount_size: Customer's `/usr/sap` mount size (Inventory HostVar)
# Example:
#   Execution on remote systems using the ibp inventory host template
#     ansible-playbook s4pce-create-disks.yml -k -i /<PATH-TO>/<SPR-INVENTORY-FILE>
# Authors: Louis Lee
# Version: 2.9-000025
# Modified: 2021-01-26 - Created playbook
#           2021-01-27 - Bugfix for app-lite host selection
#           2021-02-09 - Bugfix, lower should be after the default value
#           2021-06-23 - Update product names
#           2021-07-01 - Added support for One-Off Products (Content Server, Convergent Charging, Convergent Mediation, Apache/FTP)
#           2021-07-23 - Add sapmnt to Convergent Charging
#           2021-07-26 - Update dp_agent to dpagent
#           2021-07-27 - Update content_server to contentserver
#           2021-11-15 - Add Azure support
#           2021-12-20 - Add Azure Partition Support
#           2022-01-11 - Bugfix for cloud selection logic
#           2022-02-02 - Bugfix, default omit azure
#           2022-02-15 - Adds saprouter support, Bugfix, default omit azure tweak to support change in role.
#           2022-04-07 - Adds GCP support
#           2022-04-08 - Added conditional to use the EFS IP instead of the file system id for the `efs_usr_sap_trans_fsid` var (default is false).
#           2022-04-19 - Bugfix --implicit-dirs to gcs fuse mount
#           2022-04-22 - Update to include IQ volume provisioning
#           2022-05-10 - Added var to increase the `usr/sap` mount size
#           2022-06-07 - Updates for new sftp_interface product
#           2022-06-22 - Updata hana data and hana backups logic for ram > 6TB
#           2022-07-01 - Ignore non_spr products
#           2022-08-03 - case sensitivity handling
#           2022-08-25 - Separate PAS and AAS NFS mount needs
#           2022-09-20 - Add gcsfuse staging mount cron
#           2023-04-08 - Added swap/sapmnt mount to contentserver
#           2023-09-18 - Renamed bobj to bobj_bip in App-Lite list
#           2023-10-12 - Allow Disks created for products bobj for backward compatibility
#           2023-10-16 - Added /sapdb file system for content server for storing software and trace files and change the mount point for sapdata and saplog
#           2023-10-16 - Added swap/usr-sap for AAS servers
#           2023-12-15 - Added /sapdb/backups per Ops Request
#           2024-04-02 - More explicitly exclude bobj and other products from AAS volume provisiong play4
#           2024-12-12 - Move the Cloud Connector to one off section and change the mount point to /opt/sap
# Comments: |
#   This playbook is designed to work with the spr ansible-inventory template.
#   AWS has a maxiumum limit of 16TB.  Future iterations to add multi-disk support
#   Tags:
#     play0 always cloud-identify : Prepare dynamic values
#     play1 webdispatcher         : Webdispatcher Volumes
#     play2 app-lite              : App-lite EBS Volumes
#     play3 app                   : App EBS Volumes
#     play4 aas-app               : App EBS Volumes for AAS server
#     play5 db hanacockpit        : Hana EBS Volumes
#     play6 one-offs              : One-Off Products (Content Server, Convergent Charging, Convergent Mediation, Apache/FTP)
#     play7 one-offs              : Convergent Mediation, Apache/FTP EFS
#     play8 staging               : EFS Common Staging Mount
#     play9 staging               : GCP Fuse Staging Mount
#     play10 usrsaptrans          : EFS usr/sap/trans Mount
#     play11 usrsaptrans          : EFS usr/sap/trans Mount for DR hosts

#################
##### Play0 #####
#################
- name: "Play0: Prepare dynamic values"
  gather_facts: true
  hosts: all
  tags:
  - play0
  - cloud-identify
  - always

  tasks:
  - name: "Dynamic Group Assignment"
    group_by:
      key: "{{ item }}"
    when: "item != 'undefined'"
    loop:
    - "{{ spr_productname|default('undefined')|lower }}"
    - "{{ spr_landscape|default('undefined')|lower }}"
    - "{{ spr_nodetype|default('undefined')|lower }}"
    - "{{ non_spr_productname|default('undefined')|lower }}"

  - name: "Dynamic Group Assignment for app servers"
    group_by:
      key: "{{ item }}"
    when: inventory_hostname in groups.app
    loop:
    - "{%- if (
          (( inventory_hostname | regex_replace('^.+app(?P<node>\\d\\d).*$', '\\g<node>')) == \"01\" )
           and (spr_productname != \"webdispatcher\")
        ) -%} pas
        {%- else -%} aas
        {%- endif -%}"

  # Notes: outputs: cloud_provider, machine_id
  - name: Detect Cloud Provider
    include_role:
      name: cloud-identify

  - name: Group by Cloud Provider
    group_by:
      key: "cloud_{{ cloud_provider }}"

  - name: Set Azure Variables
    when: cloud_provider == "azure"
    set_fact:
      play_azure_resource_group: "{{ spr_azure_resource_group }}"

  - name: "Configure Base Repositories from S3"
    include_role:
      name: repository-management
    vars:
      repo_enable: 'true'
      application_preset_selection: 'base'

#################
##### Play1 #####
#################
- name: Play1 Webdispatcher Volumes
  hosts: webdispatcher
  tags:
  - play1
  - webdispatcher

  tasks:
  - name: Include disk management role to create, attach, parition, format, and mount disks
    include_role:
      name: disk-management
    vars:
      azure_resource_group: "{{ play_azure_resource_group | default('',true) }}"
      azure_disk_type: 'Standard_LRS'
      disk_create: true
      disk_encryption: true
      disk_encryption_key_default: ''
      disk_preset_selection: 'custom'
      custom:
        usr_sap:
          mount_point: '/usr/sap'
          size: 50
        sapmnt:
          mount_point: '/sapmnt'
          size: 50


#################
##### Play2 #####
#################
- name: Play2 App-lite Volumes
  hosts: bobj:bobj_bip:cpids_agent:data_services:dpagent:information_steward:lumira:optimizer:sac_agent:router:&app:!cloudconnector:!webdispatcher:!aas

  tags:
  - play2
  - app-lite

  tasks:
  - name: Include disk management role to create, attach, parition, format, and mount disks
    include_role:
      name: disk-management
    vars:
      azure_resource_group: "{{ play_azure_resource_group | default('',true) }}"
      azure_disk_type: 'Standard_LRS'
      disk_create: true
      disk_encryption: true
      disk_encryption_key_default: ''
      disk_preset_selection: 'custom'
      custom:
        usr_sap:
          mount_point: '/usr/sap'
          size: 50

#################
##### Play3 #####
#################
- name: Play3 SapApp Volumes
  hosts: app:!aas:!webdispatcher:!apache_ftp:!bobj:!bobj_bip:!cloudconnector:!contentserver:!convergent_charging:!convergent_mediation:!cpids_agent:!data_services:!dpagent:!information_steward:!lumira:!optimizer:!sac_agent:!router:!sftp_interface:!non_spr
  tags:
  - play3
  - app

  tasks:
  - name: "{{ inventory_hostname }} has {{ (ansible_facts.memtotal_mb/1000)|round|int }}GB of system memory"
    set_fact:
      ram_size: "{{ (ansible_facts.memtotal_mb/1000)|round|int }}"

  - name: "Calculate swap size"
    set_fact:
      swap_size: >-
          {% if ram_size|int < 32 %} {{ ram_size|int * 2 }}
          {% elif ram_size|int < 64 %} 64
          {% elif ram_size|int < 128 %} 96
          {% elif ram_size|int < 256 %} 128
          {% elif ram_size|int < 512 %} 160
          {% elif ram_size|int < 1024 %} 192
          {% elif ram_size|int < 2048 %} 224
          {% elif ram_size|int < 4096 %} 256
          {% elif ram_size|int < 8192 %} 288
          {% else %} 320
          {% endif %}

  - name: "Additional swap size will be {{ swap_size|int }}GB"
    set_fact:
      swap_size: "{{ swap_size|int }}"

  - name: Include disk management role to create, attach, parition, format, and mount disks
    include_role:
      name: disk-management
    vars:
      azure_resource_group: "{{ play_azure_resource_group | default('',true) }}"
      azure_disk_type: 'Standard_LRS'
      disk_create: true
      disk_encryption: true
      disk_encryption_key_default: ''
      disk_preset_selection: 'custom'
      custom:
        usr_sap:
          mount_point: '/usr/sap'
          size: "{{ spr_usr_sap_mount_size | default(50, true) }}"
        sapmnt:
          mount_point: '/sapmnt'
          size: 50
        swap:
          mount_point: '/swap'
          size: "{{ swap_size|int }}"

#################
##### Play4 #####
#################
- name: Play4 SapApp AAS Volumes
  hosts: aas:!webdispatcher:!apache_ftp:!bobj:!bobj_bip:!cloudconnector:!contentserver:!convergent_charging:!convergent_mediation:!cpids_agent:!data_services:!dpagent:!information_steward:!lumira:!optimizer:!sac_agent:!router:!sftp_interface:!non_spr
  tags:
  - play4
  - aasapp

  tasks:
  - name: "{{ inventory_hostname }} has {{ (ansible_facts.memtotal_mb/1000)|round|int }}GB of system memory"
    set_fact:
      ram_size: "{{ (ansible_facts.memtotal_mb/1000)|round|int }}"

  - name: "Calculate swap size"
    set_fact:
      swap_size: >-
          {% if ram_size|int < 32 %} {{ ram_size|int * 2 }}
          {% elif ram_size|int < 64 %} 64
          {% elif ram_size|int < 128 %} 96
          {% elif ram_size|int < 256 %} 128
          {% elif ram_size|int < 512 %} 160
          {% elif ram_size|int < 1024 %} 192
          {% elif ram_size|int < 2048 %} 224
          {% elif ram_size|int < 4096 %} 256
          {% elif ram_size|int < 8192 %} 288
          {% else %} 320
          {% endif %}

  - name: "Additional swap size will be {{ swap_size|int }}GB"
    set_fact:
      swap_size: "{{ swap_size|int }}"

  - name: Include disk management role to create, attach, parition, format, and mount disks
    include_role:
      name: disk-management
    vars:
      azure_resource_group: "{{ play_azure_resource_group | default('',true) }}"
      azure_disk_type: 'Standard_LRS'
      disk_create: true
      disk_encryption: true
      disk_encryption_key_default: ''
      disk_preset_selection: 'custom'
      custom:
        usr_sap:
          mount_point: '/usr/sap'
          size: "{{ spr_usr_sap_mount_size | default(50, true) }}"
        swap:
          mount_point: '/swap'
          size: "{{ swap_size|int }}"

#################
##### Play5 #####
#################
- name: Play5 Hana EBS Volumes
  hosts: db:hanacockpit:!contentserver:!iq:!non_spr
  tags:
  - play5
  - db
  - hanacockpit

  tasks:
  - name: "{{ inventory_hostname }} has {{ (ansible_facts.memtotal_mb/1000)|round|int }}GB of system memory"
    set_fact:
      ram_size: "{{ (ansible_facts.memtotal_mb/1000)|round|int }}"

  - name: "Calculate disk size"
    set_fact:
      hana_shared_size: >-
          {% if ram_size|int < 1000 %} {{ ram_size|int }}
          {% else %} 1000
          {% endif %}
      hana_log_size: >-
          {% if ram_size|int < 2000 %} {{ (ram_size|int / 2)|int  }}
          {% else %} 1000
          {% endif %}

  - name: "Hana Cockpit Shared Size"
    when: inventory_hostname in groups.hanacockpit
    set_fact:
      hana_shared_size: '200'

  - name: "Mount volumes for {{ inventory_hostname }}"
    include_role:
      name: disk-management
    vars:
      azure_resource_group: "{{ play_azure_resource_group | default('',true) }}"
      azure_disk_type: 'Premium_LRS'
      disk_create: true
      disk_encryption: true
      disk_encryption_key_default: ''
      disk_preset_selection: 'custom'
      custom:
        hana_data:
          mount_point: '/hana/data'
          size: >-
            {% if ram_size|int < 6000 %} {{ ram_size|int * 2 }}
            {% elif ram_size|int < 13000 %} {{ ( ram_size|int * 1.2 )|int }}
            {% else %} 16000
            {% endif %}
        hana_log:
          mount_point: '/hana/log'    #limit this to max of 1 terabyte
          size: "{{ hana_log_size|int }}"
        hana_shared:
          mount_point: '/hana/shared'   #limit this to max of 1 terabyte
          size: "{{ hana_shared_size|int }}"
        hana_backups:
          mount_point: '/hana/backups'
          size: >-
            {% if ram_size|int < 6000 %} {{ ram_size|int * 2 }}
            {% elif ram_size|int < 10000 %} {{ ( ram_size|int * 1.5 )|int }}
            {% else %} 16000
            {% endif %}
        usr_sap:
          mount_point: '/usr/sap'
          size: 50


#################
##### Play6 #####
#################
- name: Play6 One-Off Products (Cloud Connector, Content Server, Convergent Charging, Convergent Mediation, Apache/FTP, IQ)
  hosts: contentserver:convergent_charging:convergent_mediation:apache_ftp:iq:cloudconnector
  tags:
  - play6
  - one_offs_ebs

  pre_tasks:
  - name: "{{ inventory_hostname }} has {{ (ansible_facts.memtotal_mb/1000)|round|int }}GB of system memory"
    set_fact:
      ram_size: "{{ (ansible_facts.memtotal_mb/1000)|round|int }}"

  - name: "Calculate swap size"
    set_fact:
      swap_size: >-
          {% if ram_size|int < 32 %} {{ ram_size|int * 2 }}
          {% elif ram_size|int < 64 %} 64
          {% elif ram_size|int < 128 %} 96
          {% elif ram_size|int < 256 %} 128
          {% elif ram_size|int < 512 %} 160
          {% elif ram_size|int < 1024 %} 192
          {% elif ram_size|int < 2048 %} 224
          {% elif ram_size|int < 4096 %} 256
          {% elif ram_size|int < 8192 %} 288
          {% else %} 320
          {% endif %}

  - name: "Additional swap size will be {{ swap_size|int }}GB"
    set_fact:
      swap_size: "{{ swap_size|int }}"

  - name: "Set volumes for Content Server"
    when: inventory_hostname in groups.contentserver
    set_fact:
      custom_volumes:
        usr_sap:
          mount_point: '/usr/sap'
          size: 50
        sapdb:
          mount_point: '/sapdb'   # New file system is required as the software and trace files needs it
          size: 25
        sapdb_sapdata:
          mount_point: '/sapdb/{{spr_maxdb_sid|upper}}/sapdata' # Mountpoint needs to be changed as automation defaults to it
          size: 100
        sapdb_saplog:
          mount_point: '/sapdb/{{spr_maxdb_sid|upper}}/saplog' # Mountpoint needs to be changed as automation defaults to it
          size: 20
        sapdb_backups:
          mount_point: '/sapdb/backups'  # New file system is required per Ops
          size: 200
        sapmnt:
          mount_point: '/sapmnt'
          size: 50
        swap:
          mount_point: '/swap'
          size: "{{ swap_size|int }}"

  - name: "Set volumes for Cloud Connector Server"
    when: inventory_hostname in groups.cloudconnector
    set_fact:
      custom_volumes:
        opt_sap:
          mount_point: '/opt/sap'
          size: 50

  - name: "Set volumes for Convergent Charging App Server"
    when: inventory_hostname in groups.convergent_charging
    set_fact:
      custom_volumes:
        usr_sap:
          mount_point: '/usr/sap'
          size: 100
        sapmnt:
          mount_point: '/sapmnt'
          size: 50

  - name: "Set volumes for Convergent Mediation Platform Server"
    when: inventory_hostname in groups.convergent_mediation
    set_fact:
      custom_volumes:
        opt_mz:
          mount_point: '/opt/mz'
          size: 50

  - name: "Set volumes for Convergent Mediation EC Server"
    when: inventory_hostname in groups.apache_ftp
    set_fact:
      custom_volumes:
        opt_mzec1:
          mount_point: '/opt/mzec1'
          size: 50

  - name: "Set volumes for IQ"
    when: inventory_hostname in groups.iq
    vars:
      volume_create_sid: "{{ spr_sid|upper }}"
    set_fact:
      custom_volumes:
        usr_sap:
          mount_point: '/usr/sap'
          size: 50
        sapmnt:
          mount_point: '/sapmnt'
          size: 50
        sybase_sid:
          mount_point: '/sybase/{{ volume_create_sid }}'
          size: 30
        sybase_sid_data:
          mount_point: '/sybase/{{ volume_create_sid }}/data'
          size: 10
        sybase_sid_saplog_1:
          mount_point: '/sybase/{{ volume_create_sid }}/saplog_1'
          size: 100
        sybase_sid_saptemp_1:
          mount_point: '/sybase/{{ volume_create_sid }}/saptemp_1'
          size: 50
        sybase_sid_sapdata_1:
          mount_point: '/sybase/{{ volume_create_sid }}/sapdata_1'
          size: 100
        sybase_sid_sapdata_2:
          mount_point: '/sybase/{{ volume_create_sid }}/sapdata_2'
          size: 10
        sybase_sid_saparchive_1:
          mount_point: '/sybase/{{ volume_create_sid }}/saparchive_1'
          size: 10
        sybase_sid_shmdump:
          mount_point: '/sybase/{{ volume_create_sid }}/shmdump'
          size: 10

  tasks:
  - name: "Create and Mount volumes"
    include_role:
      name: disk-management
    vars:
      azure_resource_group: "{{ play_azure_resource_group | default('',true) }}"
      azure_disk_type: 'Standard_LRS'
      disk_create: true
      disk_encryption: true
      disk_encryption_key_default: ''
      disk_preset_selection: 'custom'
      custom: "{{ custom_volumes }}"


#################
##### Play7 #####
#################
- name: Play7 Convergent Mediation, Apache/FTP EFS
  hosts: convergent_mediation:apache_ftp
  gather_facts: false
  tags:
  - play7
  - convergent_mediation_efs

  vars:
    aws_efs_file_system_id: "{{ efs_usr_sap_trans_fsid | default(omit,true) }}"
    azure_nfs_storage_account: "{{ spr_azure_customer_storage_account|default(omit,true) }}"
    azure_nfs_name: "{{ spr_azure_customer_file_share|default(omit,true) }}"
    gcp_filestore_name: "{{ spr_gcp_filestore_name | default(omit,true) }}"
    nfs_file_system_ip: "{{ nfs_usr_sap_trans_ip | default(omit,true) }}"

  pre_tasks:
  - name: Retrieve ec2 metadata
    ec2_metadata_facts:
    when: cloud_provider == "aws"

  tasks:
  - name: "Mount Temporary EFS"
    include_role:
      name: nfs
    vars:
      nfs_dictionary:
        temp:
          path: '/mnt/temp'
          src: >-
            {%- if cloud_provider == "aws" -%} {{ aws_efs_ip_address | default(aws_efs_file_system_id + ".efs." + ansible_ec2_placement_region + ".amazonaws.com",true) }}
            {%- elif cloud_provider == "azure" and cloud_partition == "usgovernment" -%}  {{ azure_nfs_storage_account }}.file.core.usgovcloudapi.net
            {%- elif cloud_provider == "azure" and cloud_partition == "public" -%}  {{ azure_nfs_storage_account }}.file.core.windows.net
            {%- elif cloud_provider == "gcp" -%}  {{ nfs_file_system_ip }}
            {%- endif -%}
          src_root: >-
            {%- if cloud_provider == "aws" -%}
            {%- elif cloud_provider == "azure" -%}    /{{ azure_nfs_storage_account }}/{{ azure_nfs_name }}
            {%- elif cloud_provider == "gcp" -%}  /{{ gcp_filestore_name }}
            {%- endif -%}

  - name: "Create NFS Subfolders"
    become: true
    run_once: true
    file:
      path: "/mnt/temp/convergent_mediation/data"
      state: directory
      mode: 0755

  - name: "Unmount Temporary EFS"
    include_role:
      name: nfs
    vars:
      nfs_dictionary:
        temp:
          path: '/mnt/temp'
          state: absent

  - name: "Mount /data EFS"
    include_role:
      name: nfs
    vars:
      nfs_dictionary:
       data:
        path: /data
        src: >-
          {%- if cloud_provider == "aws" -%} {{ aws_efs_ip_address | default(aws_efs_file_system_id + ".efs." + ansible_ec2_placement_region + ".amazonaws.com",true) }}
          {%- elif cloud_provider == "azure" and cloud_partition == "usgovernment" -%}  {{ azure_nfs_storage_account }}.file.core.usgovcloudapi.net
          {%- elif cloud_provider == "azure" and cloud_partition == "public" -%}  {{ azure_nfs_storage_account }}.file.core.windows.net
          {%- elif cloud_provider == "gcp" -%}  {{ nfs_file_system_ip }}
          {%- endif -%}
        src_root: >-
          {%- if cloud_provider == "aws" -%}  /convergent_mediation/data
          {%- elif cloud_provider == "azure" -%}  /{{ azure_nfs_storage_account }}/{{ azure_nfs_name }}/convergent_mediation/data
          {%- elif cloud_provider == "gcp" -%}  /{{ gcp_filestore_name }}/convergent_mediation/data
          {%- endif -%}

#################
##### Play8 #####
#################
- name: Play8 EFS Common Staging Mount
  hosts: cloud_aws:cloud_azure
  gather_facts: false
  tags:
  - play8
  - staging

  vars:
    efs_ipaddress: "{{ efs_staging_ip }}"
    azure_nfs_storage_account: "{{ spr_azure_staging_storage_account|default(omit,true) }}"
    azure_nfs_name: "{{ spr_azure_staging_file_share|default(omit,true) }}"

  pre_tasks:
    - name: Retrieve ec2 metadata
      ec2_metadata_facts:
      when: cloud_provider == "aws"

  tasks:
  #Note: Until we can reroll the older AWS EFS, the DNS lookup method won't work here.
  - name: Mount EFS Staging
    include_role:
      name: nfs
    vars:
      nfs_dictionary:
        staging:
          path: '/staging'
          src: >-
            {%- if cloud_provider == "aws" -%}      {{ efs_ipaddress }}
            {%- elif cloud_provider == "azure" and cloud_partition == "usgovernment" -%}  {{ azure_nfs_storage_account }}.file.core.usgovcloudapi.net
            {%- elif cloud_provider == "azure" and cloud_partition == "public" -%}  {{ azure_nfs_storage_account }}.file.core.windows.net
            {%- endif -%}
          src_root: >-
            {%- if cloud_provider == "aws" -%}
            {%- elif cloud_provider == "azure" -%}    /{{ azure_nfs_storage_account }}/{{ azure_nfs_name }}
            {%- endif -%}


#################
##### Play9 #####
#################
- name: Play9 GCSFuse Staging Mount
  hosts: cloud_gcp
  gather_facts: false
  tags:
    - play9
    - staging

  vars:
    staging_gcs_bucket: "cre-s4-pce-management-common-staging"
    staging_mount_dir: "/staging"
    gcsfuse_repo: "gcsfuse-{{ansible_distribution_release}}"

  tasks:
    - name: Add google cloud signing key (apt)
      apt_key:
        url: https://packages.cloud.google.com/aptkey.gpg
        state: present
      when: ansible_os_family | lower == 'debian'
      become: true

    - name: Add google cloud package repository (apt)
      apt_repository:
        repo: "deb http://packages.cloud.google.com/apt {{ gcsfuse_repo }} main"
        update_cache: true
        state: present
      when: ansible_os_family | lower == 'debian'
      become : true

    - name: Enable rhel-8-for-x86_64-baseos-rpms repository
      shell: yum-config-manager --enable rhel-8-for-x86_64-baseos-rpms
      become: true
      when: ansible_os_family | lower == 'redhat'

    - name: Add google cloud package repository (yum)
      yum_repository:
        name: gcsfuse
        description: "gcsfuse (packages.cloud.google.com)"
        baseurl: "https://packages.cloud.google.com/yum/repos/gcsfuse-el7-x86_64"
        gpgkey: "https://packages.cloud.google.com/yum/doc/yum-key.gpg,https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg"
        gpgcheck: 1
        repo_gpgcheck: no
        enabled: true
        state: present
      when: ansible_os_family | lower == 'redhat'
      become: true

    - name: Install gcsfuse
      package:
        name: gcsfuse
      become: true

    - name: Enable "allow_other" in fuse config
      lineinfile:
        regexp: "^# user_allow_other"
        line: "user_allow_other"
        path: "/etc/fuse.conf"
      become: true

    - name: Ensure mount directory exists
      file:
        dest: '{{ staging_mount_dir }}'
        state: directory
        mode: 0777
      become: true

    - name: Mount gcs staging bucket
      command: gcsfuse --implicit-dirs --limit-ops-per-sec=0 -file-mode=777 -dir-mode=777 -o allow_other {{ staging_gcs_bucket }} {{ staging_mount_dir }}

    - name: Add cron entry for staging fuse mount on reboot
      cron:
        name: "Mount {{ staging_gcs_bucket }} on {{ staging_mount_dir }}"
        special_time: reboot
        job: "gcsfuse --implicit-dirs --limit-ops-per-sec=0 -file-mode=777 -dir-mode=777 -o allow_other {{ staging_gcs_bucket }} {{ staging_mount_dir }}"


#################
##### Play10 #####
#################
- name: "Play10 EFS usr/sap/trans"
  hosts: app:!non_spr:nfsreplica
  gather_facts: false
  tags:
  - play10
  - usrsaptrans

  vars:
    aws_efs_file_system_id: "{{ efs_usr_sap_trans_fsid | default(omit,true) }}"
    nfs_file_system_ip: "{{ nfs_usr_sap_trans_ip | default(omit,true) }}"
    nfs_mount_dir: "{{ spr_efs_mount|default('none',true) }}"
    azure_nfs_storage_account: "{{ spr_azure_customer_storage_account|default(omit,true) }}"
    azure_nfs_name: "{{ spr_azure_customer_file_share|default(omit,true) }}"
    gcp_filestore_name: "{{ spr_gcp_filestore_name | default(omit,true) }}"

  pre_tasks:
    - name: Retrieve ec2 metadata
      ec2_metadata_facts:
      when: cloud_provider == "aws"

  tasks:
  - name: "Block: Mount usr/sap/trans"
    when: nfs_mount_dir != 'none'
    become: true
    block:
    - name: "Create list of subfolders for NFS"
      set_fact:
        nfs_mnt: "{{ hostvars | to_json | from_json | json_query('*.spr_efs_mount') | sort | unique }}"
      # Deconstructing what just happened:
      # json_query('*.sid') - get sids for all hosts
      # sort - sorts in alphabetical/numerical
      # unique - remove duplicates

    - name: "Mount Temporary EFS"
      include_role:
        name: nfs
      vars:
        nfs_dictionary:
          temp:
            path: '/mnt/temp'
            src: >-
              {%- if cloud_provider == "aws" -%}  {{ aws_efs_ip_address | default(aws_efs_file_system_id + ".efs." + ansible_ec2_placement_region + ".amazonaws.com",true) }}
              {%- elif cloud_provider == "azure" and cloud_partition == "usgovernment" -%}  {{ azure_nfs_storage_account }}.file.core.usgovcloudapi.net
              {%- elif cloud_provider == "azure" and cloud_partition == "public" -%}  {{ azure_nfs_storage_account }}.file.core.windows.net
              {%- elif cloud_provider == "gcp" -%}  {{ nfs_file_system_ip }}
              {%- endif -%}
            src_root: >-
              {%- if cloud_provider == "aws" -%}
              {%- elif cloud_provider == "azure" -%}    /{{ azure_nfs_storage_account }}/{{ azure_nfs_name }}
              {%- elif cloud_provider == "gcp" -%}  /{{ gcp_filestore_name }}
              {%- endif -%}

    - name: "Create NFS Subfolders"
      run_once: true
      file:
        path: "/mnt/temp/{{ item }}"
        state: directory
        mode: 0755
      loop_control:
        label: "Ensuring subfolder {{ item }} exists on NFS"
      loop: "{{ nfs_mnt }}"

    - name: "Unmount Temporary EFS"
      include_role:
        name: nfs
      vars:
        nfs_dictionary:
          temp:
            path: '/mnt/temp'
            state: absent

    - name: "Mount the /usr/sap/trans"
      include_role:
        name: nfs
      vars:
        nfs_dictionary:
          temp:
            path: '/usr/sap/trans'
            src: >-
              {%- if cloud_provider == "aws" -%} {{ aws_efs_ip_address | default(aws_efs_file_system_id + ".efs." + ansible_ec2_placement_region + ".amazonaws.com",true) }}
              {%- elif cloud_provider == "azure" and cloud_partition == "usgovernment" -%}  {{ azure_nfs_storage_account }}.file.core.usgovcloudapi.net
              {%- elif cloud_provider == "azure" and cloud_partition == "public" -%}  {{ azure_nfs_storage_account }}.file.core.windows.net
              {%- elif cloud_provider == "gcp" -%}  {{ nfs_file_system_ip }}
              {%- endif -%}

            src_root: >-
              {%- if cloud_provider == "aws" -%}      /{{ nfs_mount_dir }}
              {%- elif cloud_provider == "azure" -%}  /{{ azure_nfs_storage_account }}/{{ azure_nfs_name }}/{{ nfs_mount_dir }}
              {%- elif cloud_provider == "gcp" -%}  /{{ gcp_filestore_name }}/{{ nfs_mount_dir }}
              {%- endif -%}
  #END "Block: Mount usr/sap/trans"


#################
##### Play11 #####
#################
- name: "Play11 EFS usr/sap/trans mount for DR"
  hosts: nfsreplica #need to duplicate play9 here as of ansible target pattern limitation and we need to define DR replication VMs as non_spr
  gather_facts: false
  tags:
  - play11
  - usrsaptrans

  vars:
    aws_efs_file_system_id: "{{ efs_usr_sap_trans_fsid | default(omit,true) }}"
    nfs_file_system_ip: "{{ nfs_usr_sap_trans_ip | default(omit,true) }}"
    nfs_mount_dir: "{{ spr_efs_mount|default('none',true) }}"
    azure_nfs_storage_account: "{{ spr_azure_customer_storage_account|default(omit,true) }}"
    azure_nfs_name: "{{ spr_azure_customer_file_share|default(omit,true) }}"
    gcp_filestore_name: "{{ spr_gcp_filestore_name | default(omit,true) }}"

  pre_tasks:
    - name: Retrieve ec2 metadata
      ec2_metadata_facts:
      when: cloud_provider == "aws"

  tasks:
  - name: "Block: Mount usr/sap/trans"
    when: nfs_mount_dir != 'none'
    become: true
    block:
    - name: "Create list of subfolders for NFS"
      set_fact:
        nfs_mnt: "{{ hostvars | to_json | from_json | json_query('*.spr_efs_mount') | sort | unique }}"
      # Deconstructing what just happened:
      # json_query('*.sid') - get sids for all hosts
      # sort - sorts in alphabetical/numerical
      # unique - remove duplicates

    - name: "Mount Temporary EFS"
      include_role:
        name: nfs
      vars:
        nfs_dictionary:
          temp:
            path: '/mnt/temp'
            src: >-
              {%- if cloud_provider == "aws" -%}  {{ aws_efs_ip_address | default(aws_efs_file_system_id + ".efs." + ansible_ec2_placement_region + ".amazonaws.com",true) }}
              {%- elif cloud_provider == "azure" and cloud_partition == "usgovernment" -%}  {{ azure_nfs_storage_account }}.file.core.usgovcloudapi.net
              {%- elif cloud_provider == "azure" and cloud_partition == "public" -%}  {{ azure_nfs_storage_account }}.file.core.windows.net
              {%- elif cloud_provider == "gcp" -%}  {{ nfs_file_system_ip }}
              {%- endif -%}
            src_root: >-
              {%- if cloud_provider == "aws" -%}
              {%- elif cloud_provider == "azure" -%}    /{{ azure_nfs_storage_account }}/{{ azure_nfs_name }}
              {%- elif cloud_provider == "gcp" -%}  /{{ gcp_filestore_name }}
              {%- endif -%}

    - name: "Create NFS Subfolders"
      run_once: true
      file:
        path: "/mnt/temp/{{ item }}"
        state: directory
        mode: 0755
      loop_control:
        label: "Ensuring subfolder {{ item }} exists on NFS"
      loop: "{{ nfs_mnt }}"

    - name: "Unmount Temporary EFS"
      include_role:
        name: nfs
      vars:
        nfs_dictionary:
          temp:
            path: '/mnt/temp'
            state: absent

    - name: "Mount the /usr/sap/trans"
      include_role:
        name: nfs
      vars:
        nfs_dictionary:
          temp:
            path: '/usr/sap/trans'
            src: >-
              {%- if cloud_provider == "aws" -%} {{ aws_efs_ip_address | default(aws_efs_file_system_id + ".efs." + ansible_ec2_placement_region + ".amazonaws.com",true) }}
              {%- elif cloud_provider == "azure" and cloud_partition == "usgovernment" -%}  {{ azure_nfs_storage_account }}.file.core.usgovcloudapi.net
              {%- elif cloud_provider == "azure" and cloud_partition == "public" -%}  {{ azure_nfs_storage_account }}.file.core.windows.net
              {%- elif cloud_provider == "gcp" -%}  {{ nfs_file_system_ip }}
              {%- endif -%}

            src_root: >-
              {%- if cloud_provider == "aws" -%}      /{{ nfs_mount_dir }}
              {%- elif cloud_provider == "azure" -%}  /{{ azure_nfs_storage_account }}/{{ azure_nfs_name }}/{{ nfs_mount_dir }}
              {%- elif cloud_provider == "gcp" -%}  /{{ gcp_filestore_name }}/{{ nfs_mount_dir }}
              {%- endif -%}
  #END "Block: Mount usr/sap/trans"

###################
##### PlayEND #####
###################
- name: "PlayEND: End of playbook"
  hosts: all
  gather_facts: false
  become: false
  tags:
  - play-end
  - always
  - the-end

  tasks:
  - name: "This is the end"
    delegate_to: localhost
    run_once: true
    debug:
      msg: "Of the world as we know it"
...