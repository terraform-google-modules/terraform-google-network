---
# Synopsis: Configures the RHEL 8 DISA STIGs.
# Inputs:
#   - Various STIG ID variables defined by the variable files found in the role's 'vars/' directory.
# Outputs:
#   - Configures the RHEL 8 DISA STIGs.

# NOTE: To get a rough number of DISA STIG variables that have tasks in this file:
#         cat roles/rhel8-disa-stig/tasks/main.yml | grep -oE '\- DISA_STIG_\w+_\w+_[0-9]{6}' | sort | uniq | wc -l

# TODO: Make sure the conditional 'when: ansible_virtualization_role != "guest"' doesn't cause issues on Azure or GCP.

  - name: '[Preconfigure] - Run dependency tasks before configuring the STIGs'
    include_tasks: preconfigure-tasks.yml

  - name: Upstream Notice
    debug:
      msg: "You are using a DISA STIG that has not been included within a release: {{ 'DISA-STIG-RHEL-08-010019' if DISA_STIG_RHEL_08_010019 | bool else\
        \ ''}}, please ensure that the following tasks are updated accordingly: https://github.com/ComplianceAsCode/content/releases/"
    when:
      - DISA_STIG_RHEL_08_010019 | bool
    tags:
      - DISA-STIG-RHEL-08-010019

# EXEMPTION: RHEL-08-010000 - SV-230221r743913_rule

  - name: '[DISA_STIG_RHEL_08_010010] - Ensure all security patches are up-to-date'
    dnf:
      state: latest
      name: '*'
      exclude:
        - ansible
        - ansible-core
      skip_broken: true
    become: true
    when:
      - DISA_STIG_RHEL_08_010010 | bool
    tags:
      - DISA-STIG-RHEL-08-010010

  - name: '[BLOCK] - [DISA_STIG_RHEL_08_010020] - Enable FIPS mode'
    block:

      - name: '[DISA_STIG_RHEL_08_010020] - Check whether FIPS mode is enabled'
        command: cat /proc/sys/crypto/fips_enabled
        register: fips_state_results
        changed_when: false

      - name: '[DISA_STIG_RHEL_08_010020] - Enable FIPS mode'
        command: /usr/bin/fips-mode-setup --enable
        become: true
        notify:
          - 'reboot # fips'
        when: fips_state_results.stdout | bool == false

    when:
      - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      - DISA_STIG_RHEL_08_010020 | bool or DISA_STIG_RHEL_08_010293 | bool
    tags:
      - DISA-STIG-RHEL-08-010020
      - DISA-STIG-RHEL-08-010293

# EXEMPTION: RHEL-08-010030 - SV-230224r627750_rule

  - name: '[DISA_STIG_RHEL_08_010040] - Configure SSHD with the path to the login banner file'
    lineinfile:
      state: present
      path: /etc/ssh/sshd_config
      regexp: '^Banner '
      line: Banner /etc/issue
      create: true
      validate: sshd -t -f %s
    become: true
    notify:
      - systemctl restart sshd.service
    when:
      - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      - DISA_STIG_RHEL_08_010040 | bool
    tags:
      - DISA-STIG-RHEL-08-010040

  - name: '[DISA_STIG_RHEL_08_010050] - Enable graphical user login warning banner'
    ini_file:
      path: /etc/dconf/db/local.d/01-banner-message
      section: org/gnome/login-screen
      option: banner-message-text
      value: '{{ login_banner_text_usg_gnome }}'
      no_extra_spaces: true
      create: true
    become: true
    notify:
      - dconf update
    when:
      - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      - DISA_STIG_RHEL_08_010050 | bool
    tags:
      - DISA-STIG-RHEL-08-010050

  - name: "[DISA_STIG_RHEL_08_010060] - Set the System Login Banner in '/etc/issue'"
    copy:
      content: '{{ login_banner_text }}'
      dest: /etc/issue
      owner: root
      group: root
      mode: '0644'
    become: true
    when:
      - DISA_STIG_RHEL_08_010060 | bool
    tags:
      - DISA-STIG-RHEL-08-010060

  - name: '[BLOCK] - [DISA_STIG_RHEL_08_010070] - Configure rsyslog rules for remote access monitoring'
    block:

      - name: '[DISA_STIG_RHEL_08_010070] - Ensure that the rsyslog package is installed'
        package:
          state: present
          name: rsyslog
        become: true

      - name: "[DISA_STIG_RHEL_08_010070] - Configure rsyslog rules in '/etc/rsyslog.conf'"
        lineinfile:
          state: present
          path: /etc/rsyslog.conf
          line: auth.*;authpriv.*;daemon.* /var/log/secure
          create: true
          validate: rsyslogd -N 1 -f %s
        become: true
        notify:
          - systemctl restart rsyslog.service

    when:
      - DISA_STIG_RHEL_08_010070 | bool
    tags:
      - DISA-STIG-RHEL-08-010070

  - name: '[DISA_STIG_RHEL_08_010080] - Configure SSHD to use only approved ciphers'
    lineinfile:
      state: present
      path: /etc/ssh/sshd_config
      regexp: '^Ciphers '
      line: Ciphers {{ var_sshd_approved_ciphers }}
      create: true
      validate: sshd -t -f %s
    become: true
    notify:
      - systemctl restart sshd.service
    when:
      - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      - DISA_STIG_RHEL_08_010080 | bool
    tags:
      - DISA-STIG-RHEL-08-010080

# EXEMPTION: RHEL-08-010090 - SV-230229r627750_rule

# EXEMPTION: RHEL-08-010100 - SV-230230r627750_rule

  - name: "[DISA_STIG_RHEL_08_010110] - Configure password hashing algorithm in '/etc/login.defs'"
    lineinfile:
      state: present
      path: /etc/login.defs
      regexp: '^ENCRYPT_METHOD '
      line: ENCRYPT_METHOD SHA512
      create: true
    become: true
    when:
      - DISA_STIG_RHEL_08_010110 | bool
    tags:
      - DISA-STIG-RHEL-08-010110

  - name: '[Miscellaneous] - Flush all handlers'
    meta: flush_handlers

  - name: "[BLOCK] - [DISA_STIG_RHEL_08_010120] - Validate '/etc/shadow' hashes are FIPS 140-2 approved"
    block:

      - name: "[DISA_STIG_RHEL_08_010120] - Get '/etc/shadow' hashes that are not FIPS 140-2 approved"
        shell: "cut -d: -f-2 /etc/shadow | grep -vE '\\:(\\$6\\$|\\!\\!\\$6\\$|\\*|\\!\\!$|\\!locked$)'"
        become: true
        changed_when: false
        register: user_password_hash_result
        failed_when: user_password_hash_result.rc not in [0, 1]

      - name: "[DISA_STIG_RHEL_08_010120] - Ensure that all hashes in '/etc/shadow' are FIPS 140-2 approved"
        assert:
          that: user_password_hash_result.rc != 0
          success_msg: All password hashes in '/etc/shadow' are FIPS 140-2 approved.
          fail_msg: |
            One or more password hashes in '/etc/shadow' are not FIPS 140-2 approved:
            {{ user_password_hash_result.stdout }}

    when:
      - DISA_STIG_RHEL_08_010120 | bool
    tags:
      - DISA-STIG-RHEL-08-010120

  - name: '[DISA_STIG_RHEL_08_010130] - Configure pam_unix.so module with a specific number of hashing algorithm rounds'
    pamd:
      state: args_present
      path: /etc/authselect/custom/disa-stig
      name: password-auth
      type: password
      control: sufficient
      module_path: pam_unix.so
      module_arguments:
        - sha512
        - rounds=5000
    become: true
    when:
      - DISA_STIG_RHEL_08_010130 | bool
    tags:
      - DISA-STIG-RHEL-08-010130

# EXEMPTION: RHEL-08-010140 - SV-230234r743922_rule

# EXEMPTION: RHEL-08-010150 - SV-230235r743925_rule

  - name: '[DISA_STIG_RHEL_08_010151] - Configure requirement of authentication when booting into rescue mode'
    lineinfile:
      state: present
      path: /usr/lib/systemd/system/rescue.service
      regexp: ^ExecStart=
      line: ExecStart=-/usr/lib/systemd/systemd-sulogin-shell rescue
      create: true
    become: true
    notify:
      - systemctl daemon-reload
    when:
      - DISA_STIG_RHEL_08_010151 | bool
    tags:
      - DISA-STIG-RHEL-08-010151

  - name: '[DISA_STIG_RHEL_08_010160] - Configure pam_unix.so module to use FIPS 140-2 approved cryptographic hashing'
    pamd:
      state: args_present
      path: /etc/authselect/custom/disa-stig
      name: password-auth
      type: password
      control: sufficient
      module_path: pam_unix.so
      module_arguments:
        - sha512
        - rounds=5000
    become: true
    when:
      - DISA_STIG_RHEL_08_010160 | bool
    tags:
      - DISA-STIG-RHEL-08-010160

  - name: "[BLOCK] - [DISA_STIG_RHEL_08_010161] - Ensure that they are no files ending with '.keytab' in '/etc/'"
    block:

      - name: "[DISA_STIG_RHEL_08_010161] - Get a list of files ending with '.keytab' in '/etc/'"
        command: find /etc/ -type f -name *.keytab
        become: true
        changed_when: false
        register: keytab_file_results

      - name: "[DISA_STIG_RHEL_08_010161] - Delete all files ending in '.keytab'"
        file:
          state: absent
          path: '{{ item }}'
        become: true
        loop: '{{ keytab_file_results.stdout_lines }}'

    when:
      - DISA_STIG_RHEL_08_010161 | bool
    tags:
      - DISA-STIG-RHEL-08-010161

  - name: "[DISA_STIG_RHEL_08_010162] - Ensure that the 'krb5-workstation' package is not installed"
    package:
      state: absent
      name: krb5-workstation
    become: true
    when:
      - DISA_STIG_RHEL_08_010162 | bool
    tags:
      - DISA-STIG-RHEL-08-010162

  - name: "[DISA_STIG_RHEL_08_010170] - Ensure SELinux state is set to 'enforcing'"
    lineinfile:
      path: /etc/sysconfig/selinux
      regexp: ^SELINUX=
      line: SELINUX={{ var_selinux_state }}
      create: true
    become: true
    notify:
      - reboot
    when:
      - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      - DISA_STIG_RHEL_08_010170 | bool
    tags:
      - DISA-STIG-RHEL-08-010170

  - name: "[DISA_STIG_RHEL_08_010171] - Ensure that the 'policycoreutils' package is installed"
    package:
      state: present
      name: policycoreutils
    become: true
    when:
      - DISA_STIG_RHEL_08_010171 | bool
    tags:
      - DISA-STIG-RHEL-08-010171

  - name: '[BLOCK] - [DISA_STIG_RHEL_08_010180] - Ensure that all public directories are owned by root'
    block:

      - name: '[DISA_STIG_RHEL_08_010180] - Get a list of public directories that are not owned by root'
        command: find / -type d -perm -0002 -not -user root -not -path '/proc' -prune
        become: true
        changed_when: false
        failed_when: public_directory_results.rc not in [0, 1]
        register: public_directory_results

      - name: '[DISA_STIG_RHEL_08_010180] - Ensure that all public directories are owned by root'
        file:
          state: directory
          path: '{{ item }}'
          owner: root
        become: true
        loop: '{{ public_directory_results.stdout_lines }}'

    when:
      - DISA_STIG_RHEL_08_010180 | bool
    tags:
      - DISA-STIG-RHEL-08-010180

  - name: '[BLOCK] - [DISA_STIG_RHEL_08_010190] - Ensure that world-writeable directories have sticky bit set'
    block:

      - name: "[DISA_STIG_RHEL_08_010190] - Get a list of world-writeable directories that don't have sticky bit set"
        command: find / -type d \( -perm -0002 -a ! -perm -1000 \) -not -path '/proc' -prune
        become: true
        changed_when: false
        failed_when: world_writeable_directory_results.rc not in [0, 1]
        register: world_writeable_directory_results

      - name: '[DISA_STIG_RHEL_08_010190] - Ensure that world-writeable directories have sticky bit set'
        file:
          state: directory
          path: '{{ item }}'
          mode: +t
        become: true
        loop: '{{ world_writeable_directory_results.stdout_lines }}'

    when:
      - DISA_STIG_RHEL_08_010190 | bool
    tags:
      - DISA-STIG-RHEL-08-010190

  - name: '[DISA_STIG_RHEL_08_010200] - Configure SSHD with the ClientAliveInterval and ClientAliveCountMax settings'
    lineinfile:
      state: present
      path: /etc/ssh/sshd_config
      regexp: '^{{ item.setting }} '
      line: '{{ item.setting }} {{ item.value }}'
      create: true
      validate: sshd -t -f %s
    become: true
    loop:
      - setting: ClientAliveInterval
        value: '{{ var_sshd_client_alive_interval }}'
      - setting: ClientAliveCountMax
        value: '{{ var_sshd_client_alive_count_max }}'
    notify:
      - systemctl restart sshd.service
    when:
      - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      - DISA_STIG_RHEL_08_010200 | bool
    tags:
      - DISA-STIG-RHEL-08-010200

  - name: "[DISA_STIG_RHEL_08_010210] - Ensure '/var/log/messages' has permissions of '0640'"
    file:
      state: file
      path: /var/log/messages
      mode: '0640'
    become: true
    when:
      - DISA_STIG_RHEL_08_010210 | bool
    tags:
      - DISA-STIG-RHEL-08-010210

  - name: "[DISA_STIG_RHEL_08_010220] - Ensure '/var/log/messages' is owned by root"
    file:
      state: file
      path: /var/log/messages
      owner: root
    become: true
    when:
      - DISA_STIG_RHEL_08_010220 | bool
    tags:
      - DISA-STIG-RHEL-08-010220

  - name: "[DISA_STIG_RHEL_08_010230] - Ensure '/var/log/messages' is group owned by root"
    file:
      state: file
      path: /var/log/messages
      group: root
    become: true
    when:
      - DISA_STIG_RHEL_08_010230 | bool
    tags:
      - DISA-STIG-RHEL-08-010230

  - name: "[DISA_STIG_RHEL_08_010240] - Ensure '/var/log' has permissions of '0755'"
    file:
      state: directory
      path: /var/log
      mode: '0755'
    become: true
    when:
      - DISA_STIG_RHEL_08_010240 | bool
    tags:
      - DISA-STIG-RHEL-08-010240

  - name: "[DISA_STIG_RHEL_08_010250] - Ensure '/var/log' is owned by root"
    file:
      state: directory
      path: /var/log
      owner: root
    become: true
    when:
      - DISA_STIG_RHEL_08_010250 | bool
    tags:
      - DISA-STIG-RHEL-08-010250

  - name: "[DISA_STIG_RHEL_08_010260] - Ensure '/var/log' is group owned by root"
    file:
      state: directory
      path: /var/log
      group: root
    become: true
    when:
      - DISA_STIG_RHEL_08_010260 | bool
    tags:
      - DISA-STIG-RHEL-08-010260

  - name: "[BLOCK] - [DISA_STIG_RHEL_08_010270] - Ensure '/var/log/audit/audit.log' has permissions of '0600'"
    block:

      - name: "[DISA_STIG_RHEL_08_010270] - Check whether the '/var/log/audit/audit.log' file exists"
        stat:
          path: /var/log/audit/audit.log
        become: true
        register: audit_log_file_results

      - name: "[DISA_STIG_RHEL_08_010270] - Ensure '/var/log/audit/audit.log' has permissions of '0600'"
        file:
          state: file
          path: /var/log/audit/audit.log
          mode: '0600'
        become: true
        when: audit_log_file_results.stat.exists | bool

    when:
      - DISA_STIG_RHEL_08_010270 | bool
    tags:
      - DISA-STIG-RHEL-08-010270

  - name: "[BLOCK] - [DISA_STIG_RHEL_08_010280] - Ensure '/var/log/audit/' files are owned by root"
    block:

      - name: "[DISA_STIG_RHEL_08_010280] - Check whether the '/var/log/audit' directory exists"
        stat:
          path: /var/log/audit
        become: true
        register: audit_directory_results

      - name: "[DISA_STIG_RHEL_08_010280] - Ensure '/var/log/audit' directory is owned by root"
        file:
          state: directory
          path: /var/log/audit
          owner: root
        become: true
        when: audit_directory_results.stat.exists | bool

      - name: "[DISA_STIG_RHEL_08_010280] - Check whether the '/var/log/audit/audit.log' file exists"
        stat:
          path: /var/log/audit/audit.log
        become: true
        register: audit_log_file_owner_results

      - name: "[DISA_STIG_RHEL_08_010280] - Ensure '/var/log/audit/audit.log' file is owned by root"
        file:
          state: file
          path: /var/log/audit/audit.log
          owner: root
        become: true
        when: audit_log_file_owner_results.stat.exists | bool

    when:
      - DISA_STIG_RHEL_08_010280 | bool
    tags:
      - DISA-STIG-RHEL-08-010280

  - name: '[DISA_STIG_RHEL_08_010290] - Ensure MACs only uses FIPS 140-2 approved hashing algorithms'
    lineinfile:
      state: present
      path: /etc/crypto-policies/back-ends/opensshserver.config
      regexp: ^(.*) -oMACs=[a-zA-Z0-9@\.,-]+ (.*)$
      line: \1 -oMACs=hmac-sha2-512,hmac-sha2-256 \2
      backrefs: true
      create: false
    become: true
    notify:
      - reboot
    when:
      - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      - DISA_STIG_RHEL_08_010290 | bool
    tags:
      - DISA-STIG-RHEL-08-010290

  - name: '[DISA_STIG_RHEL_08_010291] - Ensure that the SSH server connections use DoD-approved encryption'
    lineinfile:
      state: present
      path: /etc/crypto-policies/back-ends/opensshserver.config
      regexp: ^(.*)( |')-oCiphers=[a-zA-Z0-9@\.,-]+ (.*)$
      line: \1\2-oCiphers=aes256-ctr,aes192-ctr,aes128-ctr \3
      backrefs: true
      create: false
    become: true
    notify:
      - reboot
    when:
      - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      - DISA_STIG_RHEL_08_010291 | bool
    tags:
      - DISA-STIG-RHEL-08-010291

  - name: '[DISA_STIG_RHEL_08_010292] - Ensure that the SSH server uses strong entropy'
    lineinfile:
      state: present
      path: /etc/sysconfig/sshd
      regexp: ^SSH_USE_STRONG_RNG ?=
      line: SSH_USE_STRONG_RNG=32
      create: true
    become: true
    notify:
      - systemctl restart sshd.service
    when:
      - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      - DISA_STIG_RHEL_08_010292 | bool
    tags:
      - DISA-STIG-RHEL-08-010292

# NOTE: RHEL-08-010293 - SV-230254r627750_rule is combined with the task for 'RHEL-08-010020'.

  - name: '[DISA_STIG_RHEL_08_010294] - Ensure that DoD-approved TLS encryption is used with OpenSSH'
    lineinfile:
      state: present
      path: /etc/crypto-policies/back-ends/opensslcnf.config
      regexp: ^MinProtocol
      line: MinProtocol = TLSv1.2
      create: true
    become: true
    notify:
      - reboot
    when:
      - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      - DISA_STIG_RHEL_08_010294 | bool
    tags:
      - DISA-STIG-RHEL-08-010294

  - name: '[Miscellaneous] - Flush all handlers'
    meta: flush_handlers

  - name: '[BLOCK] - [DISA_STIG_RHEL_08_010295] - Ensure that DoD-approved TLS encryption is used by the GnuTLS package'
    block:

      - name: '[DISA_STIG_RHEL_08_010295] - Set facts to check and configure the DoD-approved TLS encryption'
        set_fact:
          correct_value: +VERS-ALL:-VERS-DTLS0.9:-VERS-SSL3.0:-VERS-TLS1.0:-VERS-TLS1.1:-VERS-DTLS1.0
          lineinfile_reg: \+VERS-ALL:-VERS-DTLS0\.9:-VERS-SSL3\.0:-VERS-TLS1\.0:-VERS-TLS1\.1:-VERS-DTLS1\.0

      - name: '[DISA_STIG_RHEL_08_010295] - Register GnuTLS config file'
        stat:
          path: /etc/crypto-policies/back-ends/gnutls.config
          follow: yes
        register: gnutls_file

      - name: '[DISA_STIG_RHEL_08_010295] - Add missing gnutls config file if not present'
        lineinfile:
          path: /etc/crypto-policies/back-ends/gnutls.config
          regexp: '{{ lineinfile_reg }}'
          line: '{{ correct_value }}'
          create: yes
        when: not gnutls_file.stat.exists or gnutls_file.stat.size <= correct_value|length

      - name: '[DISA_STIG_RHEL_08_010295] - Ensure that DoD-approved TLS encryption is used by the GnuTLS package'
        block:
          - name: '[DISA_STIG_RHEL_08_010295] - Check whether DoD-approved TLS encryption is being used by the GnuTLS package'
            lineinfile:
              path: /etc/crypto-policies/back-ends/gnutls.config
              create: false
              regexp: '{{ lineinfile_reg }}'
              state: absent
            check_mode: true
            changed_when: false
            register: gnutls

          - name: '[DISA_STIG_RHEL_08_010295] - Configure GnuTLS config file to use DoD-approved encryption'
            replace:
              path: /etc/crypto-policies/back-ends/gnutls.config
              regexp: (\+VERS-ALL(?::-VERS-[A-Z]+\d\.\d)+)
              replace: '{{ correct_value }}'
            when: gnutls.found is defined and gnutls.found != 1

        when: gnutls_file.stat.exists and gnutls_file.stat.size > correct_value|length
    when:
      - DISA_STIG_RHEL_08_010295 | bool
    tags:
      - DISA-STIG-RHEL-08-010295

  - name: "[BLOCK] - [DISA_STIG_RHEL_08_010300] - Ensure that system commands have mode '0755' or less permissive"
    block:

      - name: "[DISA_STIG_RHEL_08_010300] - Get the system commands that have mode more permissive than '0755'"
        command: find -L /bin /sbin /usr/bin /usr/sbin /usr/local/bin /usr/local/sbin -perm /0022 -type f
        become: true
        changed_when: false
        register: system_commands_permissions_results

      - name: "[DISA_STIG_RHEL_08_010300] - Ensure that system commands have mode '0755' or less permissive"
        file:
          state: file
          path: '{{ item }}'
          mode: g-w,o-w
        become: true
        loop: '{{ system_commands_permissions_results.stdout_lines }}'

    when:
      - DISA_STIG_RHEL_08_010300 | bool
    tags:
      - DISA-STIG-RHEL-08-010300

  - name: '[BLOCK] - [DISA_STIG_RHEL_08_010310] - Ensure that system commands are owned by root'
    block:

      - name: '[DISA_STIG_RHEL_08_010310] - Get the system commands are owned by root'
        command: find -L /bin /sbin /usr/bin /usr/sbin /usr/local/bin /usr/local/sbin ! -user root
        become: true
        changed_when: false
        register: system_commands_owner_results

      - name: '[DISA_STIG_RHEL_08_010310] - Ensure that system commands are owned by root'
        file:
          state: file
          path: '{{ item }}'
          owner: root
        become: true
        loop: '{{ system_commands_owner_results.stdout_lines }}'

    when:
      - DISA_STIG_RHEL_08_010310 | bool
    tags:
      - DISA-STIG-RHEL-08-010310

  - name: '[Miscellaneous] - Flush all handlers'
    meta: flush_handlers

  - name: '[BLOCK] - [DISA_STIG_RHEL_08_010320] - Ensure that system commands are group-owned by root or a system account'
    block:

      - name: '[DISA_STIG_RHEL_08_010320] - Get the system commands are group-owned by root or a system account'
        command: find /bin /sbin /usr/bin /usr/sbin /usr/local/bin /usr/local/sbin -type f -gid +999
        become: true
        changed_when: false
        failed_when: false
        register: system_commands_group_results

      - name: '[DISA_STIG_RHEL_08_010320] - Ensure that system commands are group-owned by root or a system account'
        assert:
          that: system_commands_group_results.stdout_lines | length == 0
          success_msg: All system commands are group-owned by root or a known system account
          fail_msg: |
            One or more system commands are not owned by root or a known system account:
            {{ system_commands_group_results.stdout }}

    when:
      - DISA_STIG_RHEL_08_010320 | bool
    tags:
      - DISA-STIG-RHEL-08-010320

  - name: "[BLOCK] - [DISA_STIG_RHEL_08_010330] - Ensure that library files have mode '0755' or less permissive"
    block:

      - name: "[DISA_STIG_RHEL_08_010330] - Get the library files that have mode more permissive than '0755'"
        command: find -L /lib /lib64 /usr/lib /usr/lib64 -perm /0022 -type f
        become: true
        changed_when: false
        register: library_files_permission_results

      - name: "[DISA_STIG_RHEL_08_010330] - Ensure that library files have mode '0755' or less permissive"
        file:
          state: file
          path: '{{ item }}'
          mode: g-w,o-w
        become: true
        loop: '{{ library_files_permission_results.stdout_lines }}'

    when:
      - DISA_STIG_RHEL_08_010330 | bool
    tags:
      - DISA-STIG-RHEL-08-010330

  - name: '[BLOCK] - [DISA_STIG_RHEL_08_010340] - Ensure that library files are owned by root'
    block:

      - name: '[DISA_STIG_RHEL_08_010340] - Get the library files are owned by root'
        command: find -L /lib /lib64 /usr/lib /usr/lib64 ! -user root
        become: true
        changed_when: false
        register: library_files_owner_results

      - name: '[DISA_STIG_RHEL_08_010340] - Ensure that library files are owned by root'
        file:
          state: file
          path: '{{ item }}'
          owner: root
        become: true
        loop: '{{ library_files_owner_results.stdout_lines }}'

    when:
      - DISA_STIG_RHEL_08_010340 | bool
    tags:
      - DISA-STIG-RHEL-08-010340

  - name: '[Miscellaneous] - Flush all handlers'
    meta: flush_handlers

  - name: '[BLOCK] - [DISA_STIG_RHEL_08_010350] - Ensure that library files are group-owned by root or a system account'
    block:

      - name: '[DISA_STIG_RHEL_08_010350] - Get the library files that are not group-owned by root or a system account'
        command: find /lib /lib64 /usr/lib /usr/lib64 -type f -gid +999
        become: true
        changed_when: false
        register: library_files_group_results

      - name: '[DISA_STIG_RHEL_08_010350] - Ensure that library files are group-owned by root or a system account'
        assert:
          that: library_files_group_results.stdout_lines | length == 0
          success_msg: All library files are group-owned by root or a known system account
          fail_msg: |
            One or more library files are not owned by root or a known system account:
            {{ library_files_group_results.stdout }}

    when:
      - DISA_STIG_RHEL_08_010350 | bool
    tags:
      - DISA-STIG-RHEL-08-010350

  - name: '[BLOCK] - [DISA_STIG_RHEL_08_010360] - Ensure that AIDE file integrity tool is installed and configured'
    block:

      - name: '[DISA_STIG_RHEL_08_010360] - Ensure AIDE is installed'
        package:
          name: aide
          state: present
        become: true

      - name: '[DISA_STIG_RHEL_08_010360] - Get the AIDE binary path'
        command: which aide
        register: aide_path_results
        changed_when: false
        become: true

      - name: '[DISA_STIG_RHEL_08_010360] - Create the AIDE check cron job with email report'
        cron:
          name: '{{ aide_cronjob_name }}'
          user: root
          state: present
          minute: '0'
          hour: '1'
          day: '*'
          month: '*'
          weekday: '*'
          job: '{{ aide_path_results.stdout }} --check -c /etc/aide.conf | /bin/mail -s "AIDE Report - $HOSTNAME" root'
        become: true

    when:
      - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      - DISA_STIG_RHEL_08_010360 | bool
    tags:
      - DISA-STIG-RHEL-08-010360

  - name: '[DISA_STIG_RHEL_08_010370] - Ensure GPG check for packages is globally activated'
    ini_file:
      path: '{{ item }}'
      section: main
      option: gpgcheck
      value: 1
      no_extra_spaces: true
      create: true
    become: true
    loop:
      - /etc/yum.conf
      - /etc/dnf/dnf.conf
    when:
      - DISA_STIG_RHEL_08_010370 | bool
    tags:
      - DISA-STIG-RHEL-08-010370

  - name: '[DISA_STIG_RHEL_08_010019] - Read permission of GPG key directory'
    stat:
      path: /etc/pki/rpm-gpg/
    register: gpg_key_directory_permission
    check_mode: false
    when: DISA_STIG_RHEL_08_010019 | bool
    tags:
      - DISA-STIG-RHEL-08-010019
  - name: '[DISA_STIG_RHEL_08_010019] - Read signatures in GPG key'
    command: gpg --show-keys --with-fingerprint --with-colons "/etc/pki/rpm-gpg/RPM-GPG-KEY-redhat-release"
    changed_when: false
    register: gpg_fingerprints
    check_mode: false
    when: DISA_STIG_RHEL_08_010019 | bool
    tags:
      - DISA-STIG-RHEL-08-010019
  - name: '[DISA_STIG_RHEL_08_010019] - Set Fact - Installed GPG Fingerprints'
    set_fact:
      gpg_installed_fingerprints: |-
        {{ gpg_fingerprints.stdout | regex_findall('^pub.*
        (?:^fpr[:]*)([0-9A-Fa-f]*)', '\1') | list }}
    when: DISA_STIG_RHEL_08_010019 | bool
    tags:
      - DISA-STIG-RHEL-08-010019
  - name: '[DISA_STIG_RHEL_08_010019] - Set Fact - Valid fingerprints'
    set_fact:
      gpg_valid_fingerprints: ("567E347AD0044ADE55BA8A5F199E2F91FD431D51" "6A6AA7C97C8890AEC6AEBFE2F76F66C3D4082792")
    when: DISA_STIG_RHEL_08_010019 | bool
    tags:
      - DISA-STIG-RHEL-08-010019
  - name: '[DISA_STIG_RHEL_08_010019] - Import RedHat GPG key'
    rpm_key:
      state: present
      key: /etc/pki/rpm-gpg/RPM-GPG-KEY-redhat-release
    when:
      - DISA_STIG_RHEL_08_010019 | bool
      - gpg_key_directory_permission.stat.mode <= '0755'
      - (gpg_installed_fingerprints | difference(gpg_valid_fingerprints)) | length == 0
      - gpg_installed_fingerprints | length > 0
      - ansible_distribution == "RedHat"
    tags:
      - DISA-STIG-RHEL-08-010019

  - name: '[DISA_STIG_RHEL_08_010371] - Ensure GPG check for local packages is globally activated'
    ini_file:
      path: '{{ item }}'
      section: main
      option: localpkg_gpgcheck
      value: 1
      no_extra_spaces: true
      create: true
    become: true
    loop:
      - /etc/yum.conf
      - /etc/dnf/dnf.conf
    when:
      - DISA_STIG_RHEL_08_010371 | bool
    tags:
      - DISA-STIG-RHEL-08-010371

  - name: "[DISA_STIG_RHEL_08_010372] - Ensure that the kernel parameter 'kernel.kexec_load_disabled' is set to '1'"
    sysctl:
      state: present
      name: kernel.kexec_load_disabled
      value: '1'
      reload: true
    become: true
    when:
      - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      - DISA_STIG_RHEL_08_010372 | bool
    tags:
      - DISA-STIG-RHEL-08-010372

  - name: "[DISA_STIG_RHEL_08_010373] - Ensure that the kernel parameter 'fs.protected_symlinks' is set to '1'"
    sysctl:
      state: present
      name: fs.protected_symlinks
      value: '1'
      reload: true
    become: true
    when:
      - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      - DISA_STIG_RHEL_08_010373 | bool
    tags:
      - DISA-STIG-RHEL-08-010373

  - name: "[DISA_STIG_RHEL_08_010374] - Ensure that the kernel parameter 'fs.protected_hardlinks' is set to '1'"
    sysctl:
      state: present
      name: fs.protected_hardlinks
      value: '1'
      reload: true
    become: true
    when:
      - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      - DISA_STIG_RHEL_08_010374 | bool
    tags:
      - DISA-STIG-RHEL-08-010374

  - name: "[DISA_STIG_RHEL_08_010375] - Ensure that the kernel parameter 'kernel.dmesg_restrict' is set to '1'"
    sysctl:
      state: present
      name: kernel.dmesg_restrict
      value: '1'
      reload: true
    become: true
    when:
      - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      - DISA_STIG_RHEL_08_010375 | bool
    tags:
      - DISA-STIG-RHEL-08-010375

  - name: "[DISA_STIG_RHEL_08_010376] - Ensure that the kernel parameter 'kernel.perf_event_paranoid' is set to '2'"
    sysctl:
      state: present
      name: kernel.perf_event_paranoid
      value: '2'
      reload: true
    become: true
    when:
      - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      - DISA_STIG_RHEL_08_010376 | bool
    tags:
      - DISA-STIG-RHEL-08-010376

# EXEMPTION: RHEL-08-010380 - SV-230271r627750_rule

  - name: '[Miscellaneous] - Flush all handlers'
    meta: flush_handlers

  - name: "[BLOCK] - [DISA_STIG_RHEL_08_010381] - Ensure that there are no occurrences of '!authenticate' in '/etc/sudoers' or '/etc/sudoers.d/*'"
    block:

      - name: "[DISA_STIG_RHEL_08_010381] - Check whether there are any occurrences of '!authenticate' in '/etc/sudoers' or '/etc/sudoers.d/*'"
        command: grep -ir '!authenticate' /etc/sudoers /etc/sudoers.d
        become: true
        changed_when: false
        register: sudoers_authenticate_results
        failed_when: sudoers_authenticate_results.rc not in [0, 1]

      - name: "[DISA_STIG_RHEL_08_010381] - Ensure that there are no occurrences of '!authenticate' in '/etc/sudoers' or '/etc/sudoers.d/*'"
        assert:
          that: sudoers_authenticate_results.rc == 1
          success_msg: Found no occurrences of '!authenticate' in '/etc/sudoers' or '/etc/sudoers.d/*'
          fail_msg: |
            One or more occurrences of '!authenticate' were found in '/etc/sudoers' or '/etc/sudoers.d/*'
            {{ sudoers_authenticate_results.stdout }}

    when:
      - DISA_STIG_RHEL_08_010381 | bool
    tags:
      - DISA-STIG-RHEL-08-010381

  - name: '[Miscellaneous] - Flush all handlers'
    meta: flush_handlers

  - name: '[BLOCK] - [DISA_STIG_RHEL_08_010382] - Ensure that only authorized users can escalate permissions'
    block:

      - name: "[DISA_STIG_RHEL_08_010382] - Check whether only authorized users can escalate permissions in '/etc/sudoers' or '/etc/sudoers.d/*'"
        command: grep -Er 'ALL\s+ALL=\((ALL|ALL:ALL)\)\s+ALL' /etc/sudoers /etc/sudoers.d
        become: true
        changed_when: false
        register: sudoers_all_permit_results
        failed_when: sudoers_all_permit_results.rc not in [0, 1]

      - name: '[DISA_STIG_RHEL_08_010382] - Ensure that only authorized users can escalate permissions'
        assert:
          that: sudoers_all_permit_results.rc == 1
          success_msg: Found no occurrences of 'ALL ALL=(ALL) ALL' or 'ALL ALL=(ALL:ALL) ALL' in '/etc/sudoers' or '/etc/sudoers.d/*'
          fail_msg: |
            One or more occurrences of 'ALL ALL=(ALL) ALL' or 'ALL ALL=(ALL:ALL) ALL' were found in '/etc/sudoers' or '/etc/sudoers.d/*'
            {{ sudoers_all_permit_results.stdout }}

    when:
      - DISA_STIG_RHEL_08_010382 | bool
    tags:
      - DISA-STIG-RHEL-08-010382

  - name: '[DISA_STIG_RHEL_08_010383] - Ensure that privilege escalation requires users enter their password'
    lineinfile:
      state: present
      path: /etc/sudoers
      regexp: '{{ item.regexp }}'
      line: '{{ item.line }}'
      create: true
    become: true
    loop:
      - regexp: ^Defaults\s+\!rootpw
        line: Defaults !rootpw
      - regexp: ^Defaults\s+\!targetpw
        line: Defaults !targetpw
      - regexp: ^Defaults\s+\!runaspw
        line: Defaults !runaspw
    when:
      - DISA_STIG_RHEL_08_010383 | bool
    tags:
      - DISA-STIG-RHEL-08-010383

  - name: '[DISA_STIG_RHEL_08_010384] - Ensure that re-authentication is required when using sudo'
    lineinfile:
      state: present
      path: /etc/sudoers
      regexp: ^Defaults timestamp_timeout ?=
      line: Defaults timestamp_timeout=5
      create: true
    become: true
    when:
      - DISA_STIG_RHEL_08_010384 | bool
    tags:
      - DISA-STIG-RHEL-08-010384

  - name: '[DISA_STIG_RHEL_08_010390] - Install multi-factor authentication related packages'
    package:
      state: present
      name: openssl-pkcs11
    become: true
    when:
      - DISA_STIG_RHEL_08_010390 | bool
    tags:
      - DISA-STIG-RHEL-08-010390

  - name: '[DISA_STIG_RHEL_08_010400] - Ensure certificate status checking for multifactor authentication'
    ini_file:
      state: present
      path: /etc/sssd/sssd.conf
      section: sssd
      option: certificate_verification
      value: ocsp_dgst=sha1
      create: true
      owner: root
      group: root
      mode: '0600'
    become: true
    notify:
      - systemctl restart sssd.service
    when:
      - DISA_STIG_RHEL_08_010400 | bool
    tags:
      - DISA-STIG-RHEL-08-010400

  - name: "[DISA_STIG_RHEL_08_010410] - Install the 'opensc' package"
    package:
      state: present
      name: opensc
    become: true
    when:
      - DISA_STIG_RHEL_08_010410 | bool
    tags:
      - DISA-STIG-RHEL-08-010410

  - name: '[Miscellaneous] - Flush all handlers'
    meta: flush_handlers

  - name: '[BLOCK] - [DISA_STIG_RHEL_08_010420] - Ensure that the NX (no-execution) bit flag is set'
    block:

      - name: '[DISA_STIG_RHEL_08_010420] - Check whether the NX (no-execution) bit flag is set'
        shell: dmesg | grep NX | grep -i active
        become: true
        changed_when: false
        register: dmesg_nx_results
        failed_when: dmesg_nx_results.rc not in [0, 1]

      - name: '[DISA_STIG_RHEL_08_010420] - Ensure that the NX (no-execution) bit flag is set'
        assert:
          that: dmesg_nx_results.rc == 0
          success_msg: NX bit execute protection is enabled according to 'dmesg'.
          fail_msg: |
            NX bit execute protection is not enabled according to 'dmesg'.
            Please manually correct this by enabling NX bit execute protection in the BIOS.

    when:
      - DISA_STIG_RHEL_08_010420 | bool
    tags:
      - DISA-STIG-RHEL-08-010420

  - name: '[BLOCK] - [DISA_STIG_RHEL_08_010421] - Ensure that GRUB 2 page poisoning is enabled'
    block:

      - name: '[DISA_STIG_RHEL_08_010421] - Check whether GRUB 2 page poisoning is enabled'
        shell: grubby --info DEFAULT | grep '^args=' | grep page_poison=1
        become: true
        changed_when: false
        register: grub2_page_poisoning_results
        failed_when: grub2_page_poisoning_results.rc not in [0, 1]

      - name: '[DISA_STIG_RHEL_08_010421] - Ensure that GRUB 2 page poisoning is enabled'
        command: grubby --update-kernel=ALL --args="page_poison=1"
        become: true
        notify:
          - reboot
        when: grub2_page_poisoning_results.rc == 1

      - name: "[DISA_STIG_RHEL_08_010421] - Check whether the '/etc/default/grub' file contains the page poisoning argument"
        shell: cat /etc/default/grub | grep '^GRUB_CMDLINE_LINUX' | grep 'page_poison=1'
        become: true
        changed_when: false
        register: grub2_cmdline_page_poisoning_results
        failed_when: grub2_cmdline_page_poisoning_results.rc not in [0, 1]

      - name: "[DISA_STIG_RHEL_08_010421] - Ensure that the '/etc/default/grub' file contains the page poisoning argument"
        lineinfile:
          path: /etc/default/grub
          regexp: ^GRUB_CMDLINE_LINUX="(((?!page_poison=1).)*)"
          line: GRUB_CMDLINE_LINUX="\1 page_poison=1"
          backrefs: true
        become: true
        notify:
          - reboot
        when: grub2_cmdline_page_poisoning_results.rc == 1

    when:
      - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      - DISA_STIG_RHEL_08_010421 | bool
    tags:
      - DISA-STIG-RHEL-08-010421

  - name: '[BLOCK] - [DISA_STIG_RHEL_08_010422] - Ensure that virtual syscalls are disabled'
    block:

      - name: '[DISA_STIG_RHEL_08_010422] - Check whether virtual syscalls are disabled'
        shell: grubby --info DEFAULT | grep '^args=' | grep vsyscall=none
        become: true
        changed_when: false
        register: grub2_vsyscall_results
        failed_when: grub2_vsyscall_results.rc not in [0, 1]

      - name: '[DISA_STIG_RHEL_08_010422] - Ensure that virtual syscalls are disabled'
        command: grubby --update-kernel=ALL --args="vsyscall=none"
        become: true
        notify:
          - reboot
        when: grub2_vsyscall_results.rc == 1

      - name: "[DISA_STIG_RHEL_08_010422] - Check whether the '/etc/default/grub' file contains the virtual syscall argument"
        shell: cat /etc/default/grub | grep '^GRUB_CMDLINE_LINUX' | grep 'vsyscall=none'
        become: true
        changed_when: false
        register: grub2_cmdline_vsyscall_results
        failed_when: grub2_cmdline_vsyscall_results.rc not in [0, 1]

      - name: "[DISA_STIG_RHEL_08_010422] - Ensure that the '/etc/default/grub' file contains the virtual syscall argument"
        lineinfile:
          path: /etc/default/grub
          regexp: ^GRUB_CMDLINE_LINUX="(((?!vsyscall=none).)*)"
          line: GRUB_CMDLINE_LINUX="\1 vsyscall=none"
          backrefs: true
        become: true
        notify:
          - reboot
        when: grub2_cmdline_vsyscall_results.rc == 1

    when:
      - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      - DISA_STIG_RHEL_08_010422 | bool
    tags:
      - DISA-STIG-RHEL-08-010422

  - name: '[BLOCK] - [DISA_STIG_RHEL_08_010423] - Ensure that the system is configured to clear SLUB/SLAB objects'
    block:

      - name: '[DISA_STIG_RHEL_08_010423] - Check whether the system is configured to clear SLUB/SLAB objects'
        shell: grubby --info DEFAULT | grep '^args=' | grep slub_debug=P
        become: true
        changed_when: false
        register: grub2_slub_debug_results
        failed_when: grub2_slub_debug_results.rc not in [0, 1]

      - name: '[DISA_STIG_RHEL_08_010423] - Ensure that the system is configured to clear SLUB/SLAB objects'
        command: grubby --update-kernel=ALL --args="slub_debug=P"
        become: true
        notify:
          - reboot
        when: grub2_slub_debug_results.rc == 1

      - name: "[DISA_STIG_RHEL_08_010423] - Check whether the '/etc/default/grub' file contains the SLUB/SLAB objects argument"
        shell: cat /etc/default/grub | grep '^GRUB_CMDLINE_LINUX' | grep 'slub_debug=P'
        become: true
        changed_when: false
        register: grub2_cmdline_slub_results
        failed_when: grub2_cmdline_slub_results.rc not in [0, 1]

      - name: "[DISA_STIG_RHEL_08_010423] - Ensure that the '/etc/default/grub' file contains the SLUB/SLAB objects argument"
        lineinfile:
          path: /etc/default/grub
          regexp: ^GRUB_CMDLINE_LINUX="(((?!slub_debug=P).)*)"
          line: GRUB_CMDLINE_LINUX="\1 slub_debug=P"
          backrefs: true
        become: true
        notify:
          - reboot
        when: grub2_cmdline_slub_results.rc == 1

    when:
      - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      - DISA_STIG_RHEL_08_010423 | bool
    tags:
      - DISA-STIG-RHEL-08-010423

  - name: "[DISA_STIG_RHEL_08_010430] - Ensure that the kernel parameter 'kernel.kernel.randomize_va_space' is set to '2'"
    sysctl:
      state: present
      name: kernel.randomize_va_space
      value: '2'
      reload: true
    become: true
    when:
      - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      - DISA_STIG_RHEL_08_010430 | bool
    tags:
      - DISA-STIG-RHEL-08-010430

  - name: '[DISA_STIG_RHEL_08_010440] - Ensure that unneeded packages are removed'
    ini_file:
      path: '{{ item }}'
      section: main
      option: clean_requirements_on_remove
      value: 1
      no_extra_spaces: true
      create: true
    become: true
    loop:
      - /etc/yum.conf
      - /etc/dnf/dnf.conf
    when:
      - DISA_STIG_RHEL_08_010440 | bool
    tags:
      - DISA-STIG-RHEL-08-010440

  - name: '[DISA_STIG_RHEL_08_010450] - Ensure that SELinux is configured to verify correct operation of all security functions'
    lineinfile:
      path: /etc/sysconfig/selinux
      regexp: ^SELINUXTYPE=
      line: SELINUXTYPE={{ var_selinux_policy_name }}
      create: true
    become: true
    notify:
      - reboot
    when:
      - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      - DISA_STIG_RHEL_08_010450 | bool
    tags:
      - DISA-STIG-RHEL-08-010450

  - name: "[DISA_STIG_RHEL_08_010460] - Ensure that there are no 'shosts.equiv' files present"
    file:
      path: /etc/ssh/shosts.equiv
      state: absent
    become: true
    when:
      - DISA_STIG_RHEL_08_010460 | bool
    tags:
      - DISA-STIG-RHEL-08-010460

  - name: "[BLOCK] - [DISA_STIG_RHEL_08_010470] - Ensure that there are no '.shosts' files on the system"
    block:

      - name: "[DISA_STIG_RHEL_08_010470] - Find all '.shosts' files on the system"
        command: find / -name '*.shosts' -type f
        become: true
        changed_when: false
        register: find_shosts_results
        failed_when: find_shosts_results.rc not in [0, 1]

      - name: "[DISA_STIG_RHEL_08_010470] - Delete all '.shosts' files from the system"
        file:
          path: '{{ item }}'
          state: absent
        become: true
        loop: '{{ find_shosts_results.stdout_lines }}'

    when:
      - DISA_STIG_RHEL_08_010470 | bool
    tags:
      - DISA-STIG-RHEL-08-010470

# NOTE: The next two tasks are out of order due to RHEL-08-010471 requiring that RHEL-08-010472 be ran first.

  - name: "[DISA_STIG_RHEL_08_010472] - Ensure that the 'rng-tools' package is installed"
    package:
      state: present
      name: rng-tools
    become: true
    when:
      - DISA_STIG_RHEL_08_010472 | bool
    tags:
      - DISA-STIG-RHEL-08-010472

  - name: '[DISA_STIG_RHEL_08_010471] - Start and enable hardware random number generator entropy gatherer service'
    systemd:
      state: started
      name: rngd.service
      enabled: true
    become: true
    when:
      - DISA_STIG_RHEL_08_010471 | bool
    tags:
      - DISA-STIG-RHEL-08-010471

  - name: "[BLOCK] - [DISA_STIG_RHEL_08_010480] - Ensure that public key files have mode '0644' or less permissive"
    block:

      - name: "[DISA_STIG_RHEL_08_010480] - Get the public key files have mode '0644' or less permissive"
        command: find /etc/ssh/ -name '*.pub' -perm /0133 -type f
        become: true
        changed_when: false
        register: public_key_permissions_results

      - name: "[DISA_STIG_RHEL_08_010480] - Ensure that public key files have mode '0644' or less permissive"
        file:
          state: file
          path: '{{ item }}'
          mode: '0644'
        become: true
        loop: '{{ public_key_permissions_results.stdout_lines }}'

    when:
      - DISA_STIG_RHEL_08_010480 | bool
    tags:
      - DISA-STIG-RHEL-08-010480

  - name: "[BLOCK] - [DISA_STIG_RHEL_08_010490] - Ensure that private key files have mode '0600' or less permissive"
    block:

      - name: "[DISA_STIG_RHEL_08_010490] - Get the private key files have mode '0600' or less permissive"
        command: find /etc/ssh/ -name 'ssh_host*key' -perm /0177 -type f
        become: true
        changed_when: false
        register: private_key_permissions_results

      - name: "[DISA_STIG_RHEL_08_010490] - Ensure that private key files have mode '0600' or less permissive"
        file:
          state: file
          path: '{{ item }}'
          mode: '0600'
        become: true
        loop: '{{ private_key_permissions_results.stdout_lines }}'

    when:
      - DISA_STIG_RHEL_08_010490 | bool
    tags:
      - DISA-STIG-RHEL-08-010490

  - name: '[DISA_STIG_RHEL_08_010500] - Configure SSHD with strict mode checking of home directory configuration files'
    lineinfile:
      state: present
      path: /etc/ssh/sshd_config
      regexp: '^StrictModes '
      line: StrictModes yes
      create: true
      validate: sshd -t -f %s
    become: true
    notify:
      - systemctl restart sshd.service
    when:
      - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      - DISA_STIG_RHEL_08_010500 | bool
    tags:
      - DISA-STIG-RHEL-08-010500

  - name: '[DISA_STIG_RHEL_08_010520] - Configure SSHD to disable authentication using known hosts'
    lineinfile:
      state: present
      path: /etc/ssh/sshd_config
      regexp: '^IgnoreUserKnownHosts '
      line: IgnoreUserKnownHosts yes
      create: true
      validate: sshd -t -f %s
    become: true
    notify:
      - systemctl restart sshd.service
    when:
      - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      - DISA_STIG_RHEL_08_010520 | bool
    tags:
      - DISA-STIG-RHEL-08-010520

  - name: '[DISA_STIG_RHEL_08_010521] - Configure SSHD to disable Kerberos authentication'
    lineinfile:
      state: present
      path: /etc/ssh/sshd_config
      regexp: '^KerberosAuthentication '
      line: KerberosAuthentication no
      create: true
      validate: sshd -t -f %s
    become: true
    notify:
      - systemctl restart sshd.service
    when:
      - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      - DISA_STIG_RHEL_08_010521 | bool
    tags:
      - DISA-STIG-RHEL-08-010521

  - name: '[DISA_STIG_RHEL_08_010522] - Configure SSHD to disable GSSAPI authentication'
    lineinfile:
      state: present
      path: /etc/ssh/sshd_config
      regexp: '^GSSAPIAuthentication '
      line: GSSAPIAuthentication no
      create: true
      validate: sshd -t -f %s
    become: true
    notify:
      - systemctl restart sshd.service
    when:
      - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      - DISA_STIG_RHEL_08_010522 | bool
    tags:
      - DISA-STIG-RHEL-08-010522

  - name: '[Miscellaneous] - Flush all handlers'
    meta: flush_handlers

  - name: "[BLOCK] - [DISA_STIG_RHEL_08_010540] - Ensure that '/var' is on its own file system"
    block:

      - name: "[DISA_STIG_RHEL_08_010540] - Check whether '/var' is on its own file system"
        shell: lsblk | grep -E '\s+/var$'
        become: true
        changed_when: false
        register: lsblk_var_results
        failed_when: lsblk_var_results.rc not in [0, 1]

      - name: "[DISA_STIG_RHEL_08_010540] - Ensure that '/var' is on its own file system"
        assert:
          that: lsblk_var_results.rc == 0
          success_msg: The directory '/var' resides on its own file system.
          fail_msg: |
            The directory '/var' does not reside on its own file system.
            Please manually migrate the '/var' direcotry onto its own file system.

    when:
      - DISA_STIG_RHEL_08_010540 | bool
    tags:
      - DISA-STIG-RHEL-08-010540

  - name: '[Miscellaneous] - Flush all handlers'
    meta: flush_handlers

  - name: "[BLOCK] - [DISA_STIG_RHEL_08_010541] - Ensure that '/var/log' is on its own file system"
    block:

      - name: "[DISA_STIG_RHEL_08_010541] - Check whether '/var/log' is on its own file system"
        shell: lsblk | grep -E '\s+/var/log$'
        become: true
        changed_when: false
        register: lsblk_var_log_results
        failed_when: lsblk_var_log_results.rc not in [0, 1]

      - name: "[DISA_STIG_RHEL_08_010541] - Ensure that '/var/log' is on its own file system"
        assert:
          that: lsblk_var_log_results.rc == 0
          success_msg: The directory '/var/log' resides on its own file system.
          fail_msg: |
            The directory '/var/log' does not reside on its own file system.
            Please manually migrate the '/var/log' direcotry onto its own file system.

    when:
      - DISA_STIG_RHEL_08_010541 | bool
    tags:
      - DISA-STIG-RHEL-08-010541

  - name: '[Miscellaneous] - Flush all handlers'
    meta: flush_handlers

  - name: "[BLOCK] - [DISA_STIG_RHEL_08_010542] - Ensure that '/var/log/audit' is on its own file system"
    block:

      - name: "[DISA_STIG_RHEL_08_010542] - Check whether '/var/log/audit' is on its own file system"
        shell: lsblk | grep -E '\s+/var/log/audit$'
        become: true
        changed_when: false
        register: lsblk_var_log_audit_results
        failed_when: lsblk_var_log_audit_results.rc not in [0, 1]

      - name: "[DISA_STIG_RHEL_08_010542] - Ensure that '/var/log/audit' is on its own file system"
        assert:
          that: lsblk_var_log_audit_results.rc == 0
          success_msg: The directory '/var/log/audit' resides on its own file system.
          fail_msg: |
            The directory '/var/log/audit' does not reside on its own file system.
            Please manually migrate the '/var/log/audit' direcotry onto its own file system.

    when:
      - DISA_STIG_RHEL_08_010542 | bool
    tags:
      - DISA-STIG-RHEL-08-010542

  - name: '[Miscellaneous] - Flush all handlers'
    meta: flush_handlers

  - name: "[BLOCK] - [DISA_STIG_RHEL_08_010543] - Ensure that '/tmp' is on its own file system"
    block:

      - name: "[DISA_STIG_RHEL_08_010543] - Check whether '/tmp' is on its own file system"
        shell: lsblk | grep -E '\s+/tmp$'
        become: true
        changed_when: false
        register: lsblk_tmp_results
        failed_when: lsblk_tmp_results.rc not in [0, 1]

      - name: "[DISA_STIG_RHEL_08_010543] - Ensure that '/tmp' is on its own file system"
        assert:
          that: lsblk_tmp_results.rc == 0
          success_msg: The directory '/tmp' resides on its own file system.
          fail_msg: |
            The directory '/tmp' does not reside on its own file system.
            Please manually migrate the '/tmp' direcotry onto its own file system.

    when:
      - DISA_STIG_RHEL_08_010543 | bool
    tags:
      - DISA-STIG-RHEL-08-010543

  - name: '[Miscellaneous] - Flush all handlers'
    meta: flush_handlers

  - name: "[BLOCK] - [DISA_STIG_RHEL_08_010544] - Ensure that '/var/tmp' is on its own file system"
    block:

      - name: "[DISA_STIG_RHEL_08_010544] - Check whether '/var/tmp' is on its own file system"
        shell: lsblk | grep -E '\s+/var/tmp$'
        become: true
        changed_when: false
        register: lsblk_var_tmp_results
        failed_when: lsblk_var_tmp_results.rc not in [0, 1]

      - name: "[DISA_STIG_RHEL_08_010544] - Ensure that '/var/tmp' is on its own file system"
        assert:
          that: lsblk_var_tmp_results.rc == 0
          success_msg: The directory '/var/tmp' resides on its own file system.
          fail_msg: |
            The directory '/var/tmp' does not reside on its own file system.
            Please manually migrate the '/var/tmp' direcotry onto its own file system.

    when:
      - DISA_STIG_RHEL_08_010544 | bool
    tags:
      - DISA-STIG-RHEL-08-010544

  - name: '[DISA_STIG_RHEL_08_010550] - Configure SSHD to disable login as root'
    lineinfile:
      state: present
      path: /etc/ssh/sshd_config
      regexp: '^PermitRootLogin '
      line: PermitRootLogin no
      create: true
      validate: sshd -t -f %s
    become: true
    notify:
      - systemctl restart sshd.service
    when:
      - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      - DISA_STIG_RHEL_08_010550 | bool
    tags:
      - DISA-STIG-RHEL-08-010550

  - name: '[DISA_STIG_RHEL_08_010560] - Start and enable the audit service'
    systemd:
      state: started
      name: auditd.service
      enabled: true
    become: true
    when:
      - DISA_STIG_RHEL_08_010560 | bool
    tags:
      - DISA-STIG-RHEL-08-010560

  - name: '[DISA_STIG_RHEL_08_010561] - Start and enable the rsyslog service'
    systemd:
      state: started
      name: rsyslog.service
      enabled: true
    become: true
    when:
      - DISA_STIG_RHEL_08_010561 | bool
    tags:
      - DISA-STIG-RHEL-08-010561

  - name: "[BLOCK] - [DISA_STIG_RHEL_08_010570] - Ensure that the mount option 'nosuid' is set on '/home'"
    block:

      - name: "[DISA_STIG_RHEL_08_010570] - Get the existing mount options of the '/home' mount point"
        shell: findmnt --fstab '/home' | grep '^/home' | awk '{ print $4 }'
        become: true
        changed_when: false
        failed_when: home_nosuid_options_results.rc not in [0, 1]
        register: home_nosuid_options_results

      - name: "[DISA_STIG_RHEL_08_010570] - Get the source path of the '/home' mount point"
        shell: findmnt --fstab '/home' | grep '^/home' | awk '{ print $2 }'
        become: true
        changed_when: false
        register: home_src_results
        when: "'nosuid' not in home_nosuid_options_results.stdout"

      - name: "[DISA_STIG_RHEL_08_010570] - Get the existing file system type of the '/home' mount point"
        shell: findmnt --fstab '/home' | grep '^/home' | awk '{ print $3 }'
        become: true
        changed_when: false
        register: home_fstype_results
        when: "'nosuid' not in home_nosuid_options_results.stdout"

      - name: "[DISA_STIG_RHEL_08_010570] - Ensure that the mount option 'nosuid' is set on '/home'"
        mount:
          state: present
          path: /home
          src: '{{ home_src_results.stdout }}'
          opts: '{{ home_nosuid_options_results.stdout }},nosuid'
          fstype: '{{ home_fstype_results.stdout }}'
        become: true
        when: "'nosuid' not in home_nosuid_options_results.stdout"

    when:
      - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      - DISA_STIG_RHEL_08_010570 | bool
    tags:
      - DISA-STIG-RHEL-08-010570

# TODO: The following task blocks can be condensed down into two tasks similar to how the 'DISA_STIG_RHEL_08_010580' block uses 'findmnt'

  - name: "[BLOCK] - [DISA_STIG_RHEL_08_010571] - Ensure that the mount option 'nosuid' is set on '/boot'"
    block:

      - name: "[DISA_STIG_RHEL_08_010571] - Get the existing mount options of the '/boot' mount point"
        shell: findmnt --fstab '/boot' | grep '^/boot' | awk '{ print $4 }'
        become: true
        changed_when: false
        failed_when: boot_options_results.rc not in [0, 1]
        register: boot_options_results

      - name: "[DISA_STIG_RHEL_08_010571] - Get the source path of the '/boot' mount point"
        shell: findmnt --fstab '/boot' | grep '^/boot' | awk '{ print $2 }'
        become: true
        changed_when: false
        register: boot_src_results
        when: "'nosuid' not in boot_options_results.stdout"

      - name: "[DISA_STIG_RHEL_08_010571] - Get the existing file system type of the '/boot' mount point"
        shell: findmnt --fstab '/boot' | grep '^/boot' | awk '{ print $3 }'
        become: true
        changed_when: false
        register: boot_fstype_results
        when: "'nosuid' not in boot_options_results.stdout"

      - name: "[DISA_STIG_RHEL_08_010571] - Ensure that the mount option 'nosuid' is set on '/boot'"
        mount:
          state: present
          path: /boot
          src: '{{ boot_src_results.stdout }}'
          opts: '{{ boot_options_results.stdout }},nosuid'
          fstype: '{{ boot_fstype_results.stdout }}'
        become: true
        when: "'nosuid' not in boot_options_results.stdout"

    when:
      - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      - DISA_STIG_RHEL_08_010571 | bool
    tags:
      - DISA-STIG-RHEL-08-010571

  - name: "[BLOCK] - [DISA_STIG_RHEL_08_010572] - Ensure that the mount option 'nosuid' is set on '/boot/efi'"
    block:

      - name: "[DISA_STIG_RHEL_08_010572] - Get the existing mount options of the '/boot/efi' mount point"
        shell: findmnt --fstab '/boot/efi' | grep '^/boot/efi' | awk '{ print $4 }'
        become: true
        changed_when: false
        failed_when: boot_efi_options_results.rc not in [0, 1]
        register: boot_efi_options_results

      - name: "[DISA_STIG_RHEL_08_010572] - Get the source path of the '/boot/efi' mount point"
        shell: findmnt --fstab '/boot/efi' | grep '^/boot/efi' | awk '{ print $2 }'
        become: true
        changed_when: false
        register: boot_efi_src_results
        when:
          - boot_efi_options_results.stdout_lines | length > 0
          - "'nosuid' not in boot_efi_options_results.stdout"

      - name: "[DISA_STIG_RHEL_08_010572] - Get the existing file system type of the '/boot/efi' mount point"
        shell: findmnt --fstab '/boot/efi' | grep '^/boot/efi' | awk '{ print $3 }'
        become: true
        changed_when: false
        register: boot_efi_fstype_results
        when:
          - boot_efi_options_results.stdout_lines | length > 0
          - "'nosuid' not in boot_efi_options_results.stdout"

      - name: "[DISA_STIG_RHEL_08_010572] - Ensure that the mount option 'nosuid' is set on '/boot/efi'"
        mount:
          state: present
          path: /boot/efi
          src: '{{ boot_efi_src_results.stdout }}'
          opts: '{{ boot_efi_options_results.stdout }},nosuid'
          fstype: '{{ boot_efi_fstype_results.stdout }}'
        become: true
        when:
          - boot_efi_options_results.stdout_lines | length > 0
          - "'nosuid' not in boot_efi_options_results.stdout"

    when:
      - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      - DISA_STIG_RHEL_08_010572 | bool
    tags:
      - DISA-STIG-RHEL-08-010572

  - name: "[BLOCK] - [DISA_STIG_RHEL_08_010580] - Ensure that the mount option 'nodev' is set on all non-root partitions"
    block:

      - name: "[DISA_STIG_RHEL_08_010580] - Get a list of non-root partitions without the 'nodev' mount option set"
        shell: mount | grep '^/dev\S* on /\S' | grep -v 'nodev'
        become: true
        changed_when: false
        failed_when: missing_nodev_nonroot_partition_results.rc not in [0, 1]
        register: missing_nodev_nonroot_partition_results

      - name: "[DISA_STIG_RHEL_08_010580] - Get a combined list of mount points without the 'nodev' mount option set"
        shell: findmnt --fstab '{{ item.split(' ')[2] }}' | grep '^{{ item.split(' ')[2] }}' | grep -v 'nodev'
        become: true
        changed_when: false
        failed_when: missing_nodev_partitions_results.rc not in [0, 1]
        register: missing_nodev_partitions_results
        loop: '{{ missing_nodev_nonroot_partition_results.stdout_lines }}'
        when: missing_nodev_nonroot_partition_results.rc == 0

      - name: "[DISA_STIG_RHEL_08_010580] - Ensure that the mount option 'nodev' is set on all non-root partitions"
        mount:
          state: present
          path: "{{ (item.stdout | regex_replace('\\s+', ' ')).split(' ')[0] }}"
          src: "{{ (item.stdout | regex_replace('\\s+', ' ')).split(' ')[1] }}"
          fstype: "{{ (item.stdout | regex_replace('\\s+', ' ')).split(' ')[2] }}"
          opts: "{{ (item.stdout | regex_replace('\\s+', ' ')).split(' ')[3] }},nodev"
        become: true
        loop: '{{ missing_nodev_partitions_results.results }}'
        when:
          - missing_nodev_partitions_results is defined
          - item.stdout is defined
          - item.stdout | length > 0

    when:
      - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      - DISA_STIG_RHEL_08_010580 | bool
    tags:
      - DISA-STIG-RHEL-08-010580

  - name: "[BLOCK] - [DISA_STIG_RHEL_08_010590] - Ensure that the mount option 'noexec' is set on '/home'"
    block:

      - name: "[DISA_STIG_RHEL_08_010590] - Get the existing mount options of the '/home' mount point"
        shell: findmnt --fstab '/home' | grep '^/home' | awk '{ print $4 }'
        become: true
        changed_when: false
        failed_when: home_noexec_options_results.rc not in [0, 1]
        register: home_noexec_options_results

      - name: "[DISA_STIG_RHEL_08_010590] - Get the source path of the '/home' mount point"
        shell: findmnt --fstab '/home' | grep '^/home' | awk '{ print $2 }'
        become: true
        changed_when: false
        register: home_src_results
        when: "'noexec' not in home_noexec_options_results.stdout"

      - name: "[DISA_STIG_RHEL_08_010590] - Get the existing file system type of the '/home' mount point"
        shell: findmnt --fstab '/home' | grep '^/home' | awk '{ print $3 }'
        become: true
        changed_when: false
        register: home_fstype_results
        when: "'noexec' not in home_noexec_options_results.stdout"

      - name: "[DISA_STIG_RHEL_08_010590] - Ensure that the mount option 'noexec' is set on '/home'"
        mount:
          state: present
          path: /home
          src: '{{ home_src_results.stdout }}'
          opts: '{{ home_noexec_options_results.stdout }},noexec'
          fstype: '{{ home_fstype_results.stdout }}'
        become: true
        when: "'noexec' not in home_noexec_options_results.stdout"

    when:
      - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      - DISA_STIG_RHEL_08_010590 | bool
    tags:
      - DISA-STIG-RHEL-08-010590

  - name: '[Miscellaneous] - Flush all handlers'
    meta: flush_handlers

  - name: "[BLOCK] - [DISA_STIG_RHEL_08_010600] - Ensure that the mount option 'nodev' is set on all removeable media"
    block:

      - name: '[DISA_STIG_RHEL_08_010600] - Get a list of removeable media'
        shell: cat /etc/fstab | grep /mnt
        become: true
        changed_when: false
        failed_when: nodev_removeable_media_results.rc not in [0, 1]
        register: nodev_removeable_media_results

      - name: "[DISA_STIG_RHEL_08_010600] - Get a combined list of removeable media without the 'nodev' mount option set"
        shell: cat /etc/fstab | grep /mnt | grep -v nodev
        become: true
        changed_when: false
        failed_when: missing_nodev_removeable_media_results.rc not in [0, 1]
        register: missing_nodev_removeable_media_results
        loop: '{{ nodev_removeable_media_results.stdout_lines }}'
        when: nodev_removeable_media_results.rc == 0

      - name: "[DISA_STIG_RHEL_08_010600] - Ensure that the mount option 'nodev' is set on all removeable media"
        assert:
          that: item.rc == 0
          success_msg: Removeable media mounts has the mount option 'nodev' set.
          fail_msg: |
            One or more removeable media mounts does not have the mount option 'nodev' set.
            Please manually modify '/etc/fstab' to add the 'nodev' mount option to all '/mnt' mount points.
        loop: '{{ missing_nodev_removeable_media_results.results }}'
        when: nodev_removeable_media_results.rc == 0

    when:
      - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      - DISA_STIG_RHEL_08_010600 | bool
    tags:
      - DISA-STIG-RHEL-08-010600

  - name: "[BLOCK] - [DISA_STIG_RHEL_08_010610] - Ensure that the mount option 'noexec' is set on all removeable media"
    block:

      - name: '[DISA_STIG_RHEL_08_010610] - Get a list of removeable media'
        shell: cat /etc/fstab | grep /mnt
        become: true
        changed_when: false
        failed_when: noexec_removeable_media_results.rc not in [0, 1]
        register: noexec_removeable_media_results

      - name: "[DISA_STIG_RHEL_08_010610] - Get a combined list of removeable media without the 'noexec' mount option set"
        shell: cat /etc/fstab | grep /mnt | grep -v noexec
        become: true
        changed_when: false
        failed_when: missing_noexec_removeable_media_results.rc not in [0, 1]
        register: missing_noexec_removeable_media_results
        loop: '{{ noexec_removeable_media_results.stdout_lines }}'
        when: noexec_removeable_media_results.rc == 0

      - name: "[DISA_STIG_RHEL_08_010610] - Ensure that the mount option 'noexec' is set on all removeable media"
        assert:
          that: item.rc == 0
          success_msg: Removeable media mounts has the mount option 'noexec' set.
          fail_msg: |
            One or more removeable media mounts does not have the mount option 'noexec' set.
            Please manually modify '/etc/fstab' to add the 'noexec' mount option to all '/mnt' mount points.
        loop: '{{ missing_noexec_removeable_media_results.results }}'
        when: noexec_removeable_media_results.rc == 0

    when:
      - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      - DISA_STIG_RHEL_08_010610 | bool
    tags:
      - DISA-STIG-RHEL-08-010610

  - name: "[BLOCK] - [DISA_STIG_RHEL_08_010620] - Ensure that the mount option 'nosuid' is set on all removeable media"
    block:

      - name: '[DISA_STIG_RHEL_08_010620] - Get a list of removeable media'
        shell: cat /etc/fstab | grep /mnt
        become: true
        changed_when: false
        failed_when: nosuid_removeable_media_results.rc not in [0, 1]
        register: nosuid_removeable_media_results

      - name: "[DISA_STIG_RHEL_08_010620] - Get a combined list of removeable media without the 'nosuid' mount option set"
        shell: cat /etc/fstab | grep /mnt | grep -v nosuid
        become: true
        changed_when: false
        failed_when: missing_nosuid_removeable_media_results.rc not in [0, 1]
        register: missing_nosuid_removeable_media_results
        loop: '{{ nosuid_removeable_media_results.stdout_lines }}'
        when: nosuid_removeable_media_results.rc == 0

      - name: "[DISA_STIG_RHEL_08_010620] - Ensure that the mount option 'nosuid' is set on all removeable media"
        assert:
          that: item.rc == 0
          success_msg: Removeable media mounts has the mount option 'nosuid' set.
          fail_msg: |
            One or more removeable media mounts does not have the mount option 'nosuid' set.
            Please manually modify '/etc/fstab' to add the 'nosuid' mount option to all '/mnt' mount points.
        loop: '{{ missing_nosuid_removeable_media_results.results }}'
        when: nosuid_removeable_media_results.rc == 0

    when:
      - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      - DISA_STIG_RHEL_08_010620 | bool
    tags:
      - DISA-STIG-RHEL-08-010620

  - name: "[BLOCK] - [DISA_STIG_RHEL_08_010630] - Ensure that the mount option 'noexec' is set on all NFS mounts"
    block:

      - name: '[DISA_STIG_RHEL_08_010630] - Get a list of NFS mounts'
        shell: cat /etc/fstab | grep nfs
        become: true
        changed_when: false
        failed_when: noexec_nfs_results.rc not in [0, 1]
        register: noexec_nfs_results

      - name: "[DISA_STIG_RHEL_08_010630] - Get a combined list of NFS mounts without the 'noexec' mount option set"
        shell: cat /etc/fstab | grep nfs | grep -v noexec
        become: true
        changed_when: false
        failed_when: missing_noexec_nfs_results.rc not in [0, 1]
        register: missing_noexec_nfs_results
        loop: '{{ noexec_nfs_results.stdout_lines }}'
        when: noexec_nfs_results.rc == 0

      - name: "[DISA_STIG_RHEL_08_010630] - Ensure that the mount option 'noexec' is set on all NFS mounts"
        assert:
          that: item.rc == 0
          success_msg: NFS mount has the mount option 'noexec' set.
          fail_msg: |
            One or more NFS mounts does not have the mount option 'noexec' set.
            Please manually modify '/etc/fstab' to add the 'noexec' mount option to all NFS mount points.
        loop: '{{ missing_noexec_nfs_results.results }}'
        when: noexec_nfs_results.rc == 0

    when:
      - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      - DISA_STIG_RHEL_08_010630 | bool
    tags:
      - DISA-STIG-RHEL-08-010630

  - name: "[BLOCK] - [DISA_STIG_RHEL_08_010640] - Ensure that the mount option 'nodev' is set on all NFS mounts"
    block:

      - name: '[DISA_STIG_RHEL_08_010640] - Get a list of NFS mounts'
        shell: cat /etc/fstab | grep nfs
        become: true
        changed_when: false
        failed_when: nodev_nfs_results.rc not in [0, 1]
        register: nodev_nfs_results

      - name: "[DISA_STIG_RHEL_08_010640] - Get a combined list of NFS mounts without the 'nodev' mount option set"
        shell: cat /etc/fstab | grep nfs | grep -v nodev
        become: true
        changed_when: false
        failed_when: missing_nodev_nfs_results.rc not in [0, 1]
        register: missing_nodev_nfs_results
        loop: '{{ nodev_nfs_results.stdout_lines }}'
        when: nodev_nfs_results.rc == 0

      - name: "[DISA_STIG_RHEL_08_010640] - Ensure that the mount option 'nodev' is set on all NFS mounts"
        assert:
          that: item.rc == 0
          success_msg: NFS mount has the mount option 'nodev' set.
          fail_msg: |
            One or more NFS mounts does not have the mount option 'nodev' set.
            Please manually modify '/etc/fstab' to add the 'nodev' mount option to all NFS mount points.
        loop: '{{ missing_nodev_nfs_results.results }}'
        when: nodev_nfs_results.rc == 0

    when:
      - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      - DISA_STIG_RHEL_08_010640 | bool
    tags:
      - DISA-STIG-RHEL-08-010640

  - name: "[BLOCK] - [DISA_STIG_RHEL_08_010650] - Ensure that the mount option 'nosuid' is set on all NFS mounts"
    block:

      - name: '[DISA_STIG_RHEL_08_010650] - Get a list of NFS mounts'
        shell: cat /etc/fstab | grep nfs
        become: true
        changed_when: false
        failed_when: nosuid_nfs_results.rc not in [0, 1]
        register: nosuid_nfs_results

      - name: "[DISA_STIG_RHEL_08_010650] - Get a combined list of NFS mounts without the 'nosuid' mount option set"
        shell: cat /etc/fstab | grep nfs | grep -v nosuid
        become: true
        changed_when: false
        failed_when: missing_nosuid_nfs_results.rc not in [0, 1]
        register: missing_nosuid_nfs_results
        loop: '{{ nosuid_nfs_results.stdout_lines }}'
        when: nosuid_nfs_results.rc == 0

      - name: "[DISA_STIG_RHEL_08_010650] - Ensure that the mount option 'nosuid' is set on all NFS mounts"
        assert:
          that: item.rc == 0
          success_msg: NFS mount has the mount option 'nosuid' set.
          fail_msg: |
            One or more NFS mounts does not have the mount option 'nosuid' set.
            Please manually modify '/etc/fstab' to add the 'nosuid' mount option to all NFS mount points.
        loop: '{{ missing_nosuid_nfs_results.results }}'
        when: nosuid_nfs_results.rc == 0

    when:
      - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      - DISA_STIG_RHEL_08_010650 | bool
    tags:
      - DISA-STIG-RHEL-08-010650

  - name: '[BLOCK] - [DISA_STIG_RHEL_08_010660] - Ensure that there are no world writeable initialization files for each partition'
    block:

      - name: '[DISA_STIG_RHEL_08_010660] - Get a list of partitions'
        shell: cat /etc/fstab | grep -Ev '(^\s*#|^\s*$)' | awk '{ print $2 }' | grep '^/'
        become: true
        changed_when: false
        register: world_writeable_partitions_list_results

      - name: '[DISA_STIG_RHEL_08_010660] - Get get a list of world writeable initialization files for each partition'
        command: find {{ item }} -xdev -type f -perm /0002 -and \( -name '.bash_profile' -or -name '.bashrc' -or -name '.bash_login' -or -name '.profile'
          -or -name '.bash_history' -or -name '.bash_logout' -or -name 'profile' -or -name 'bashrc' -or -name 'bash.bashrc' \)
        become: true
        changed_when: false
        loop: '{{ world_writeable_partitions_list_results.stdout_lines }}'
        register: world_writeable_initialization_files_results

      - name: '[DISA_STIG_RHEL_08_010660] - Combine the list of world writeable initialization files for each partition'
        set_fact:
          world_writeable_initialization_files: '{{ world_writeable_initialization_files | default([], true) + item }}'
        loop: "{{ world_writeable_initialization_files_results.results | selectattr('stdout_lines', 'defined') | map(attribute='stdout_lines') | list }}"

      - name: '[DISA_STIG_RHEL_08_010660] - Ensure that there are no world writeable initialization files for each partition'
        file:
          state: file
          path: '{{ item }}'
          mode: o-w
        become: true
        loop: '{{ world_writeable_initialization_files }}'
        when: world_writeable_initialization_files | length > 0

    when:
      - DISA_STIG_RHEL_08_010660 | bool
    tags:
      - DISA-STIG-RHEL-08-010660

  - name: '[DISA_STIG_RHEL_08_010670] - Stop and disable the kdump service'
    systemd:
      state: stopped
      name: kdump.service
      enabled: false
    become: true
    when:
      - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      - DISA_STIG_RHEL_08_010670 | bool
    tags:
      - DISA-STIG-RHEL-08-010670

  - name: "[DISA_STIG_RHEL_08_010671] - Ensure that the kernel parameter 'kernel.core_pattern' is set to '|/bin/false'"
    sysctl:
      state: present
      name: kernel.core_pattern
      value: '|/bin/false'
      reload: true
    become: true
    when:
      - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      - DISA_STIG_RHEL_08_010671 | bool
    tags:
      - DISA-STIG-RHEL-08-010671

  - name: '[DISA_STIG_RHEL_08_010672] - Stop and disable the kdump service'
    systemd:
      state: stopped
      name: systemd-coredump.socket
      enabled: false
      masked: true
    become: true
    when:
      - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      - DISA_STIG_RHEL_08_010672 | bool
    tags:
      - DISA-STIG-RHEL-08-010672

  - name: '[DISA_STIG_RHEL_08_010673] - Ensure that core dumps are disabled for all users'
    lineinfile:
      state: present
      path: /etc/security/limits.d/disa-stig.conf
      regexp: ^[^#].*core
      line: '* hard core 0'
      create: true
    become: true
    when:
      - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      - DISA_STIG_RHEL_08_010673 | bool
    tags:
      - DISA-STIG-RHEL-08-010673

  - name: '[DISA_STIG_RHEL_08_010674] - Ensure that storing core dumps are disabled for all users'
    lineinfile:
      state: present
      path: /etc/systemd/coredump.conf
      regexp: ^Storage\s*=
      line: Storage=none
      create: true
    become: true
    when:
      - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      - DISA_STIG_RHEL_08_010674 | bool
    tags:
      - DISA-STIG-RHEL-08-010674

  - name: '[DISA_STIG_RHEL_08_010675] - Ensure that core dumps backtraces are disabled for all users'
    lineinfile:
      state: present
      path: /etc/systemd/coredump.conf
      regexp: ^ProcessSizeMax\s*=
      line: ProcessSizeMax=0
      create: true
    become: true
    when:
      - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      - DISA_STIG_RHEL_08_010675 | bool
    tags:
      - DISA-STIG-RHEL-08-010675

# EXEMPTION: RHEL-08-010680 - SV-230316r627750_rule

# TODO: RHEL-08-010690 - SV-230317r627750_rule

  - name: '[BLOCK] - [DISA_STIG_RHEL_08_010700] - Ensure that all world writeable directories are owned by a system account'
    block:

      - name: '[DISA_STIG_RHEL_08_010700] - Get a list of partitions'
        shell: cat /etc/fstab | grep -Ev '(^\s*#|^\s*$)' | awk '{ print $2 }' | grep '^/'
        become: true
        changed_when: false
        register: world_writeable_directories_owner_partitions_list_results

      - name: '[DISA_STIG_RHEL_08_010700] - Get get a list of world writeable directories not owned by a system account for each partition'
        command: find {{ item }} -xdev -type d -perm -0002 -uid +999 -print
        become: true
        changed_when: false
        loop: '{{ world_writeable_directories_owner_partitions_list_results.stdout_lines }}'
        register: world_writeable_directories_owner_results

      - name: '[DISA_STIG_RHEL_08_010700] - Combine the list of world writeable directories not owned by a system accounts for each partition'
        set_fact:
          world_writeable_directories_owner: '{{ world_writeable_directories_owner | default([], true) + item }}'
        loop: "{{ world_writeable_directories_owner_results.results | selectattr('stdout_lines', 'defined') | map(attribute='stdout_lines') | list }}"

      - name: '[DISA_STIG_RHEL_08_010700] - Ensure that all world writeable directories are owned by a system account for each partition'
        file:
          state: directory
          path: '{{ item }}'
          owner: root
        become: true
        loop: '{{ world_writeable_directories_owner }}'
        when: world_writeable_directories_owner | length > 0

    when:
      - DISA_STIG_RHEL_08_010700 | bool
    tags:
      - DISA-STIG-RHEL-08-010700

  - name: '[BLOCK] - [DISA_STIG_RHEL_08_010710] - Ensure that all world writeable directories are group owned by a system account'
    block:

      - name: '[DISA_STIG_RHEL_08_010710] - Get a list of partitions'
        shell: cat /etc/fstab | grep -Ev '(^\s*#|^\s*$)' | awk '{ print $2 }' | grep '^/'
        become: true
        changed_when: false
        register: world_writeable_directories_group_partitions_list_results

      - name: '[DISA_STIG_RHEL_08_010710] - Get get a list of world writeable directories not group owned by a system account for each partition'
        command: find {{ item }} -xdev -type d -perm -0002 -gid +999 -print
        become: true
        changed_when: false
        loop: '{{ world_writeable_directories_group_partitions_list_results.stdout_lines }}'
        register: world_writeable_directories_group_results

      - name: '[DISA_STIG_RHEL_08_010710] - Combine the list of world writeable directories not group owned by a system accounts for each partition'
        set_fact:
          world_writeable_directories_group: '{{ world_writeable_directories_group | default([], true) + item }}'
        loop: "{{ world_writeable_directories_group_results.results | selectattr('stdout_lines', 'defined') | map(attribute='stdout_lines') | list }}"

      - name: '[DISA_STIG_RHEL_08_010710] - Ensure that all world writeable directories are group owned by a system account for each partition'
        file:
          state: directory
          path: '{{ item }}'
          group: root
        become: true
        loop: '{{ world_writeable_directories_group }}'
        when: world_writeable_directories_group | length > 0

    when:
      - DISA_STIG_RHEL_08_010710 | bool
    tags:
      - DISA-STIG-RHEL-08-010710

# TODO: RHEL-08-010720 - SV-230320r627750_rule

# TODO: RHEL-08-010730 - SV-230321r627750_rule

  - name: '[Miscellaneous] - Flush all handlers'
    meta: flush_handlers

  - name: "[BLOCK] - [DISA_STIG_RHEL_08_010731] - Ensure that interactive user initlization files have file permissions of '0750' or less permissive"
    block:

      - name: '[DISA_STIG_RHEL_08_010731] - Get the list of interactive user home directories'
        shell: "awk -F: '($3>=1000)&&($7 !~ /nologin/){print $6}' /etc/passwd"
        become: true
        changed_when: false
        register: interactive_user_initialization_files_user_list

      - name: "[DISA_STIG_RHEL_08_010731] - Check whether the interactive user initlization files have file permissions of '0750' or less permissive"
        command: find {{ item }} -type f -perm -0027 -path '*\.*'
        become: true
        changed_when: false
        loop: '{{ interactive_user_initialization_files_user_list.stdout_lines }}'
        register: interactive_user_initialization_files_list

      - name: "[DISA_STIG_RHEL_08_010731] - Ensure that interactive user initlization files have file permissions of '0750' or less permissive"
        assert:
          that: interactive_user_initialization_files_list.results | selectattr('stdout_lines', 'defined') | map(attribute='stdout_lines') | flatten | length
            == 0
          success_msg: All interactive user initialization files have permissions of '0750' or less permissive.
          fail_msg: |
            One or more interactive user initialization files have permissions more permissive than '0750':
            {{ interactive_user_initialization_files_list.results | selectattr('stdout_lines', 'defined') | map(attribute='stdout_lines') | flatten }}

    when:
      - DISA_STIG_RHEL_08_010731 | bool
    tags:
      - DISA-STIG-RHEL-08-010731

# TODO: RHEL-08-010740 - SV-230322r743963_rule

# TODO: RHEL-08-010741 - SV-244532r743845_rule

# TODO: RHEL-08-010750 - SV-230323r627750_rule

  - name: '[DISA_STIG_RHEL_08_010760] - Ensure all interactive users are assigned a home directory upon creation'
    lineinfile:
      state: present
      path: /etc/login.defs
      regexp: ^CREATE_HOME
      line: CREATE_HOME yes
      create: true
    when:
      - DISA_STIG_RHEL_08_010760 | bool
    tags:
      - DISA-STIG-RHEL-08-010760

  - name: "[BLOCK] - [DISA_STIG_RHEL_08_010770] - Ensure that all user initialization files have permissions of '0740' or less permissive"
    block:

      - name: "[DISA_STIG_RHEL_08_010770] - Get get a list of user initialization files that are more permissive than '0740'"
        command: find /home -xdev -type f -perm /0037 -and \( -name '.bash_profile' -or -name '.bashrc' -or -name '.bash_login' -or -name '.profile' -or
          -name '.bash_history' -or -name '.bash_logout' -or -name 'profile' -or -name 'bashrc' -or -name 'bash.bashrc' \)
        become: true
        changed_when: false
        register: user_initialization_file_permissive_results

      - name: "[DISA_STIG_RHEL_08_010770] - Ensure that all user initialization files have permissions of '0740' or less permissive"
        file:
          state: file
          path: '{{ item }}'
          mode: g-wx,o-rwx
        become: true
        loop: '{{ user_initialization_file_permissive_results.stdout_lines }}'

    when:
      - DISA_STIG_RHEL_08_010770 | bool
    tags:
      - DISA-STIG-RHEL-08-010770

  - name: '[BLOCK] - [DISA_STIG_RHEL_08_010780] - Ensure that all files have a valid owner'
    block:

      - name: '[DISA_STIG_RHEL_08_010780] - Get the list of files with no owner'
        command: find / -fstype xfs -path /proc -prune -path /dev -prune -nouser
        become: true
        changed_when: false
        register: files_without_owner_results

      - name: '[DISA_STIG_RHEL_08_010780] - Ensure that all files have a valid owner'
        file:
          state: file
          path: '{{ item }}'
          owner: root
        become: true
        loop: '{{ files_without_owner_results.stdout_lines }}'

    when:
      - DISA_STIG_RHEL_08_010780 | bool
    tags:
      - DISA-STIG-RHEL-08-010780

  - name: '[BLOCK] - [DISA_STIG_RHEL_08_010790] - Ensure that all files have a valid group'
    block:

      - name: '[DISA_STIG_RHEL_08_010790] - Get the list of files with no group'
        command: find / -fstype xfs -path /proc -prune -path /dev -prune -nogroup
        become: true
        changed_when: false
        register: files_without_group_results

      - name: '[DISA_STIG_RHEL_08_010790] - Ensure that all files have a valid group'
        file:
          state: file
          path: '{{ item }}'
          group: root
        become: true
        loop: '{{ files_without_group_results.stdout_lines }}'

    when:
      - DISA_STIG_RHEL_08_010790 | bool
    tags:
      - DISA-STIG-RHEL-08-010790

  - name: '[Miscellaneous] - Flush all handlers'
    meta: flush_handlers

  - name: '[BLOCK] - [DISA_STIG_RHEL_08_010800] - Ensure that user home directories are stored on a separate partition'
    block:

      - name: "[DISA_STIG_RHEL_08_010800] - Check whether '/home' has its own filesystem/partition in '/etc/fstab'"
        command: grep /home /etc/fstab
        become: true
        changed_when: false
        register: home_on_separate_partition_results

      - name: '[DISA_STIG_RHEL_08_010800] - Ensure that user home directories are stored on a separate partition'
        assert:
          that: home_on_separate_partition_results.rc == 0
          success_msg: The '/home' directory is on its own filesystem/partition.
          fail_msg: |
            The '/home' directory does not have its own filesystem/partition.
            Please manually correct this by migrating '/home' to its own filesystem/partition.

    when:
      - DISA_STIG_RHEL_08_010800 | bool
    tags:
      - DISA-STIG-RHEL-08-010800

  - name: '[DISA_STIG_RHEL_08_010820] - Disable GDM Automatic Login'
    ini_file:
      state: present
      path: /etc/gdm/custom.conf
      section: daemon
      option: AutomaticLoginEnable
      value: 'false'
      no_extra_spaces: true
      create: true
    when:
      - DISA_STIG_RHEL_08_010820 | bool
    tags:
      - DISA-STIG-RHEL-08-010820

  - name: '[DISA_STIG_RHEL_08_010830] - Configure SSHD to disable automatic or unattended logins'
    lineinfile:
      state: present
      path: /etc/ssh/sshd_config
      regexp: '^PermitUserEnvironment '
      line: PermitUserEnvironment no
      create: true
      validate: sshd -t -f %s
    become: true
    notify:
      - systemctl restart sshd.service
    when:
      - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      - DISA_STIG_RHEL_08_010830 | bool
    tags:
      - DISA-STIG-RHEL-08-010830

# EXEMPTION: RHEL-08-020000 - SV-230331r627750_rule

  - name: '[BLOCK] - [DISA_STIG_RHEL_08_020010-020023,020025-020026] - Configure pam_faillock.so module to lock an account after three unsuccessful login
      attempts'
    block:

      - name: "[DISA_STIG_RHEL_08_020010-020023,020025-020026] - Configure the 'auth required pam_faillock.so preauth' line"
        lineinfile:
          state: present
          path: /etc/authselect/custom/disa-stig/{{ item }}
          regexp: ^(auth\s+required\s+pam_faillock\.so\s+preauth\s+)
          line: \1dir=/var/log/faillock silent audit deny=3 even_deny_root fail_interval=900 unlock_time=0
          backrefs: true
          create: false
        become: true
        loop:
          - system-auth
          - password-auth
        notify:
          - systemctl restart sssd.service

      - name: "[DISA_STIG_RHEL_08_020010-020023,020025-020026] - Configure the 'auth required pam_faillock.so authfail' line"
        lineinfile:
          state: present
          path: /etc/authselect/custom/disa-stig/{{ item }}
          regexp: ^(auth\s+required\s+pam_faillock\.so\s+authfail\s+)
          line: \1dir=/var/log/faillock unlock_time=0
          backrefs: true
          create: false
        become: true
        loop:
          - system-auth
          - password-auth
        notify:
          - systemctl restart sssd.service

      - name: "[DISA_STIG_RHEL_08_020010-020023,020025-020026] - Configure the 'account required pam_faillock.so' line"
        lineinfile:
          state: present
          path: /etc/authselect/custom/disa-stig/{{ item }}
          regexp: ^(account\s+required\s+pam_faillock\.so)
          line: \1
          backrefs: true
          create: false
        become: true
        loop:
          - system-auth
          - password-auth
        notify:
          - systemctl restart sssd.service

    when: >-
      DISA_STIG_RHEL_08_020010 | bool or
      DISA_STIG_RHEL_08_020012 | bool or
      DISA_STIG_RHEL_08_020014 | bool or
      DISA_STIG_RHEL_08_020016 | bool or
      DISA_STIG_RHEL_08_020018 | bool or
      DISA_STIG_RHEL_08_020020 | bool or
      DISA_STIG_RHEL_08_020022 | bool or
      DISA_STIG_RHEL_08_020025 | bool or
      DISA_STIG_RHEL_08_020026 | bool
    tags:
      - DISA-STIG-RHEL-08-020010
      - DISA-STIG-RHEL-08-020012
      - DISA-STIG-RHEL-08-020014
      - DISA-STIG-RHEL-08-020016
      - DISA-STIG-RHEL-08-020018
      - DISA-STIG-RHEL-08-020020
      - DISA-STIG-RHEL-08-020022
      - DISA-STIG-RHEL-08-020025
      - DISA-STIG-RHEL-08-020026

  - name: '[DISA_STIG_RHEL_08_020011-020023] - Ensure that accounts are locked after three unsuccessful login attempts'
    lineinfile:
      state: present
      path: /etc/security/faillock.conf
      regexp: '{{ item.regexp }}'
      line: '{{ item.line }}'
      create: true
    become: true
    loop:
      - regexp: ^deny ?=
        line: deny = 3
      - regexp: ^fail_interval ?=
        line: fail_interval = 900
      - regexp: ^unlock_time ?=
        line: unlock_time = 0
      - regexp: ^dir ?=
        line: dir = /var/log/faillock
      - regexp: ^silent
        line: silent
      - regexp: ^audit
        line: audit
      - regexp: ^even_deny_root
        line: even_deny_root
    when: >-
      DISA_STIG_RHEL_08_020011 | bool or
      DISA_STIG_RHEL_08_020013 | bool or
      DISA_STIG_RHEL_08_020015 | bool or
      DISA_STIG_RHEL_08_020017 | bool or
      DISA_STIG_RHEL_08_020019 | bool or
      DISA_STIG_RHEL_08_020021 | bool or
      DISA_STIG_RHEL_08_020023 | bool
    tags:
      - DISA-STIG-RHEL-08-020011
      - DISA-STIG-RHEL-08-020013
      - DISA-STIG-RHEL-08-020015
      - DISA-STIG-RHEL-08-020017
      - DISA-STIG-RHEL-08-020019
      - DISA-STIG-RHEL-08-020021
      - DISA-STIG-RHEL-08-020023

  - name: '[DISA_STIG_RHEL_08_020024] - Set the max number of concurrent sessions'
    lineinfile:
      state: present
      path: /etc/security/limits.conf
      regexp: ^(\*\s+hard\s+maxlogins\s*)
      line: '*                hard    maxlogins       {{ var_accounts_max_concurrent_login_sessions }}'
      create: true
    become: true
    when:
      - DISA_STIG_RHEL_08_020024 | bool
    tags:
      - DISA-STIG-RHEL-08-020024

  - name: '[DISA_STIG_RHEL_08_020030] - Enable user session lock'
    ini_file:
      state: present
      path: /etc/dconf/db/local.d/00-screensaver
      section: org/gnome/desktop/screensaver
      option: lock-enabled
      value: 'true'
      no_extra_spaces: true
      create: true
    become: true
    notify:
      - dconf update
    when:
      - DISA_STIG_RHEL_08_020030 | bool
    tags:
      - DISA-STIG-RHEL-08-020030

  - name: '[DISA_STIG_RHEL_08_020031] - Ensure that the session is locked once the screensaver is activated'
    ini_file:
      state: present
      path: /etc/dconf/db/local.d/00-screensaver
      section: org/gnome/desktop/screensaver
      option: lock-delay
      value: uint32 5
      no_extra_spaces: true
      create: true
    become: true
    notify:
      - dconf update
    when:
      - DISA_STIG_RHEL_08_020031 | bool
    tags:
      - DISA-STIG-RHEL-08-020031

  - name: '[DISA_STIG_RHEL_08_020032] - Ensure that the session is locked once the screensaver is activated'
    ini_file:
      state: present
      path: /etc/dconf/db/local.d/02-login-screen
      section: org/gnome/login-screen
      option: disable-user-list
      value: true
      no_extra_spaces: true
      create: true
    become: true
    notify:
      - dconf update
    when:
      - DISA_STIG_RHEL_08_020032 | bool
    tags:
      - DISA-STIG-RHEL-08-020032

  - name: "[DISA_STIG_RHEL_08_020039] - Ensure that the 'tmux' package is installed"
    package:
      state: present
      name: tmux
    become: true
    when:
      - DISA_STIG_RHEL_08_020039 | bool
    tags:
      - DISA-STIG-RHEL-08-020039

  - name: '[DISA_STIG_RHEL_08_020040] - Ensure that session locks are initiated until re-authenticated'
    lineinfile:
      state: present
      path: /etc/tmux.conf
      regexp: ^set -g lock-command
      line: set -g lock-command vlock
      create: true
    become: true
    when:
      - DISA_STIG_RHEL_08_020040 | bool
    tags:
      - DISA-STIG-RHEL-08-020040

  - name: '[DISA_STIG_RHEL_08_020041] - Ensure that session locks are initiated until re-authenticated'
    lineinfile:
      state: present
      path: /etc/bashrc
      line: '[ -n "$PS1" -a -z "$TMUX" ] && exec tmux'
      create: true
    become: true
    when:
      - DISA_STIG_RHEL_08_020041 | bool
    tags:
      - DISA-STIG-RHEL-08-020041

  - name: "[BLOCK] - [DISA_STIG_RHEL_08_020042] - Ensure that there are no instances of 'tmux' in the '/etc/shells' file"
    block:

      - name: "[DISA_STIG_RHEL_08_020042] - Check there are any instances of 'tmux' in the '/etc/shells' file"
        command: grep -i tmux /etc/shells
        become: true
        changed_when: false
        failed_when: etc_shells_tmux_results.rc not in [0, 1]
        register: etc_shells_tmux_results

      - name: "[DISA_STIG_RHEL_08_020042] - Ensure that there are no instances of 'tmux' in the '/etc/shells' file"
        lineinfile:
          state: absent
          path: /etc/shells
          line: '{{ item }}'
        become: true
        loop: '{{ etc_shells_tmux_results.stdout_lines }}'

    when:
      - DISA_STIG_RHEL_08_020042 | bool
    tags:
      - DISA-STIG-RHEL-08-020042

  - name: '[DISA_STIG_RHEL_08_020050] - Ensure that a session lock is initiated once the smartcard is removed'
    ini_file:
      state: present
      path: /etc/dconf/db/local.d/00-screensaver
      section: org/gnome/settings-daemon/peripherals/smartcard
      option: removal-action
      value: "'lock-screen'"
      no_extra_spaces: true
      create: true
    become: true
    notify:
      - dconf update
    when:
      - DISA_STIG_RHEL_08_020050 | bool
    tags:
      - DISA-STIG-RHEL-08-020050

  - name: '[DISA_STIG_RHEL_08_020060] - Ensure that graphical user sessions are locked after 15 minutes of innactivity'
    ini_file:
      state: present
      path: /etc/dconf/db/local.d/00-screensaver
      section: org/gnome/desktop/session
      option: idle-delay
      value: uint32 900
      no_extra_spaces: true
      create: true
    become: true
    notify:
      - dconf update
    when:
      - DISA_STIG_RHEL_08_020060 | bool
    tags:
      - DISA-STIG-RHEL-08-020060

  - name: '[DISA_STIG_RHEL_08_020070] - Ensure that command line user sessions are locked after 15 minutes of innactivity'
    lineinfile:
      state: present
      path: /etc/tmux.conf
      regexp: ^set -g lock-after-time
      line: set -g lock-after-time 900
      create: true
    become: true
    when:
      - DISA_STIG_RHEL_08_020070 | bool
    tags:
      - DISA-STIG-RHEL-08-020070

  - name: "[DISA_STIG_RHEL_08_020080] - Ensure that users cannot override the graphical user interface settings for 'lock-delay'"
    lineinfile:
      state: present
      path: /etc/dconf/db/local.d/locks/session
      line: /org/gnome/desktop/screensaver/lock-delay
      create: true
    become: true
    when:
      - DISA_STIG_RHEL_08_020080 | bool
    tags:
      - DISA-STIG-RHEL-08-020080

  - name: "[DISA_STIG_RHEL_08_020081] - Ensure that users cannot override the graphical user interface settings for 'idle-delay'"
    lineinfile:
      state: present
      path: /etc/dconf/db/local.d/locks/session
      line: /org/gnome/desktop/session/idle-delay
      create: true
    become: true
    when:
      - DISA_STIG_RHEL_08_020081 | bool
    tags:
      - DISA-STIG-RHEL-08-020081

  - name: "[DISA_STIG_RHEL_08_020082] - Ensure that users cannot override the graphical user interface settings for 'lock-enabled'"
    lineinfile:
      state: present
      path: /etc/dconf/db/local.d/locks/session
      line: /org/gnome/desktop/screensaver/lock-enabled
      create: true
    become: true
    when:
      - DISA_STIG_RHEL_08_020082 | bool
    tags:
      - DISA-STIG-RHEL-08-020082

  - name: '[DISA_STIG_RHEL_08_020100] - Ensure that the pamd password complexity module is enabled'
    lineinfile:
      state: present
      path: /etc/authselect/custom/disa-stig/{{ item }}
      regexp: ^password\s+required\s+pam_pwquality\.so
      line: password   required                                     pam_pwquality.so retry=3
      create: false
    become: true
    loop:
      - system-auth
      - password-auth
    when:
      - DISA_STIG_RHEL_08_020100 | bool
    tags:
      - DISA-STIG-RHEL-08-020100

  - name: '[DISA_STIG_RHEL_08_020110] - Ensure that the password complexity includes at least one upper-case character'
    lineinfile:
      state: present
      path: /etc/security/pwquality.conf
      regexp: ^ucredit ?=
      line: ucredit = -1
      create: true
    become: true
    when:
      - DISA_STIG_RHEL_08_020110 | bool
    tags:
      - DISA-STIG-RHEL-08-020110

  - name: '[DISA_STIG_RHEL_08_020120] - Ensure that the password complexity includes at least one lower-case character'
    lineinfile:
      state: present
      path: /etc/security/pwquality.conf
      regexp: ^lcredit ?=
      line: lcredit = -1
      create: true
    become: true
    when:
      - DISA_STIG_RHEL_08_020120 | bool
    tags:
      - DISA-STIG-RHEL-08-020120

  - name: '[DISA_STIG_RHEL_08_020130] - Ensure that the password complexity includes at least one numeric character'
    lineinfile:
      state: present
      path: /etc/security/pwquality.conf
      regexp: ^dcredit ?=
      line: dcredit = -1
      create: true
    become: true
    when:
      - DISA_STIG_RHEL_08_020130 | bool
    tags:
      - DISA-STIG-RHEL-08-020130

  - name: '[DISA_STIG_RHEL_08_020140] - Ensure that the password complexity enforces a max repeating same four characters'
    lineinfile:
      state: present
      path: /etc/security/pwquality.conf
      regexp: ^maxclassrepeat ?=
      line: maxclassrepeat = 4
      create: true
    become: true
    when:
      - DISA_STIG_RHEL_08_020140 | bool
    tags:
      - DISA-STIG-RHEL-08-020140

  - name: '[DISA_STIG_RHEL_08_020150] - Ensure that the password complexity enforces a max repeating set of three characters'
    lineinfile:
      state: present
      path: /etc/security/pwquality.conf
      regexp: ^maxrepeat ?=
      line: maxrepeat = 3
      create: true
    become: true
    when:
      - DISA_STIG_RHEL_08_020150 | bool
    tags:
      - DISA-STIG-RHEL-08-020150

  - name: '[DISA_STIG_RHEL_08_020160] - Ensure that the password complexity enforces at least four character classes'
    lineinfile:
      state: present
      path: /etc/security/pwquality.conf
      regexp: ^minclass ?=
      line: minclass = 4
      create: true
    become: true
    when:
      - DISA_STIG_RHEL_08_020160 | bool
    tags:
      - DISA-STIG-RHEL-08-020160

  - name: '[DISA_STIG_RHEL_08_020170] - Ensure that the password complexity enforces at least 8 changed characters between password changes'
    lineinfile:
      state: present
      path: /etc/security/pwquality.conf
      regexp: ^difok ?=
      line: difok = 8
      create: true
    become: true
    when:
      - DISA_STIG_RHEL_08_020170 | bool
    tags:
      - DISA-STIG-RHEL-08-020170

  - name: '[BLOCK] - [DISA_STIG_RHEL_08_020180] - Ensure that all user password expire minimum ages are at least 1'
    block:

      - name: '[DISA_STIG_RHEL_08_020180] - Get a list of users with password expire minimum ages less than 1'
        shell: "awk -F: '($4<1)&&($4!=\"\"){print $1}' /etc/shadow"
        become: true
        changed_when: false
        failed_when: user_account_password_expire_min_results.rc != 0
        register: user_account_password_expire_min_results

    # NOTE: The 'user' Ansible module has the 'password_expire_min' parameter which satisfies this STIG, however it was only added
    #       in Ansible version 2.11 and after. To ensure Ansible 2.9 compatibility, the 'command' module is used here instead.

      - name: '[DISA_STIG_RHEL_08_020180] - Ensure that all user password expire minimum ages are at least 1'
        command: chage -m {{ var_password_expire_min_days }} {{ item }}
        become: true
        loop: '{{ user_account_password_expire_min_results.stdout_lines | intersect(non_system_user_accounts_results.stdout_lines) }}'
        when: user_account_password_expire_min_results.stdout_lines | length > 0

    when:
      - DISA_STIG_RHEL_08_020180 | bool
    tags:
      - DISA-STIG-RHEL-08-020180

  - name: "[DISA_STIG_RHEL_08_020190] - Ensure that the minimum password age is '1' in '/etc/login.defs'"
    lineinfile:
      state: present
      path: /etc/login.defs
      regexp: ^PASS_MIN_DAYS
      line: PASS_MIN_DAYS {{ var_password_expire_min_days }}
      create: true
    become: true
    when:
      - DISA_STIG_RHEL_08_020190 | bool
    tags:
      - DISA-STIG-RHEL-08-020190

  - name: "[DISA_STIG_RHEL_08_020200] - Ensure that the minimum password age is '1' in '/etc/login.defs'"
    lineinfile:
      state: present
      path: /etc/login.defs
      regexp: ^PASS_MAX_DAYS
      line: PASS_MAX_DAYS {{ var_password_expire_max_days }}
      create: true
    become: true
    when:
      - DISA_STIG_RHEL_08_020200 | bool
    tags:
      - DISA-STIG-RHEL-08-020200

  - name: '[BLOCK] - [DISA_STIG_RHEL_08_020210] - Ensure that all user password expire maximum ages are at least 1 and at most {{ var_password_expire_max_days
      }}'
    block:

      - name: '[DISA_STIG_RHEL_08_020210] - Get a list of users with password expire maximum ages less than 1 or greater than {{ var_password_expire_max_days
          }}'
        shell: "awk -F: '(($5<=0)||($5>60))&&($5!=\"\"){print $1}' /etc/shadow"
        become: true
        changed_when: false
        failed_when: user_account_password_expire_max_results.rc != 0
        register: user_account_password_expire_max_results

    # NOTE: The 'user' Ansible module has the 'password_expire_max' parameter which satisfies this STIG, however it was only added
    #       in Ansible version 2.11 and after. To ensure Ansible 2.9 compatibility, the 'command' module is used here instead.

      - name: '[DISA_STIG_RHEL_08_020210] - Ensure that all user password expire maximum ages are at least 1 and at most {{ var_password_expire_max_days
          }}'
        command: chage -M {{ var_password_expire_max_days }} {{ item }}
        become: true
        loop: '{{ user_account_password_expire_max_results.stdout_lines | intersect(non_system_user_accounts_results.stdout_lines) }}'
        when: user_account_password_expire_max_results.stdout_lines | length > 0

    when:
      - DISA_STIG_RHEL_08_020210 | bool
    tags:
      - DISA-STIG-RHEL-08-020210

  - name: '[DISA_STIG_RHEL_08_020220] - Ensure that the pamd prohibits reusing the same 5 passwords'
    lineinfile:
      state: present
      path: /etc/authselect/custom/disa-stig/{{ item }}
      regexp: ^password\s+required\s+pam_pwhistory\.so
      line: password   required                                     pam_pwhistory.so use_authtok remember=5 retry=3
      create: false
    become: true
    loop:
      - system-auth
      - password-auth
    when:
      - DISA_STIG_RHEL_08_020220 | bool
    tags:
      - DISA-STIG-RHEL-08-020220

  - name: '[DISA_STIG_RHEL_08_020230] - Ensure that the password complexity enforces at least 15 characters'
    lineinfile:
      state: present
      path: /etc/security/pwquality.conf
      regexp: ^minlen ?=
      line: minlen = 15
      create: true
    become: true
    when:
      - DISA_STIG_RHEL_08_020230 | bool
    tags:
      - DISA-STIG-RHEL-08-020230

  - name: '[DISA_STIG_RHEL_08_020231] - Ensure that passwords for new users have at least 15 characters'
    lineinfile:
      state: present
      path: /etc/login.defs
      regexp: ^PASS_MIN_LEN
      line: PASS_MIN_LEN 15
      create: true
    become: true
    when:
      - DISA_STIG_RHEL_08_020231 | bool
    tags:
      - DISA-STIG-RHEL-08-020231

  - name: '[Miscellaneous] - Flush all handlers'
    meta: flush_handlers

  - name: '[BLOCK] - [DISA_STIG_RHEL_08_020240] - Ensure that there are no users with duplicate UIDs'
    block:

      - name: '[DISA_STIG_RHEL_08_020240] - Get a list of users with duplicate UIDs'
        shell: awk -F ":" 'list[$3]++{print $1, $3}' /etc/passwd
        become: true
        changed_when: false
        register: user_duplicate_uid_results

      - name: '[DISA_STIG_RHEL_08_020240] - Ensure that there are no users with duplicate UIDs'
        assert:
          that: user_duplicate_uid_results.rc == 0
          success_msg: All interactive user accounts have unique UIDs
          fail_msg: |
            One or more users has a duplicate UID:
            {{ user_duplicate_uid_results.stdout }}

    when:
      - DISA_STIG_RHEL_08_020240 | bool
    tags:
      - DISA-STIG-RHEL-08-020240

# EXEMPTION: RHEL-08-020250 - SV-230372r627750_rule

  - name: '[DISA_STIG_RHEL_08_020260] - Ensure that passwords for new users have at least 15 characters'
    lineinfile:
      state: present
      path: /etc/default/useradd
      regexp: ^INACTIVE ?=
      line: INACTIVE=35
      create: true
    become: true
    when:
      - DISA_STIG_RHEL_08_020260 | bool
    tags:
      - DISA-STIG-RHEL-08-020260

# EXEMPTION: RHEL-08-020270 - SV-230374r627750_rule

  - name: '[DISA_STIG_RHEL_08_020280] - Ensure that the password complexity enforces at least 15 characters'
    lineinfile:
      state: present
      path: /etc/security/pwquality.conf
      regexp: ^ocredit ?=
      line: ocredit = -1
      create: true
    become: true
    when:
      - DISA_STIG_RHEL_08_020280 | bool
    tags:
      - DISA-STIG-RHEL-08-020280

  - name: '[DISA_STIG_RHEL_08_020290] - Ensure that cached authentications are prohibited after one day'
    ini_file:
      state: present
      path: /etc/sssd/sssd.conf
      section: pam
      option: offline_credentials_expiration
      value: '1'
      create: true
      owner: root
      group: root
      mode: '0600'
    become: true
    notify:
      - systemctl restart sssd.service
    when:
      - DISA_STIG_RHEL_08_020290 | bool
    tags:
      - DISA-STIG-RHEL-08-020290

  - name: '[DISA_STIG_RHEL_08_020300] - Ensure that dictionary words are not allowed for passwords'
    lineinfile:
      state: present
      path: /etc/security/pwquality.conf
      regexp: ^dictcheck ?=
      line: dictcheck = 1
      create: true
    become: true
    when:
      - DISA_STIG_RHEL_08_020300 | bool
    tags:
      - DISA-STIG-RHEL-08-020300

  - name: '[DISA_STIG_RHEL_08_020310] - Ensure that there is a delay of at least four seconds between logon prompts'
    lineinfile:
      state: present
      path: /etc/login.defs
      regexp: ^FAIL_DELAY
      line: FAIL_DELAY 4
      create: true
    become: true
    when:
      - DISA_STIG_RHEL_08_020310 | bool
    tags:
      - DISA-STIG-RHEL-08-020310

# EXEMPTION: RHEL-08-020320 - SV-230379r627750_rule

  - name: '[DISA_STIG_RHEL_08_020330] - Ensure that accounts with blank or null passwords are not permitted'
    lineinfile:
      state: present
      path: /etc/ssh/sshd_config
      regexp: '^PermitEmptyPasswords '
      line: PermitEmptyPasswords no
      create: true
      validate: sshd -t -f %s
    become: true
    notify:
      - systemctl restart sshd.service
    when:
      - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      - DISA_STIG_RHEL_08_020330 | bool
    tags:
      - DISA-STIG-RHEL-08-020330

  - name: '[DISA_STIG_RHEL_08_020331] - Ensure pamd prevents accounts with null or blank passwords from logging in'
    replace:
      path: /etc/authselect/custom/disa-stig/system-auth
      regexp: ^(.*)nullok (.*)
      replace: \1\2
    become: true
    when:
      - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      - DISA_STIG_RHEL_08_020331 | bool
    tags:
      - DISA-STIG-RHEL-08-020331

  - name: '[DISA_STIG_RHEL_08_020332] - Ensure pamd prevents accounts with null or blank passwords from logging in'
    replace:
      path: /etc/authselect/custom/disa-stig/password-auth
      regexp: ^(.*)nullok (.*)
      replace: \1\2
    become: true
    when:
      - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      - DISA_STIG_RHEL_08_020332 | bool
    tags:
      - DISA-STIG-RHEL-08-020332

  - name: '[DISA_STIG_RHEL_08_020340] - Ensure that the pamd prohibits reusing the same 5 passwords'
    lineinfile:
      state: present
      path: /etc/authselect/custom/disa-stig/postlogin
      regexp: ^session\s+required\s+pam_lastlog\.so
      line: session     required                                     pam_lastlog.so showfailed
      insertbefore: BOF
      create: false
    become: true
    when:
      - DISA_STIG_RHEL_08_020340 | bool
    tags:
      - DISA-STIG-RHEL-08-020340

  - name: '[DISA_STIG_RHEL_08_020350] - Ensure that the date and time of the last successful account logon is displayed upon an SSH logon'
    lineinfile:
      state: present
      path: /etc/ssh/sshd_config
      regexp: '^PrintLastLog '
      line: PrintLastLog yes
      create: true
      validate: sshd -t -f %s
    become: true
    notify:
      - systemctl restart sshd.service
    when:
      - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      - DISA_STIG_RHEL_08_020350 | bool
    tags:
      - DISA-STIG-RHEL-08-020350

  - name: '[DISA_STIG_RHEL_08_020351] - Ensure that users have default permissions set'
    lineinfile:
      state: present
      path: /etc/login.defs
      regexp: ^UMASK
      line: UMASK 077
      create: true
    become: true
    when:
      - DISA_STIG_RHEL_08_020351 | bool
    tags:
      - DISA-STIG-RHEL-08-020351

# TODO: RHEL-08-020352 - SV-230384r627750_rule

# TODO: RHEL-08-020353 - SV-230385r627750_rule

  - name: '[DISA_STIG_RHEL_08_030000] - Ensure that auditd has the appropriate rules'
    lineinfile:
      state: present
      path: /etc/audit/rules.d/audit.rules
      line: '{{ item }}'
      create: true
    become: true
    loop:
      - -a always,exit -F arch=b32 -S execve -C uid!=euid -F euid=0 -k execpriv
      - -a always,exit -F arch=b64 -S execve -C uid!=euid -F euid=0 -k execpriv
      - -a always,exit -F arch=b32 -S execve -C gid!=egid -F egid=0 -k execpriv
      - -a always,exit -F arch=b64 -S execve -C gid!=egid -F egid=0 -k execpriv
    notify:
      - service auditd restart
    when:
      - DISA_STIG_RHEL_08_030000 | bool
    tags:
      - DISA-STIG-RHEL-08-030000

  - name: '[DISA_STIG_RHEL_08_030010] - Ensure that cron is being logged'
    lineinfile:
      state: present
      path: /etc/rsyslog.conf
      regexp: ^cron\.\*\s+/var/log/cron$
      line: cron.*                                                  /var/log/cron
      create: true
    become: true
    notify:
      - systemctl restart rsyslog.service
    when:
      - DISA_STIG_RHEL_08_030010 | bool
    tags:
      - DISA-STIG-RHEL-08-030010

  - name: '[DISA_STIG_RHEL_08_030020] - Ensure that the root user is the action mail account'
    lineinfile:
      state: present
      path: /etc/audit/auditd.conf
      regexp: ^action_mail_acct ?=
      line: action_mail_acct = root
      create: true
    become: true
    notify:
      - service auditd restart
    when:
      - DISA_STIG_RHEL_08_030020 | bool
    tags:
      - DISA-STIG-RHEL-08-030020

  - name: '[DISA_STIG_RHEL_08_030030] - Ensure that mail aliases are configured for audit logging'
    lineinfile:
      state: present
      path: /etc/aliases
      regexp: '^postmaster:'
      line: "postmaster:\troot"
      create: true
    become: true
    when:
      - DISA_STIG_RHEL_08_030030 | bool
    tags:
      - DISA-STIG-RHEL-08-030030

  - name: '[DISA_STIG_RHEL_08_030040] - Ensure that the appropriate action is taken when an audit processing failure occurs due to the disk'
    lineinfile:
      state: present
      path: /etc/audit/auditd.conf
      regexp: ^disk_error_action ?=
      line: disk_error_action = SYSLOG
      create: true
    become: true
    notify:
      - service auditd restart
    when:
      - DISA_STIG_RHEL_08_030040 | bool
    tags:
      - DISA-STIG-RHEL-08-030040

  - name: '[DISA_STIG_RHEL_08_030050] - Ensure that the appropriate action is taken when the log file reaches its max size'
    lineinfile:
      state: present
      path: /etc/audit/auditd.conf
      regexp: ^max_log_file_action ?=
      line: max_log_file_action = rotate
      create: true
    become: true
    notify:
      - service auditd restart
    when:
      - DISA_STIG_RHEL_08_030050 | bool
    tags:
      - DISA-STIG-RHEL-08-030050

  - name: '[DISA_STIG_RHEL_08_030060] - Ensure that the appropriate action is taken when the auditd storage volume is full'
    lineinfile:
      state: present
      path: /etc/audit/auditd.conf
      regexp: ^disk_full_action ?=
      line: disk_full_action = syslog
      create: true
    become: true
    notify:
      - service auditd restart
    when:
      - DISA_STIG_RHEL_08_030060 | bool
    tags:
      - DISA-STIG-RHEL-08-030060

  - name: '[DISA_STIG_RHEL_08_030061] - Ensure that local events are audited'
    lineinfile:
      state: present
      path: /etc/audit/auditd.conf
      regexp: ^local_events ?=
      line: local_events = yes
      create: true
    become: true
    notify:
      - service auditd restart
    when:
      - DISA_STIG_RHEL_08_030061 | bool
    tags:
      - DISA-STIG-RHEL-08-030061

  - name: '[DISA_STIG_RHEL_08_030062] - Ensure that all off-loaded audit logs are labeled'
    lineinfile:
      state: present
      path: /etc/audit/auditd.conf
      regexp: ^name_format ?=
      line: name_format = hostname
      create: true
    become: true
    notify:
      - service auditd restart
    when:
      - DISA_STIG_RHEL_08_030062 | bool
    tags:
      - DISA-STIG-RHEL-08-030062

  - name: '[DISA_STIG_RHEL_08_030063] - Ensure that audit information is resolved before writing to disk'
    lineinfile:
      state: present
      path: /etc/audit/auditd.conf
      regexp: ^log_format ?=
      line: log_format = enriched
      create: true
    become: true
    notify:
      - service auditd restart
    when:
      - DISA_STIG_RHEL_08_030063 | bool
    tags:
      - DISA-STIG-RHEL-08-030063

  - name: '[BLOCK] - [DISA_STIG_RHEL_08_030070] - Ensure that the auditd log has proper permissions and group'
    block:

      - name: '[DISA_STIG_RHEL_08_030070] - Ensure that the auditd log has proper permissions'
        file:
          state: file
          path: /var/log/audit/audit.log
          mode: '0600'
        become: true

      - name: '[DISA_STIG_RHEL_08_030070] - Ensure that auditd log file has the correct group'
        lineinfile:
          state: present
          path: /etc/audit/auditd.conf
          regexp: ^log_group ?=
          line: log_group = root
          create: true
        become: true
        notify:
          - service auditd restart

    when:
      - DISA_STIG_RHEL_08_030070 | bool
    tags:
      - DISA-STIG-RHEL-08-030070

  - name: '[DISA_STIG_RHEL_08_030080] - Ensure that the auditd log owner is root'
    file:
      state: file
      path: /var/log/audit/audit.log
      owner: root
    become: true
    when:
      - DISA_STIG_RHEL_08_030080 | bool
    tags:
      - DISA-STIG-RHEL-08-030080

  - name: '[DISA_STIG_RHEL_08_030090] - Ensure that the auditd log group owner is root'
    file:
      state: file
      path: /var/log/audit/audit.log
      group: root
    become: true
    when:
      - DISA_STIG_RHEL_08_030090 | bool
    tags:
      - DISA-STIG-RHEL-08-030090

  - name: '[DISA_STIG_RHEL_08_030100] - Ensure that the auditd log directory owner is root'
    file:
      state: directory
      path: /var/log/audit
      owner: root
    become: true
    when:
      - DISA_STIG_RHEL_08_030100 | bool
    tags:
      - DISA-STIG-RHEL-08-030100

  - name: '[DISA_STIG_RHEL_08_030110] - Ensure that the auditd log directory group owner is root'
    file:
      state: directory
      path: /var/log/audit
      group: root
    become: true
    when:
      - DISA_STIG_RHEL_08_030110 | bool
    tags:
      - DISA-STIG-RHEL-08-030110

  - name: '[DISA_STIG_RHEL_08_030120] - Ensure that the auditd log directory has the proper permissions'
    file:
      state: directory
      path: /var/log/audit
      mode: '0700'
    become: true
    when:
      - DISA_STIG_RHEL_08_030120 | bool
    tags:
      - DISA-STIG-RHEL-08-030120

  - name: '[DISA_STIG_RHEL_08_030122] - Ensure that the login UIDs are immutable'
    lineinfile:
      state: present
      path: /etc/audit/rules.d/audit.rules
      line: --loginuid-immutable
      create: true
    become: true
    when:
      - DISA_STIG_RHEL_08_030122 | bool
    tags:
      - DISA-STIG-RHEL-08-030122

  - name: '[DISA_STIG_RHEL_08_030130] - Ensure that auditd has the appropriate rules'
    lineinfile:
      state: present
      path: /etc/audit/rules.d/audit.rules
      line: -w /etc/shadow -p wa -k identity
      create: true
    become: true
    notify:
      - service auditd restart
    when:
      - DISA_STIG_RHEL_08_030130 | bool
    tags:
      - DISA-STIG-RHEL-08-030130

  - name: '[DISA_STIG_RHEL_08_030140] - Ensure that auditd has the appropriate rules'
    lineinfile:
      state: present
      path: /etc/audit/rules.d/audit.rules
      line: -w /etc/security/opasswd -p wa -k identity
      create: true
    become: true
    notify:
      - service auditd restart
    when:
      - DISA_STIG_RHEL_08_030140 | bool
    tags:
      - DISA-STIG-RHEL-08-030140

  - name: '[DISA_STIG_RHEL_08_030150] - Ensure that auditd has the appropriate rules'
    lineinfile:
      state: present
      path: /etc/audit/rules.d/audit.rules
      line: -w /etc/passwd -p wa -k identity
      create: true
    become: true
    notify:
      - service auditd restart
    when:
      - DISA_STIG_RHEL_08_030150 | bool
    tags:
      - DISA-STIG-RHEL-08-030150

  - name: '[DISA_STIG_RHEL_08_030160] - Ensure that auditd has the appropriate rules'
    lineinfile:
      state: present
      path: /etc/audit/rules.d/audit.rules
      line: -w /etc/gshadow -p wa -k identity
      create: true
    become: true
    notify:
      - service auditd restart
    when:
      - DISA_STIG_RHEL_08_030160 | bool
    tags:
      - DISA-STIG-RHEL-08-030160

  - name: '[DISA_STIG_RHEL_08_030170] - Ensure that auditd has the appropriate rules'
    lineinfile:
      state: present
      path: /etc/audit/rules.d/audit.rules
      line: -w /etc/group -p wa -k identity
      create: true
    become: true
    notify:
      - service auditd restart
    when:
      - DISA_STIG_RHEL_08_030170 | bool
    tags:
      - DISA-STIG-RHEL-08-030170

  - name: '[DISA_STIG_RHEL_08_030171] - Ensure that auditd has the appropriate rules'
    lineinfile:
      state: present
      path: /etc/audit/rules.d/audit.rules
      line: -w /etc/sudoers -p wa -k identity
      create: true
    become: true
    notify:
      - service auditd restart
    when:
      - DISA_STIG_RHEL_08_030171 | bool
    tags:
      - DISA-STIG-RHEL-08-030171

  - name: '[DISA_STIG_RHEL_08_030172] - Ensure that auditd has the appropriate rules'
    lineinfile:
      state: present
      path: /etc/audit/rules.d/audit.rules
      line: -w /etc/sudoers.d/ -p wa -k identity
      create: true
    become: true
    notify:
      - service auditd restart
    when:
      - DISA_STIG_RHEL_08_030172 | bool
    tags:
      - DISA-STIG-RHEL-08-030172

  - name: "[DISA_STIG_RHEL_08_030180] - Ensure that the 'audit' package is installed"
    package:
      state: present
      name: audit
    become: true
    when:
      - DISA_STIG_RHEL_08_030180 | bool
    tags:
      - DISA-STIG-RHEL-08-030180

  - name: "[DISA_STIG_RHEL_08_030181] - Start and enable the 'auditd' service"
    systemd:
      state: started
      name: auditd.service
      enabled: true
    become: true
    when:
      - DISA_STIG_RHEL_08_030181 | bool
    tags:
      - DISA-STIG-RHEL-08-030181

  - name: '[DISA_STIG_RHEL_08_030190] - Ensure that auditd has the appropriate rules'
    lineinfile:
      state: present
      path: /etc/audit/rules.d/audit.rules
      line: -a always,exit -F path=/usr/bin/su -F perm=x -F auid>=1000 -F auid!=unset -k privileged-priv_change
      create: true
    become: true
    notify:
      - service auditd restart
    when:
      - DISA_STIG_RHEL_08_030190 | bool
    tags:
      - DISA-STIG-RHEL-08-030190

  - name: '[DISA_STIG_RHEL_08_030200] - Ensure that auditd has the appropriate rules'
    lineinfile:
      state: present
      path: /etc/audit/rules.d/audit.rules
      line: '{{ item }}'
      create: true
    become: true
    loop:
      - -a always,exit -F arch=b32 -S lremovexattr -F auid>=1000 -F auid!=unset -k perm_mod
      - -a always,exit -F arch=b64 -S lremovexattr -F auid>=1000 -F auid!=unset -k perm_mod
      - -a always,exit -F arch=b32 -S lremovexattr -F auid=0 -k perm_mod
      - -a always,exit -F arch=b64 -S lremovexattr -F auid=0 -k perm_mod
    notify:
      - service auditd restart
    when:
      - DISA_STIG_RHEL_08_030200 | bool
    tags:
      - DISA-STIG-RHEL-08-030200

  - name: '[DISA_STIG_RHEL_08_030210] - Ensure that auditd has the appropriate rules'
    lineinfile:
      state: present
      path: /etc/audit/rules.d/audit.rules
      line: '{{ item }}'
      create: true
    become: true
    loop:
      - -a always,exit -F arch=b32 -S removexattr -F auid>=1000 -F auid!=unset -k perm_mod
      - -a always,exit -F arch=b64 -S removexattr -F auid>=1000 -F auid!=unset -k perm_mod
      - -a always,exit -F arch=b32 -S removexattr -F auid=0 -k perm_mod
      - -a always,exit -F arch=b64 -S removexattr -F auid=0 -k perm_mod
    notify:
      - service auditd restart
    when:
      - DISA_STIG_RHEL_08_030210 | bool
    tags:
      - DISA-STIG-RHEL-08-030210

  - name: '[DISA_STIG_RHEL_08_030220] - Ensure that auditd has the appropriate rules'
    lineinfile:
      state: present
      path: /etc/audit/rules.d/audit.rules
      line: '{{ item }}'
      create: true
    become: true
    loop:
      - -a always,exit -F arch=b32 -S lsetxattr -F auid>=1000 -F auid!=unset -k perm_mod
      - -a always,exit -F arch=b64 -S lsetxattr -F auid>=1000 -F auid!=unset -k perm_mod
      - -a always,exit -F arch=b32 -S lsetxattr -F auid=0 -k perm_mod
      - -a always,exit -F arch=b64 -S lsetxattr -F auid=0 -k perm_mod
    notify:
      - service auditd restart
    when:
      - DISA_STIG_RHEL_08_030220 | bool
    tags:
      - DISA-STIG-RHEL-08-030220

  - name: '[DISA_STIG_RHEL_08_030230] - Ensure that auditd has the appropriate rules'
    lineinfile:
      state: present
      path: /etc/audit/rules.d/audit.rules
      line: '{{ item }}'
      create: true
    become: true
    loop:
      - -a always,exit -F arch=b32 -S lsetxattr -F auid>=1000 -F auid!=unset -k perm_mod
      - -a always,exit -F arch=b64 -S lsetxattr -F auid>=1000 -F auid!=unset -k perm_mod
      - -a always,exit -F arch=b32 -S lsetxattr -F auid=0 -k perm_mod
      - -a always,exit -F arch=b64 -S lsetxattr -F auid=0 -k perm_mod
    notify:
      - service auditd restart
    when:
      - DISA_STIG_RHEL_08_030230 | bool
    tags:
      - DISA-STIG-RHEL-08-030230

  - name: '[DISA_STIG_RHEL_08_030240] - Ensure that auditd has the appropriate rules'
    lineinfile:
      state: present
      path: /etc/audit/rules.d/audit.rules
      line: '{{ item }}'
      create: true
    become: true
    loop:
      - -a always,exit -F arch=b32 -S fremovexattr -F auid>=1000 -F auid!=unset -k perm_mod
      - -a always,exit -F arch=b64 -S fremovexattr -F auid>=1000 -F auid!=unset -k perm_mod
      - -a always,exit -F arch=b32 -S fremovexattr -F auid=0 -k perm_mod
      - -a always,exit -F arch=b64 -S fremovexattr -F auid=0 -k perm_mod
    notify:
      - service auditd restart
    when:
      - DISA_STIG_RHEL_08_030240 | bool
    tags:
      - DISA-STIG-RHEL-08-030240

  - name: '[DISA_STIG_RHEL_08_030250] - Ensure that auditd has the appropriate rules'
    lineinfile:
      state: present
      path: /etc/audit/rules.d/audit.rules
      line: -a always,exit -F path=/usr/bin/chage -F perm=x -F auid>=1000 -F auid!=unset -k privileged-chage
      create: true
    become: true
    notify:
      - service auditd restart
    when:
      - DISA_STIG_RHEL_08_030250 | bool
    tags:
      - DISA-STIG-RHEL-08-030250

  - name: '[DISA_STIG_RHEL_08_030260] - Ensure that auditd has the appropriate rules'
    lineinfile:
      state: present
      path: /etc/audit/rules.d/audit.rules
      line: -a always,exit -F path=/usr/bin/chcon -F perm=x -F auid>=1000 -F auid!=unset -k perm_mod
      create: true
    become: true
    notify:
      - service auditd restart
    when:
      - DISA_STIG_RHEL_08_030260 | bool
    tags:
      - DISA-STIG-RHEL-08-030260

  - name: '[DISA_STIG_RHEL_08_030270] - Ensure that auditd has the appropriate rules'
    lineinfile:
      state: present
      path: /etc/audit/rules.d/audit.rules
      line: '{{ item }}'
      create: true
    become: true
    loop:
      - -a always,exit -F arch=b32 -S setxattr -F auid>=1000 -F auid!=unset -k perm_mod
      - -a always,exit -F arch=b64 -S setxattr -F auid>=1000 -F auid!=unset -k perm_mod
      - -a always,exit -F arch=b32 -S setxattr -F auid=0 -k perm_mod
      - -a always,exit -F arch=b64 -S setxattr -F auid=0 -k perm_mod
    notify:
      - service auditd restart
    when:
      - DISA_STIG_RHEL_08_030270 | bool
    tags:
      - DISA-STIG-RHEL-08-030270

  - name: '[DISA_STIG_RHEL_08_030280] - Ensure that auditd has the appropriate rules'
    lineinfile:
      state: present
      path: /etc/audit/rules.d/audit.rules
      line: -a always,exit -F path=/usr/bin/ssh-agent -F perm=x -F auid>=1000 -F auid!=unset -k privileged-ssh
      create: true
    become: true
    notify:
      - service auditd restart
    when:
      - DISA_STIG_RHEL_08_030280 | bool
    tags:
      - DISA-STIG-RHEL-08-030280

  - name: '[DISA_STIG_RHEL_08_030290] - Ensure that auditd has the appropriate rules'
    lineinfile:
      state: present
      path: /etc/audit/rules.d/audit.rules
      line: -a always,exit -F path=/usr/bin/passwd -F perm=x -F auid>=1000 -F auid!=unset -k privileged-passwd
      create: true
    become: true
    notify:
      - service auditd restart
    when:
      - DISA_STIG_RHEL_08_030290 | bool
    tags:
      - DISA-STIG-RHEL-08-030290

  - name: '[DISA_STIG_RHEL_08_030300] - Ensure that auditd has the appropriate rules'
    lineinfile:
      state: present
      path: /etc/audit/rules.d/audit.rules
      line: -a always,exit -F path=/usr/bin/mount -F perm=x -F auid>=1000 -F auid!=unset -k privileged-mount
      create: true
    become: true
    notify:
      - service auditd restart
    when:
      - DISA_STIG_RHEL_08_030300 | bool
    tags:
      - DISA-STIG-RHEL-08-030300

  - name: '[DISA_STIG_RHEL_08_030301] - Ensure that auditd has the appropriate rules'
    lineinfile:
      state: present
      path: /etc/audit/rules.d/audit.rules
      line: -a always,exit -F path=/usr/bin/umount -F perm=x -F auid>=1000 -F auid!=unset -k privileged-mount
      create: true
    become: true
    notify:
      - service auditd restart
    when:
      - DISA_STIG_RHEL_08_030301 | bool
    tags:
      - DISA-STIG-RHEL-08-030301

  - name: '[DISA_STIG_RHEL_08_030302] - Ensure that auditd has the appropriate rules'
    lineinfile:
      state: present
      path: /etc/audit/rules.d/audit.rules
      line: '{{ item }}'
      create: true
    become: true
    loop:
      - -a always,exit -F arch=b32 -S mount -F auid>=1000 -F auid!=unset -k privileged-mount
      - -a always,exit -F arch=b64 -S mount -F auid>=1000 -F auid!=unset -k privileged-mount
    notify:
      - service auditd restart
    when:
      - DISA_STIG_RHEL_08_030302 | bool
    tags:
      - DISA-STIG-RHEL-08-030302

  - name: '[DISA_STIG_RHEL_08_030310] - Ensure that auditd has the appropriate rules'
    lineinfile:
      state: present
      path: /etc/audit/rules.d/audit.rules
      line: -a always,exit -F path=/usr/sbin/unix_update -F perm=x -F auid>=1000 -F auid!=unset -k privileged-unix-update
      create: true
    become: true
    notify:
      - service auditd restart
    when:
      - DISA_STIG_RHEL_08_030310 | bool
    tags:
      - DISA-STIG-RHEL-08-030310

  - name: '[DISA_STIG_RHEL_08_030311] - Ensure that auditd has the appropriate rules'
    lineinfile:
      state: present
      path: /etc/audit/rules.d/audit.rules
      line: -a always,exit -F path=/usr/sbin/postdrop -F perm=x -F auid>=1000 -F auid!=unset -k privileged-unix-update
      create: true
    become: true
    notify:
      - service auditd restart
    when:
      - DISA_STIG_RHEL_08_030311 | bool
    tags:
      - DISA-STIG-RHEL-08-030311

  - name: '[DISA_STIG_RHEL_08_030312] - Ensure that auditd has the appropriate rules'
    lineinfile:
      state: present
      path: /etc/audit/rules.d/audit.rules
      line: -a always,exit -F path=/usr/sbin/postqueue -F perm=x -F auid>=1000 -F auid!=unset -k privileged-unix-update
      create: true
    become: true
    notify:
      - service auditd restart
    when:
      - DISA_STIG_RHEL_08_030312 | bool
    tags:
      - DISA-STIG-RHEL-08-030312

  - name: '[DISA_STIG_RHEL_08_030313] - Ensure that auditd has the appropriate rules'
    lineinfile:
      state: present
      path: /etc/audit/rules.d/audit.rules
      line: -a always,exit -F path=/usr/sbin/semanage -F perm=x -F auid>=1000 -F auid!=unset -k privileged-unix-update
      create: true
    become: true
    notify:
      - service auditd restart
    when:
      - DISA_STIG_RHEL_08_030313 | bool
    tags:
      - DISA-STIG-RHEL-08-030313

  - name: '[DISA_STIG_RHEL_08_030314] - Ensure that auditd has the appropriate rules'
    lineinfile:
      state: present
      path: /etc/audit/rules.d/audit.rules
      line: -a always,exit -F path=/usr/sbin/setfiles -F perm=x -F auid>=1000 -F auid!=unset -k privileged-unix-update
      create: true
    become: true
    notify:
      - service auditd restart
    when:
      - DISA_STIG_RHEL_08_030314 | bool
    tags:
      - DISA-STIG-RHEL-08-030314

  - name: '[DISA_STIG_RHEL_08_030315] - Ensure that auditd has the appropriate rules'
    lineinfile:
      state: present
      path: /etc/audit/rules.d/audit.rules
      line: -a always,exit -F path=/usr/sbin/userhelper -F perm=x -F auid>=1000 -F auid!=unset -k privileged-unix-update
      create: true
    become: true
    notify:
      - service auditd restart
    when:
      - DISA_STIG_RHEL_08_030315 | bool
    tags:
      - DISA-STIG-RHEL-08-030315

  - name: '[DISA_STIG_RHEL_08_030316] - Ensure that auditd has the appropriate rules'
    lineinfile:
      state: present
      path: /etc/audit/rules.d/audit.rules
      line: -a always,exit -F path=/usr/sbin/setsebool -F perm=x -F auid>=1000 -F auid!=unset -k privileged-unix-update
      create: true
    become: true
    notify:
      - service auditd restart
    when:
      - DISA_STIG_RHEL_08_030316 | bool
    tags:
      - DISA-STIG-RHEL-08-030316

  - name: '[DISA_STIG_RHEL_08_030317] - Ensure that auditd has the appropriate rules'
    lineinfile:
      state: present
      path: /etc/audit/rules.d/audit.rules
      line: -a always,exit -F path=/usr/sbin/unix_chkpwd -F perm=x -F auid>=1000 -F auid!=unset -k privileged-unix-update
      create: true
    become: true
    notify:
      - service auditd restart
    when:
      - DISA_STIG_RHEL_08_030317 | bool
    tags:
      - DISA-STIG-RHEL-08-030317

  - name: '[DISA_STIG_RHEL_08_030320] - Ensure that auditd has the appropriate rules'
    lineinfile:
      state: present
      path: /etc/audit/rules.d/audit.rules
      line: -a always,exit -F path=/usr/libexec/openssh/ssh-keysign -F perm=x -F auid>=1000 -F auid!=unset -k privileged-ssh
      create: true
    become: true
    notify:
      - service auditd restart
    when:
      - DISA_STIG_RHEL_08_030320 | bool
    tags:
      - DISA-STIG-RHEL-08-030320

  - name: '[DISA_STIG_RHEL_08_030330] - Ensure that auditd has the appropriate rules'
    lineinfile:
      state: present
      path: /etc/audit/rules.d/audit.rules
      line: -a always,exit -F path=/usr/bin/setfacl -F perm=x -F auid>=1000 -F auid!=unset -k perm_mod
      create: true
    become: true
    notify:
      - service auditd restart
    when:
      - DISA_STIG_RHEL_08_030330 | bool
    tags:
      - DISA-STIG-RHEL-08-030330

  - name: '[DISA_STIG_RHEL_08_030340] - Ensure that auditd has the appropriate rules'
    lineinfile:
      state: present
      path: /etc/audit/rules.d/audit.rules
      line: -a always,exit -F path=/usr/sbin/pam_timestamp_check -F perm=x -F auid>=1000 -F auid!=unset -k privileged-pam_timestamp_check
      create: true
    become: true
    notify:
      - service auditd restart
    when:
      - DISA_STIG_RHEL_08_030340 | bool
    tags:
      - DISA-STIG-RHEL-08-030340

  - name: '[DISA_STIG_RHEL_08_030350] - Ensure that auditd has the appropriate rules'
    lineinfile:
      state: present
      path: /etc/audit/rules.d/audit.rules
      line: -a always,exit -F path=/usr/bin/newgrp -F perm=x -F auid>=1000 -F auid!=unset -k priv_cmd
      create: true
    become: true
    notify:
      - service auditd restart
    when:
      - DISA_STIG_RHEL_08_030350 | bool
    tags:
      - DISA-STIG-RHEL-08-030350

  - name: '[DISA_STIG_RHEL_08_030360] - Ensure that auditd has the appropriate rules'
    lineinfile:
      state: present
      path: /etc/audit/rules.d/audit.rules
      line: '{{ item }}'
      create: true
    become: true
    loop:
      - -a always,exit -F arch=b32 -S init_module -F auid>=1000 -F auid!=unset -k module_chng
      - -a always,exit -F arch=b64 -S init_module -F auid>=1000 -F auid!=unset -k module_chng
    notify:
      - service auditd restart
    when:
      - DISA_STIG_RHEL_08_030360 | bool
    tags:
      - DISA-STIG-RHEL-08-030360

  - name: '[DISA_STIG_RHEL_08_030361] - Ensure that auditd has the appropriate rules'
    lineinfile:
      state: present
      path: /etc/audit/rules.d/audit.rules
      line: '{{ item }}'
      create: true
    become: true
    loop:
      - -a always,exit -F arch=b32 -S rename -F auid>=1000 -F auid!=unset -k delete
      - -a always,exit -F arch=b64 -S rename -F auid>=1000 -F auid!=unset -k delete
    notify:
      - service auditd restart
    when:
      - DISA_STIG_RHEL_08_030361 | bool
    tags:
      - DISA-STIG-RHEL-08-030361

  - name: '[DISA_STIG_RHEL_08_030362] - Ensure that auditd has the appropriate rules'
    lineinfile:
      state: present
      path: /etc/audit/rules.d/audit.rules
      line: '{{ item }}'
      create: true
    become: true
    loop:
      - -a always,exit -F arch=b32 -S renameat -F auid>=1000 -F auid!=unset -k delete
      - -a always,exit -F arch=b64 -S renameat -F auid>=1000 -F auid!=unset -k delete
    notify:
      - service auditd restart
    when:
      - DISA_STIG_RHEL_08_030362 | bool
    tags:
      - DISA-STIG-RHEL-08-030362

  - name: '[DISA_STIG_RHEL_08_030363] - Ensure that auditd has the appropriate rules'
    lineinfile:
      state: present
      path: /etc/audit/rules.d/audit.rules
      line: '{{ item }}'
      create: true
    become: true
    loop:
      - -a always,exit -F arch=b32 -S rmdir -F auid>=1000 -F auid!=unset -k delete
      - -a always,exit -F arch=b64 -S rmdir -F auid>=1000 -F auid!=unset -k delete
    notify:
      - service auditd restart
    when:
      - DISA_STIG_RHEL_08_030363 | bool
    tags:
      - DISA-STIG-RHEL-08-030363

  - name: '[DISA_STIG_RHEL_08_030364] - Ensure that auditd has the appropriate rules'
    lineinfile:
      state: present
      path: /etc/audit/rules.d/audit.rules
      line: '{{ item }}'
      create: true
    become: true
    loop:
      - -a always,exit -F arch=b32 -S unlink -F auid>=1000 -F auid!=unset -k delete
      - -a always,exit -F arch=b64 -S unlink -F auid>=1000 -F auid!=unset -k delete
    notify:
      - service auditd restart
    when:
      - DISA_STIG_RHEL_08_030364 | bool
    tags:
      - DISA-STIG-RHEL-08-030364

  - name: '[DISA_STIG_RHEL_08_030365] - Ensure that auditd has the appropriate rules'
    lineinfile:
      state: present
      path: /etc/audit/rules.d/audit.rules
      line: '{{ item }}'
      create: true
    become: true
    loop:
      - -a always,exit -F arch=b32 -S unlinkat -F auid>=1000 -F auid!=unset -k delete
      - -a always,exit -F arch=b64 -S unlinkat -F auid>=1000 -F auid!=unset -k delete
    notify:
      - service auditd restart
    when:
      - DISA_STIG_RHEL_08_030365 | bool
    tags:
      - DISA-STIG-RHEL-08-030365

  - name: '[DISA_STIG_RHEL_08_030370] - Ensure that auditd has the appropriate rules'
    lineinfile:
      state: present
      path: /etc/audit/rules.d/audit.rules
      line: -a always,exit -F path=/usr/bin/gpasswd -F perm=x -F auid>=1000 -F auid!=unset -k privileged-gpasswd
      create: true
    become: true
    notify:
      - service auditd restart
    when:
      - DISA_STIG_RHEL_08_030370 | bool
    tags:
      - DISA-STIG-RHEL-08-030370

  - name: '[DISA_STIG_RHEL_08_030380] - Ensure that auditd has the appropriate rules'
    lineinfile:
      state: present
      path: /etc/audit/rules.d/audit.rules
      line: '{{ item }}'
      create: true
    become: true
    loop:
      - -a always,exit -F arch=b32 -S finit_module -F auid>=1000 -F auid!=unset -k module_chng
      - -a always,exit -F arch=b64 -S finit_module -F auid>=1000 -F auid!=unset -k module_chng
    notify:
      - service auditd restart
    when:
      - DISA_STIG_RHEL_08_030380 | bool
    tags:
      - DISA-STIG-RHEL-08-030380

  - name: '[DISA_STIG_RHEL_08_030390] - Ensure that auditd has the appropriate rules'
    lineinfile:
      state: present
      path: /etc/audit/rules.d/audit.rules
      line: '{{ item }}'
      create: true
    become: true
    loop:
      - -a always,exit -F arch=b32 -S delete_module -F auid>=1000 -F auid!=unset -k module_chng
      - -a always,exit -F arch=b64 -S delete_module -F auid>=1000 -F auid!=unset -k module_chng
    notify:
      - service auditd restart
    when:
      - DISA_STIG_RHEL_08_030390 | bool
    tags:
      - DISA-STIG-RHEL-08-030390

  - name: '[DISA_STIG_RHEL_08_030400] - Ensure that auditd has the appropriate rules'
    lineinfile:
      state: present
      path: /etc/audit/rules.d/audit.rules
      line: -a always,exit -F path=/usr/bin/crontab -F perm=x -F auid>=1000 -F auid!=unset -k privileged-crontab
      create: true
    become: true
    notify:
      - service auditd restart
    when:
      - DISA_STIG_RHEL_08_030400 | bool
    tags:
      - DISA-STIG-RHEL-08-030400

  - name: '[DISA_STIG_RHEL_08_030410] - Ensure that auditd has the appropriate rules'
    lineinfile:
      state: present
      path: /etc/audit/rules.d/audit.rules
      line: -a always,exit -F path=/usr/bin/chsh -F perm=x -F auid>=1000 -F auid!=unset -k priv_cmd
      create: true
    become: true
    notify:
      - service auditd restart
    when:
      - DISA_STIG_RHEL_08_030410 | bool
    tags:
      - DISA-STIG-RHEL-08-030410

  - name: '[DISA_STIG_RHEL_08_030420] - Ensure that auditd has the appropriate rules'
    lineinfile:
      state: present
      path: /etc/audit/rules.d/audit.rules
      line: '{{ item }}'
      create: true
    become: true
    loop:
      - -a always,exit -F arch=b32 -S truncate -F exit=-EPERM -F auid>=1000 -F auid!=unset -k perm_access
      - -a always,exit -F arch=b64 -S truncate -F exit=-EPERM -F auid>=1000 -F auid!=unset -k perm_access
      - -a always,exit -F arch=b32 -S truncate -F exit=-EACCES -F auid>=1000 -F auid!=unset -k perm_access
      - -a always,exit -F arch=b64 -S truncate -F exit=-EACCES -F auid>=1000 -F auid!=unset -k perm_access
    notify:
      - service auditd restart
    when:
      - DISA_STIG_RHEL_08_030420 | bool
    tags:
      - DISA-STIG-RHEL-08-030420

  - name: '[DISA_STIG_RHEL_08_030430] - Ensure that auditd has the appropriate rules'
    lineinfile:
      state: present
      path: /etc/audit/rules.d/audit.rules
      line: '{{ item }}'
      create: true
    become: true
    loop:
      - -a always,exit -F arch=b32 -S openat -F exit=-EPERM -F auid>=1000 -F auid!=unset -k perm_access
      - -a always,exit -F arch=b64 -S openat -F exit=-EPERM -F auid>=1000 -F auid!=unset -k perm_access
      - -a always,exit -F arch=b32 -S openat -F exit=-EACCES -F auid>=1000 -F auid!=unset -k perm_access
      - -a always,exit -F arch=b64 -S openat -F exit=-EACCES -F auid>=1000 -F auid!=unset -k perm_access
    notify:
      - service auditd restart
    when:
      - DISA_STIG_RHEL_08_030430 | bool
    tags:
      - DISA-STIG-RHEL-08-030430

  - name: '[DISA_STIG_RHEL_08_030440] - Ensure that auditd has the appropriate rules'
    lineinfile:
      state: present
      path: /etc/audit/rules.d/audit.rules
      line: '{{ item }}'
      create: true
    become: true
    loop:
      - -a always,exit -F arch=b32 -S open -F exit=-EPERM -F auid>=1000 -F auid!=unset -k perm_access
      - -a always,exit -F arch=b64 -S open -F exit=-EPERM -F auid>=1000 -F auid!=unset -k perm_access
      - -a always,exit -F arch=b32 -S open -F exit=-EACCES -F auid>=1000 -F auid!=unset -k perm_access
      - -a always,exit -F arch=b64 -S open -F exit=-EACCES -F auid>=1000 -F auid!=unset -k perm_access
    notify:
      - service auditd restart
    when:
      - DISA_STIG_RHEL_08_030440 | bool
    tags:
      - DISA-STIG-RHEL-08-030440

  - name: '[DISA_STIG_RHEL_08_030450] - Ensure that auditd has the appropriate rules'
    lineinfile:
      state: present
      path: /etc/audit/rules.d/audit.rules
      line: '{{ item }}'
      create: true
    become: true
    loop:
      - -a always,exit -F arch=b32 -S open_by_handle_at -F exit=-EPERM -F auid>=1000 -F auid!=unset -k perm_access
      - -a always,exit -F arch=b64 -S open_by_handle_at -F exit=-EPERM -F auid>=1000 -F auid!=unset -k perm_access
      - -a always,exit -F arch=b32 -S open_by_handle_at -F exit=-EACCES -F auid>=1000 -F auid!=unset -k perm_access
      - -a always,exit -F arch=b64 -S open_by_handle_at -F exit=-EACCES -F auid>=1000 -F auid!=unset -k perm_access
    notify:
      - service auditd restart
    when:
      - DISA_STIG_RHEL_08_030450 | bool
    tags:
      - DISA-STIG-RHEL-08-030450

  - name: '[DISA_STIG_RHEL_08_030460] - Ensure that auditd has the appropriate rules'
    lineinfile:
      state: present
      path: /etc/audit/rules.d/audit.rules
      line: '{{ item }}'
      create: true
    become: true
    loop:
      - -a always,exit -F arch=b32 -S ftruncate -F exit=-EPERM -F auid>=1000 -F auid!=unset -k perm_access
      - -a always,exit -F arch=b64 -S ftruncate -F exit=-EPERM -F auid>=1000 -F auid!=unset -k perm_access
      - -a always,exit -F arch=b32 -S ftruncate -F exit=-EACCES -F auid>=1000 -F auid!=unset -k perm_access
      - -a always,exit -F arch=b64 -S ftruncate -F exit=-EACCES -F auid>=1000 -F auid!=unset -k perm_access
    notify:
      - service auditd restart
    when:
      - DISA_STIG_RHEL_08_030460 | bool
    tags:
      - DISA-STIG-RHEL-08-030460

  - name: '[DISA_STIG_RHEL_08_030470] - Ensure that auditd has the appropriate rules'
    lineinfile:
      state: present
      path: /etc/audit/rules.d/audit.rules
      line: '{{ item }}'
      create: true
    become: true
    loop:
      - -a always,exit -F arch=b32 -S creat -F exit=-EPERM -F auid>=1000 -F auid!=unset -k perm_access
      - -a always,exit -F arch=b64 -S creat -F exit=-EPERM -F auid>=1000 -F auid!=unset -k perm_access
      - -a always,exit -F arch=b32 -S creat -F exit=-EACCES -F auid>=1000 -F auid!=unset -k perm_access
      - -a always,exit -F arch=b64 -S creat -F exit=-EACCES -F auid>=1000 -F auid!=unset -k perm_access
    notify:
      - service auditd restart
    when:
      - DISA_STIG_RHEL_08_030470 | bool
    tags:
      - DISA-STIG-RHEL-08-030470

  - name: '[DISA_STIG_RHEL_08_030480] - Ensure that auditd has the appropriate rules'
    lineinfile:
      state: present
      path: /etc/audit/rules.d/audit.rules
      line: '{{ item }}'
      create: true
    become: true
    loop:
      - -a always,exit -F arch=b32 -S chown -F auid>=1000 -F auid!=unset -k perm_mod
      - -a always,exit -F arch=b64 -S chown -F auid>=1000 -F auid!=unset -k perm_mod
    notify:
      - service auditd restart
    when:
      - DISA_STIG_RHEL_08_030480 | bool
    tags:
      - DISA-STIG-RHEL-08-030480

  - name: '[DISA_STIG_RHEL_08_030490] - Ensure that auditd has the appropriate rules'
    lineinfile:
      state: present
      path: /etc/audit/rules.d/audit.rules
      line: '{{ item }}'
      create: true
    become: true
    loop:
      - -a always,exit -F arch=b32 -S chmod -F auid>=1000 -F auid!=unset -k perm_mod
      - -a always,exit -F arch=b64 -S chmod -F auid>=1000 -F auid!=unset -k perm_mod
    notify:
      - service auditd restart
    when:
      - DISA_STIG_RHEL_08_030490 | bool
    tags:
      - DISA-STIG-RHEL-08-030490

  - name: '[DISA_STIG_RHEL_08_030500] - Ensure that auditd has the appropriate rules'
    lineinfile:
      state: present
      path: /etc/audit/rules.d/audit.rules
      line: '{{ item }}'
      create: true
    become: true
    loop:
      - -a always,exit -F arch=b32 -S lchown -F auid>=1000 -F auid!=unset -k perm_mod
      - -a always,exit -F arch=b64 -S lchown -F auid>=1000 -F auid!=unset -k perm_mod
    notify:
      - service auditd restart
    when:
      - DISA_STIG_RHEL_08_030500 | bool
    tags:
      - DISA-STIG-RHEL-08-030500

  - name: '[DISA_STIG_RHEL_08_030510] - Ensure that auditd has the appropriate rules'
    lineinfile:
      state: present
      path: /etc/audit/rules.d/audit.rules
      line: '{{ item }}'
      create: true
    become: true
    loop:
      - -a always,exit -F arch=b32 -S fchownat -F auid>=1000 -F auid!=unset -k perm_mod
      - -a always,exit -F arch=b64 -S fchownat -F auid>=1000 -F auid!=unset -k perm_mod
    notify:
      - service auditd restart
    when:
      - DISA_STIG_RHEL_08_030510 | bool
    tags:
      - DISA-STIG-RHEL-08-030510

  - name: '[DISA_STIG_RHEL_08_030520] - Ensure that auditd has the appropriate rules'
    lineinfile:
      state: present
      path: /etc/audit/rules.d/audit.rules
      line: '{{ item }}'
      create: true
    become: true
    loop:
      - -a always,exit -F arch=b32 -S fchown -F auid>=1000 -F auid!=unset -k perm_mod
      - -a always,exit -F arch=b64 -S fchown -F auid>=1000 -F auid!=unset -k perm_mod
    notify:
      - service auditd restart
    when:
      - DISA_STIG_RHEL_08_030520 | bool
    tags:
      - DISA-STIG-RHEL-08-030520

  - name: '[DISA_STIG_RHEL_08_030530] - Ensure that auditd has the appropriate rules'
    lineinfile:
      state: present
      path: /etc/audit/rules.d/audit.rules
      line: '{{ item }}'
      create: true
    become: true
    loop:
      - -a always,exit -F arch=b32 -S fchmodat -F auid>=1000 -F auid!=unset -k perm_mod
      - -a always,exit -F arch=b64 -S fchmodat -F auid>=1000 -F auid!=unset -k perm_mod
    notify:
      - service auditd restart
    when:
      - DISA_STIG_RHEL_08_030530 | bool
    tags:
      - DISA-STIG-RHEL-08-030530

  - name: '[DISA_STIG_RHEL_08_030540] - Ensure that auditd has the appropriate rules'
    lineinfile:
      state: present
      path: /etc/audit/rules.d/audit.rules
      line: '{{ item }}'
      create: true
    become: true
    loop:
      - -a always,exit -F arch=b32 -S fchmod -F auid>=1000 -F auid!=unset -k perm_mod
      - -a always,exit -F arch=b64 -S fchmod -F auid>=1000 -F auid!=unset -k perm_mod
    notify:
      - service auditd restart
    when:
      - DISA_STIG_RHEL_08_030540 | bool
    tags:
      - DISA-STIG-RHEL-08-030540

  - name: '[DISA_STIG_RHEL_08_030550] - Ensure that auditd has the appropriate rules'
    lineinfile:
      state: present
      path: /etc/audit/rules.d/audit.rules
      line: -a always,exit -F path=/usr/bin/sudo -F perm=x -F auid>=1000 -F auid!=unset -k priv_cmd
      create: true
    become: true
    notify:
      - service auditd restart
    when:
      - DISA_STIG_RHEL_08_030550 | bool
    tags:
      - DISA-STIG-RHEL-08-030550

  - name: '[DISA_STIG_RHEL_08_030560] - Ensure that auditd has the appropriate rules'
    lineinfile:
      state: present
      path: /etc/audit/rules.d/audit.rules
      line: -a always,exit -F path=/usr/bin/chsh -F perm=x -F auid>=1000 -F auid!=unset -k priv_cmd
      create: true
    become: true
    notify:
      - service auditd restart
    when:
      - DISA_STIG_RHEL_08_030560 | bool
    tags:
      - DISA-STIG-RHEL-08-030560

  - name: '[DISA_STIG_RHEL_08_030570] - Ensure that auditd has the appropriate rules'
    lineinfile:
      state: present
      path: /etc/audit/rules.d/audit.rules
      line: -a always,exit -F path=/usr/bin/chacl -F perm=x -F auid>=1000 -F auid!=unset -k perm_mod
      create: true
    become: true
    notify:
      - service auditd restart
    when:
      - DISA_STIG_RHEL_08_030570 | bool
    tags:
      - DISA-STIG-RHEL-08-030570

  - name: '[DISA_STIG_RHEL_08_030580] - Ensure that auditd has the appropriate rules'
    lineinfile:
      state: present
      path: /etc/audit/rules.d/audit.rules
      line: -a always,exit -F path=/usr/bin/kmod -F perm=x -F auid>=1000 -F auid!=unset -k modules
      create: true
    become: true
    notify:
      - service auditd restart
    when:
      - DISA_STIG_RHEL_08_030580 | bool
    tags:
      - DISA-STIG-RHEL-08-030580

  - name: '[DISA_STIG_RHEL_08_030590] - Ensure that auditd has the appropriate rules'
    lineinfile:
      state: present
      path: /etc/audit/rules.d/audit.rules
      line: -w /var/log/faillock -p wa -k logins
      create: true
    become: true
    notify:
      - service auditd restart
    when:
      - DISA_STIG_RHEL_08_030590 | bool
    tags:
      - DISA-STIG-RHEL-08-030590

  - name: '[DISA_STIG_RHEL_08_030600] - Ensure that auditd has the appropriate rules'
    lineinfile:
      state: present
      path: /etc/audit/rules.d/audit.rules
      line: -w /var/log/lastlog -p wa -k logins
      create: true
    become: true
    notify:
      - service auditd restart
    when:
      - DISA_STIG_RHEL_08_030600 | bool
    tags:
      - DISA-STIG-RHEL-08-030600

  - name: '[BLOCK] - [DISA_STIG_RHEL_08_030601] - Ensure that GRUB 2 audit argument is enabled'
    block:

      - name: '[DISA_STIG_RHEL_08_030601] - Check whether GRUB 2 audit argument is enabled'
        shell: grubby --info DEFAULT | grep '^args=' | grep audit=1
        become: true
        changed_when: false
        register: grub2_audit_results
        failed_when: grub2_audit_results.rc not in [0, 1]

      - name: '[DISA_STIG_RHEL_08_030601] - Ensure that GRUB 2 audit argument is enabled'
        command: grubby --update-kernel=ALL --args="audit=1"
        become: true
        notify:
          - reboot
        when: grub2_audit_results.rc == 1

      - name: "[DISA_STIG_RHEL_08_030601] - Check whether the '/etc/default/grub' file contains the audit argument"
        shell: cat /etc/default/grub | grep '^GRUB_CMDLINE_LINUX' | grep 'audit=1'
        become: true
        changed_when: false
        register: grub2_cmdline_audit_results
        failed_when: grub2_cmdline_audit_results.rc not in [0, 1]

      - name: "[DISA_STIG_RHEL_08_030601] - Ensure that the '/etc/default/grub' file contains the audit argument"
        lineinfile:
          path: /etc/default/grub
          regexp: ^GRUB_CMDLINE_LINUX="(((?!audit=1).)*)"
          line: GRUB_CMDLINE_LINUX="\1 audit=1"
          backrefs: true
        become: true
        notify:
          - reboot
        when: grub2_cmdline_audit_results.rc == 1

    when:
      - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      - DISA_STIG_RHEL_08_030601 | bool
    tags:
      - DISA-STIG-RHEL-08-030601

  - name: '[BLOCK] - [DISA_STIG_RHEL_08_030602] - Ensure that GRUB 2 audit_backlog_limit argument is enabled'
    block:

      - name: '[DISA_STIG_RHEL_08_030602] - Check whether GRUB 2 audit_backlog_limit argument is enabled'
        shell: grubby --info DEFAULT | grep '^args=' | grep audit_backlog_limit=8192
        become: true
        changed_when: false
        register: grub2_audit_backlog_limit_results
        failed_when: grub2_audit_backlog_limit_results.rc not in [0, 1]

      - name: '[DISA_STIG_RHEL_08_030602] - Ensure that GRUB 2 audit_backlog_limit argument is enabled'
        command: grubby --update-kernel=ALL --args="audit_backlog_limit=8192"
        become: true
        notify:
          - reboot
        when: grub2_audit_backlog_limit_results.rc == 1

      - name: "[DISA_STIG_RHEL_08_030602] - Check whether the '/etc/default/grub' file contains the audit_backlog_limit argument"
        shell: cat /etc/default/grub | grep '^GRUB_CMDLINE_LINUX' | grep 'audit_backlog_limit=8192'
        become: true
        changed_when: false
        register: grub2_cmdline_audit_backlog_limit_results
        failed_when: grub2_cmdline_audit_backlog_limit_results.rc not in [0, 1]

      - name: "[DISA_STIG_RHEL_08_030602] - Ensure that the '/etc/default/grub' file contains the audit_backlog_limit argument"
        lineinfile:
          path: /etc/default/grub
          regexp: ^GRUB_CMDLINE_LINUX="(((?!audit_backlog_limit=8192).)*)"
          line: GRUB_CMDLINE_LINUX="\1 audit_backlog_limit=8192"
          backrefs: true
        become: true
        notify:
          - reboot
        when: grub2_cmdline_audit_backlog_limit_results.rc == 1

    when:
      - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      - DISA_STIG_RHEL_08_030602 | bool
    tags:
      - DISA-STIG-RHEL-08-030602

  - name: '[BLOCK] - [DISA_STIG_RHEL_08_030603] - Ensure that GRUB 2 AuditBackend argument is enabled'
    block:

      - name: '[DISA_STIG_RHEL_08_030603] - Check whether GRUB 2 AuditBackend argument is enabled'
        shell: grubby --info DEFAULT | grep '^args=' | grep AuditBackend=LinuxAudit
        become: true
        changed_when: false
        register: grub2_auditbackend_results
        failed_when: grub2_auditbackend_results.rc not in [0, 1]

      - name: '[DISA_STIG_RHEL_08_030603] - Ensure that GRUB 2 AuditBackend argument is enabled'
        command: grubby --update-kernel=ALL --args="AuditBackend=LinuxAudit"
        become: true
        notify:
          - reboot
        when: grub2_auditbackend_results.rc == 1

      - name: "[DISA_STIG_RHEL_08_030603] - Check whether the '/etc/default/grub' file contains the AuditBackend argument"
        shell: cat /etc/default/grub | grep '^GRUB_CMDLINE_LINUX' | grep 'AuditBackend=LinuxAudit'
        become: true
        changed_when: false
        register: grub2_cmdline_auditbackend_results
        failed_when: grub2_cmdline_auditbackend_results.rc not in [0, 1]

      - name: "[DISA_STIG_RHEL_08_030603] - Ensure that the '/etc/default/grub' file contains the AuditBackend argument"
        lineinfile:
          path: /etc/default/grub
          regexp: ^GRUB_CMDLINE_LINUX="(((?!AuditBackend=LinuxAudit).)*)"
          line: GRUB_CMDLINE_LINUX="\1 AuditBackend=LinuxAudit"
          backrefs: true
        become: true
        notify:
          - reboot
        when: grub2_cmdline_auditbackend_results.rc == 1

    when:
      - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      - DISA_STIG_RHEL_08_030603 | bool
    tags:
      - DISA-STIG-RHEL-08-030603

  - name: "[BLOCK] - [DISA_STIG_RHEL_08_030610] - Ensure that the auditd files have a mode '0640' or less permissive"
    block:

      - name: "[DISA_STIG_RHEL_08_030610] - Get the auditd files that have a mode more permissive than '0640'"
        command: find -L /etc/audit/rules.d/ /etc/audit/auditd.conf -perm /0137 -type f
        become: true
        changed_when: false
        register: auditd_files_permissions_results

      - name: "[DISA_STIG_RHEL_08_030610] - Ensure that the auditd files have a mode of '0640' or less permissive"
        file:
          state: file
          path: '{{ item }}'
          mode: u-x,g-wx,o-rwx
        become: true
        loop: '{{ auditd_files_permissions_results.stdout_lines }}'

    when:
      - DISA_STIG_RHEL_08_030610 | bool
    tags:
      - DISA-STIG-RHEL-08-030610

  - name: "[BLOCK] - [DISA_STIG_RHEL_08_030620] - Ensure that the audit tools have a mode '0755' or less permissive"
    block:

      - name: "[DISA_STIG_RHEL_08_030620] - Get the audit tools that have a mode more permissive than '0755'"
        command: find -L /sbin/auditctl /sbin/aureport /sbin/ausearch /sbin/autrace /sbin/auditd /sbin/rsyslogd /sbin/augenrules -perm /0022 -type f
        become: true
        changed_when: false
        register: audit_tools_permissions_results

      - name: "[DISA_STIG_RHEL_08_030620] - Ensure that the audit tools have a mode of '0755' or less permissive"
        file:
          state: file
          path: '{{ item }}'
          mode: g-w,o-w
        become: true
        loop: '{{ audit_tools_permissions_results.stdout_lines }}'

    when:
      - DISA_STIG_RHEL_08_030620 | bool
    tags:
      - DISA-STIG-RHEL-08-030620

  - name: "[BLOCK] - [DISA_STIG_RHEL_08_030630] - Ensure that the audit tools have an owner of 'root'"
    block:

      - name: "[DISA_STIG_RHEL_08_030630] - Get the audit tools that have an owner of 'root'"
        command: find -L /sbin/auditctl /sbin/aureport /sbin/ausearch /sbin/autrace /sbin/auditd /sbin/rsyslogd /sbin/augenrules -not -user root -type f
        become: true
        changed_when: false
        register: audit_tools_owner_results

      - name: "[DISA_STIG_RHEL_08_030630] - Ensure that the audit tools have an owner of 'root'"
        file:
          state: file
          path: '{{ item }}'
          owner: root
        become: true
        loop: '{{ audit_tools_owner_results.stdout_lines }}'

    when:
      - DISA_STIG_RHEL_08_030630 | bool
    tags:
      - DISA-STIG-RHEL-08-030630

  - name: "[BLOCK] - [DISA_STIG_RHEL_08_030640] - Ensure that the audit tools have a group owner of 'root'"
    block:

      - name: "[DISA_STIG_RHEL_08_030640] - Get the audit tools that have a group owner of 'root'"
        command: find -L /sbin/auditctl /sbin/aureport /sbin/ausearch /sbin/autrace /sbin/auditd /sbin/rsyslogd /sbin/augenrules -not -group root -type
          f
        become: true
        changed_when: false
        register: audit_tools_owner_results

      - name: "[DISA_STIG_RHEL_08_030640] - Ensure that the audit tools have a group owner of 'root'"
        file:
          state: file
          path: '{{ item }}'
          group: root
        become: true
        loop: '{{ audit_tools_owner_results.stdout_lines }}'

    when:
      - DISA_STIG_RHEL_08_030640 | bool
    tags:
      - DISA-STIG-RHEL-08-030640

  - name: '[DISA_STIG_RHEL_08_030650] - Ensure that the audit tools are protected by AIDE'
    lineinfile:
      state: present
      path: /etc/aide.conf
      regexp: '^{{ item }} '
      line: '{{ item }} p+i+n+u+g+s+b+acl+xattrs+sha512'
      create: true
    become: true
    loop:
      - /usr/sbin/auditctl
      - /usr/sbin/auditd
      - /usr/sbin/ausearch
      - /usr/sbin/aureport
      - /usr/sbin/autrace
      - /usr/sbin/rsyslogd
      - /usr/sbin/augenrules
    when:
      - DISA_STIG_RHEL_08_030650 | bool
    tags:
      - DISA-STIG-RHEL-08-030650

  - name: '[Miscellaneous] - Flush all handlers'
    meta: flush_handlers

  - name: '[BLOCK] - [DISA_STIG_RHEL_08_030660] - Ensure that the audit file system/partition is present'
    block:

      - name: '[DISA_STIG_RHEL_08_030660] - Check whether the audit file system/partition is present'
        shell: findmnt | grep '/var/log/audit'
        become: true
        changed_when: false
        failed_when: audit_partition_results.rc not in [0, 1]
        register: audit_partition_results

      - name: '[DISA_STIG_RHEL_08_030660] - Ensure that the audit file system/partition is present'
        assert:
          that: audit_partition_results.rc == 0
          success_msg: The auditd '/var/log/audit' file system/partition is present
          fail_msg: |
            The '/var/log/audit' filesystem/partition is not present.
            Please manually correct this by creating the '/var/log/audit' file system or partition.

    when:
      - DISA_STIG_RHEL_08_030660 | bool
    tags:
      - DISA-STIG-RHEL-08-030660

  - name: "[DISA_STIG_RHEL_08_030670] - Ensure that the 'rsyslog' package is installed"
    package:
      state: present
      name: rsyslog
    become: true
    when:
      - DISA_STIG_RHEL_08_030670 | bool
    tags:
      - DISA-STIG-RHEL-08-030670

  - name: "[DISA_STIG_RHEL_08_030680] - Ensure that the 'rsyslog' package is installed"
    package:
      state: present
      name: rsyslog-gnutls
    become: true
    when:
      - DISA_STIG_RHEL_08_030680 | bool
    tags:
      - DISA-STIG-RHEL-08-030680

# EXEMPTION: RHEL-08-030690 - SV-230479r627750_rule

  - name: '[DISA_STIG_RHEL_08_030700] - Ensure that the appropriate action is taken when the log file reaches its max size'
    lineinfile:
      state: present
      path: /etc/audit/auditd.conf
      regexp: ^overflow_action ?=
      line: overflow_action = syslog
      create: true
    become: true
    notify:
      - service auditd restart
    when:
      - DISA_STIG_RHEL_08_030700 | bool
    tags:
      - DISA-STIG-RHEL-08-030700

  - name: '[DISA_STIG_RHEL_08_030710] - Ensure that off-loaded audit records are encrypted'
    lineinfile:
      state: present
      path: /etc/rsyslog.conf
      regexp: '{{ item.regexp }}'
      line: '{{ item.line }}'
      create: true
    become: true
    loop:
      - regexp: ^\$DefaultNetstreamDriver
        line: $DefaultNetstreamDriver gtls
      - regexp: ^\$ActionSendStreamDriverMode
        line: $ActionSendStreamDriverMode 1
    when:
      - DISA_STIG_RHEL_08_030710 | bool
    tags:
      - DISA-STIG-RHEL-08-030710

  - name: '[DISA_STIG_RHEL_08_030720] - Ensure that the remote logging server is authenticated'
    lineinfile:
      state: present
      path: /etc/rsyslog.conf
      regexp: ^\$ActionSendStreamDriverAuthMode
      line: $ActionSendStreamDriverAuthMode x509/name
      create: true
    become: true
    when:
      - DISA_STIG_RHEL_08_030720 | bool
    tags:
      - DISA-STIG-RHEL-08-030720

  - name: '[DISA_STIG_RHEL_08_030730] - Ensure that an action is taken when the audit storage is 75% full'
    lineinfile:
      state: present
      path: /etc/audit/auditd.conf
      regexp: ^space_left ?=
      line: space_left = 25%
      create: true
    become: true
    notify:
      - service auditd restart
    when:
      - DISA_STIG_RHEL_08_030730 | bool
    tags:
      - DISA-STIG-RHEL-08-030730

  - name: '[DISA_STIG_RHEL_08_030731] - Ensure that the system owners are notified when the audit storage is 75% full'
    lineinfile:
      state: present
      path: /etc/audit/auditd.conf
      regexp: ^space_left_action ?=
      line: space_left_action = email
      create: true
    become: true
    notify:
      - service auditd restart
    when:
      - DISA_STIG_RHEL_08_030731 | bool
    tags:
      - DISA-STIG-RHEL-08-030731

  - name: '[Miscellaneous] - Flush all handlers'
    meta: flush_handlers

  - name: '[BLOCK] - [DISA_STIG_RHEL_08_030740] - Ensure that a time source is configured'
    block:

      - name: '[DISA_STIG_RHEL_08_030740] - Check whether a time source is configured'
        shell: cat /etc/chrony.conf | grep -E '^server\s+'
        become: true
        changed_when: false
        failed_when: chrony_time_source_results.rc not in [0, 1]
        register: chrony_time_source_results

      - name: '[DISA_STIG_RHEL_08_030740] - Ensure that a time source is configured'
        assert:
          that: chrony_time_source_results.rc == 0
          success_msg: A time source is configured in '/etc/chrony.conf'.
          fail_msg: |
            A time source is not configured in '/etc/chrony.conf'.
            Please manually correct this by configuring a time source in the '/etc/chrony.conf' file.

    when:
      - DISA_STIG_RHEL_08_030740 | bool
    tags:
      - DISA-STIG-RHEL-08-030740

  - name: '[DISA_STIG_RHEL_08_030741] - Ensure that the chrony daemon cannot act as a server'
    lineinfile:
      state: present
      path: /etc/chrony.conf
      regexp: ^port
      line: port 0
      create: true
    become: true
    when:
      - DISA_STIG_RHEL_08_030741 | bool
    tags:
      - DISA-STIG-RHEL-08-030741

  - name: '[DISA_STIG_RHEL_08_030742] - Ensure that the chrony daemon cannot be managed via the network'
    lineinfile:
      state: present
      path: /etc/chrony.conf
      regexp: ^cmdport
      line: cmdport 0
      create: true
    become: true
    when:
      - DISA_STIG_RHEL_08_030742 | bool
    tags:
      - DISA-STIG-RHEL-08-030742

  - name: "[DISA_STIG_RHEL_08_040000] - Ensure that the 'telnet-server' package is not installed"
    package:
      state: absent
      name: telnet-server
    become: true
    when:
      - DISA_STIG_RHEL_08_040000 | bool
    tags:
      - DISA-STIG-RHEL-08-040000

  - name: "[DISA_STIG_RHEL_08_040001] - Ensure that the 'abrt*' package is not installed"
    package:
      state: absent
      name: abrt*
    become: true
    when:
      - DISA_STIG_RHEL_08_040001 | bool
    tags:
      - DISA-STIG-RHEL-08-040001

  - name: "[DISA_STIG_RHEL_08_040002] - Ensure that the 'sendmail' package is not installed"
    package:
      state: absent
      name: sendmail
    become: true
    when:
      - DISA_STIG_RHEL_08_040002 | bool
    tags:
      - DISA-STIG-RHEL-08-040002

  - name: '[BLOCK] - [DISA_STIG_RHEL_08_040004] - Ensure that GRUB 2 page-table isolation argument is enabled'
    block:

      - name: '[DISA_STIG_RHEL_08_040004] - Check whether GRUB 2 page-table isolation argument is enabled'
        shell: grubby --info DEFAULT | grep '^args=' | grep pti=on
        become: true
        changed_when: false
        register: grub2_pti_results
        failed_when: grub2_pti_results.rc not in [0, 1]

      - name: '[DISA_STIG_RHEL_08_040004] - Ensure that GRUB 2 page-table isolation argument is enabled'
        command: grubby --update-kernel=ALL --args="pti=on"
        become: true
        notify:
          - reboot
        when: grub2_pti_results.rc == 1

      - name: "[DISA_STIG_RHEL_08_040004] - Check whether the '/etc/default/grub' file contains the page-table isolation argument"
        shell: cat /etc/default/grub | grep '^GRUB_CMDLINE_LINUX' | grep 'pti=on'
        become: true
        changed_when: false
        register: grub2_cmdline_pti_results
        failed_when: grub2_cmdline_pti_results.rc not in [0, 1]

      - name: "[DISA_STIG_RHEL_08_040004] - Ensure that the '/etc/default/grub' file contains the page-table isolation argument"
        lineinfile:
          path: /etc/default/grub
          regexp: ^GRUB_CMDLINE_LINUX="(((?!pti=on).)*)"
          line: GRUB_CMDLINE_LINUX="\1 pti=on"
          backrefs: true
        become: true
        notify:
          - reboot
        when: grub2_cmdline_pti_results.rc == 1

    when:
      - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      - DISA_STIG_RHEL_08_040004 | bool
    tags:
      - DISA-STIG-RHEL-08-040004

  - name: "[DISA_STIG_RHEL_08_040010] - Ensure that the 'rsh-server' package is not installed"
    package:
      state: absent
      name: rsh-server
    become: true
    when:
      - DISA_STIG_RHEL_08_040010 | bool
    tags:
      - DISA-STIG-RHEL-08-040010

# EXEMPTION: RHEL-08-040020 - SV-230493r627750_rule

  - name: "[DISA_STIG_RHEL_08_040021] - Ensure that the 'ATM' protocol is blacklisted"
    lineinfile:
      state: present
      path: /etc/modprobe.d/blacklist.conf
      regexp: '{{ item.regexp }}'
      line: '{{ item.line }}'
      create: true
    become: true
    loop:
      - regexp: ^install ATM
        line: install ATM /bin/true
      - regexp: ^blacklist ATM
        line: blacklist ATM
    notify:
      - reboot
    when:
      - DISA_STIG_RHEL_08_040021 | bool
    tags:
      - DISA-STIG-RHEL-08-040021

  - name: "[DISA_STIG_RHEL_08_040022] - Ensure that the 'CAN' protocol is blacklisted"
    lineinfile:
      state: present
      path: /etc/modprobe.d/blacklist.conf
      regexp: '{{ item.regexp }}'
      line: '{{ item.line }}'
      create: true
    become: true
    loop:
      - regexp: ^install CAN
        line: install CAN /bin/true
      - regexp: ^blacklist CAN
        line: blacklist CAN
    notify:
      - reboot
    when:
      - DISA_STIG_RHEL_08_040022 | bool
    tags:
      - DISA-STIG-RHEL-08-040022

  - name: "[DISA_STIG_RHEL_08_040023] - Ensure that the 'SCTP' protocol is blacklisted"
    lineinfile:
      state: present
      path: /etc/modprobe.d/blacklist.conf
      regexp: '{{ item.regexp }}'
      line: '{{ item.line }}'
      create: true
    become: true
    loop:
      - regexp: ^install SCTP
        line: install SCTP /bin/true
      - regexp: ^blacklist SCTP
        line: blacklist SCTP
    notify:
      - reboot
    when:
      - DISA_STIG_RHEL_08_040023 | bool
    tags:
      - DISA-STIG-RHEL-08-040023

  - name: "[DISA_STIG_RHEL_08_040024] - Ensure that the 'TIPC' protocol is blacklisted"
    lineinfile:
      state: present
      path: /etc/modprobe.d/blacklist.conf
      regexp: '{{ item.regexp }}'
      line: '{{ item.line }}'
      create: true
    become: true
    loop:
      - regexp: ^install TIPC
        line: install TIPC /bin/true
      - regexp: ^blacklist TIPC
        line: blacklist TIPC
    notify:
      - reboot
    when:
      - DISA_STIG_RHEL_08_040024 | bool
    tags:
      - DISA-STIG-RHEL-08-040024

  - name: "[DISA_STIG_RHEL_08_040025] - Ensure that 'cramfs' is blacklisted"
    lineinfile:
      state: present
      path: /etc/modprobe.d/blacklist.conf
      regexp: '{{ item.regexp }}'
      line: '{{ item.line }}'
      create: true
    become: true
    loop:
      - regexp: ^install cramfs
        line: install cramfs /bin/true
      - regexp: ^blacklist cramfs
        line: blacklist cramfs
    notify:
      - reboot
    when:
      - DISA_STIG_RHEL_08_040025 | bool
    tags:
      - DISA-STIG-RHEL-08-040025

  - name: "[DISA_STIG_RHEL_08_040026] - Ensure that 'firewire-core' is blacklisted"
    lineinfile:
      state: present
      path: /etc/modprobe.d/blacklist.conf
      regexp: '{{ item.regexp }}'
      line: '{{ item.line }}'
      create: true
    become: true
    loop:
      - regexp: ^install firewire-core
        line: install firewire-core /bin/true
      - regexp: ^blacklist firewire-core
        line: blacklist firewire-core
    notify:
      - reboot
    when:
      - DISA_STIG_RHEL_08_040026 | bool
    tags:
      - DISA-STIG-RHEL-08-040026

# EXEMPTION: RHEL-08-040030 - SV-230500r627750_rule

  - name: "[DISA_STIG_RHEL_08_040070] - Stop and disable the 'autofs' service"
    systemd:
      state: stopped
      name: autofs.service
      enabled: false
    failed_when: stop_disable_autofs_results is failed and ('Could not find the requested service' not in stop_disable_autofs_results.msg)
    register: stop_disable_autofs_results
    become: true
    when:
      - DISA_STIG_RHEL_08_040070 | bool
    tags:
      - DISA-STIG-RHEL-08-040070

  - name: "[DISA_STIG_RHEL_08_040080] - Ensure that 'usb-storage' is blacklisted"
    lineinfile:
      state: present
      path: '{{ item.path }}'
      regexp: '{{ item.regexp }}'
      line: '{{ item.line }}'
      create: true
    become: true
    loop:
      - path: /etc/modprobe.d/usb-storage.conf
        regexp: ^install usb-storage
        line: install usb-storage /bin/true
      - path: /etc/modprobe.d/blacklist.conf
        regexp: ^blacklist usb-storage
        line: blacklist usb-storage
    notify:
      - reboot
    when:
      - DISA_STIG_RHEL_08_040080 | bool
    tags:
      - DISA-STIG-RHEL-08-040080

  - name: "[BLOCK] - [DISA_STIG_RHEL_08_040090] - Ensure that the 'disa-stig' firewalld zone is the default"
    block:

      - name: "[DISA_STIG_RHEL_08_040090] - Ensure that the 'disa-stig' firewalld zone exists"
        firewalld:
          state: present
          zone: disa-stig
          permanent: true
        become: true
        register: firewall_cmd_create_zone_results

      - name: '[DISA_STIG_RHEL_08_040090] - Reload firewalld to apply changes'
        command: firewall-cmd --reload
        become: true
        when: firewall_cmd_create_zone_results.changed | bool

      - name: "[DISA_STIG_RHEL_08_040090] - Configure the 'disa-stig' zone with the 'DROP' zone information"
        copy:
          src: /usr/lib/firewalld/zones/drop.xml
          dest: /etc/firewalld/zones/disa-stig.xml
          remote_src: true
        become: true
        register: firewalld_drop_disa_stig_zone_results
        when: firewall_cmd_create_zone_results.changed | bool

      - name: '[DISA_STIG_RHEL_08_040090] - Reload firewalld to apply changes'
        command: firewall-cmd --reload
        become: true
        when: firewalld_drop_disa_stig_zone_results.changed | bool

      - name: "[DISA_STIG_RHEL_08_040090] - Ensure that the 'disa-stig' firewalld zone permits SSH"
        firewalld:
          state: enabled
          zone: disa-stig
          service: ssh
          permanent: true
        become: true
        register: firewalld_permit_ssh_results

      - name: "[DISA_STIG_RHEL_08_040090] - Ensure that the 'disa-stig' firewalld zone permits DHCPv6"
        firewalld:
          state: enabled
          zone: disa-stig
          service: dhcpv6-client
          permanent: true
        become: true
        register: firewalld_permit_dhcpv6_results

      - name: '[DISA_STIG_RHEL_08_040090] - Reload firewalld to apply changes'
        command: firewall-cmd --reload
        become: true
        when: >-
          firewalld_permit_ssh_results.changed | bool or
          firewalld_permit_dhcpv6_results.changed | bool

    # NOTE: The 'firewalld' Ansible module can't be used here for the IPv6 protocol rule due to the module not
    #       having a parameter to set protocols. It only has a parameter for services.

      - name: "[DISA_STIG_RHEL_08_040090] - Check whether the 'disa-stig' firewalld zone permits IPv6"
        shell: firewall-cmd --list-protocols | grep 'ipv6-icmp'
        register: firewalld_ipv6_results
        changed_when: false
        failed_when: firewalld_ipv6_results.rc not in [0, 1]
        become: true

      - name: "[DISA_STIG_RHEL_08_040090] - Ensure that the 'disa-stig' firewalld zone permits IPv6"
        command: firewall-cmd --zone disa-stig --add-protocol ipv6-icmp --permanent
        become: true
        register: firewalld_set_ipv6_protocol_results
        when: firewalld_ipv6_results.rc == 1

      - name: '[DISA_STIG_RHEL_08_040090] - Reload firewalld to apply changes'
        command: firewall-cmd --reload
        become: true
        when: firewalld_set_ipv6_protocol_results.changed | bool

      - name: '[DISA_STIG_RHEL_08_040090] - Get the default firewalld zone name'
        shell: firewall-cmd --get-default-zone | grep 'disa-stig'
        register: firewalld_default_zone_results
        changed_when: false
        failed_when: firewalld_default_zone_results.rc not in [0, 1]
        become: true

      - name: '[DISA_STIG_RHEL_08_040090] - Set the default firewalld zone'
        command: firewall-cmd --set-default-zone=disa-stig
        become: true
        register: firewall_cmd_set_default_results
        when: firewalld_default_zone_results.rc == 1

      - name: '[DISA_STIG_RHEL_08_040090] - Reload firewalld to apply changes'
        command: firewall-cmd --reload
        become: true
        when: firewall_cmd_set_default_results.changed | bool

    when:
      - DISA_STIG_RHEL_08_040090 | bool
    tags:
      - DISA-STIG-RHEL-08-040090

  - name: "[DISA_STIG_RHEL_08_040100] - Ensure that the 'firewalld' package is installed"
    package:
      state: present
      name: firewalld
    become: true
    when:
      - DISA_STIG_RHEL_08_040100 | bool
    tags:
      - DISA-STIG-RHEL-08-040100

  - name: "[DISA_STIG_RHEL_08_040101] - Ensure that the 'firewalld' service is enabled"
    systemd:
      state: started
      name: firewalld.service
      enabled: true
    become: true
    when:
      - DISA_STIG_RHEL_08_040101 | bool
    tags:
      - DISA-STIG-RHEL-08-040101

  - name: '[BLOCK] - [DISA_STIG_RHEL_08_040110] - Ensure that the wireless network adapter is disabled'
    block:

      - name: '[DISA_STIG_RHEL_08_040110] - Check whether the wireless network adapter is disabled'
        shell: nmcli radio all | awk '{ print $2 }' | grep disabled
        become: true
        changed_when: false
        failed_when: wireless_network_adapter_results.rc not in [0, 1]
        register: wireless_network_adapter_results

      - name: '[DISA_STIG_RHEL_08_040110] - Ensure that the wireless network adapter is disabled'
        command: nmcli radio all off
        become: true
        when: wireless_network_adapter_results.rc == 1

    when:
      - DISA_STIG_RHEL_08_040110 | bool
    tags:
      - DISA-STIG-RHEL-08-040110

  - name: "[DISA_STIG_RHEL_08_040111] - Ensure that 'bluetooth' is blacklisted"
    lineinfile:
      state: present
      path: /etc/modprobe.d/bluetooth.conf
      regexp: ^install bluetooth
      line: install bluetooth /bin/true
      create: true
    become: true
    notify:
      - reboot
    when:
      - DISA_STIG_RHEL_08_040111 | bool
    tags:
      - DISA-STIG-RHEL-08-040111

  - name: "[BLOCK] - [DISA_STIG_RHEL_08_040120] - Ensure that the mount option 'nodev' is set on the '/dev/shm' file system"
    block:

      - name: "[DISA_STIG_RHEL_08_040120] - Check whether the '/dev/shm' file system is present"
        command: findmnt /dev/shm
        become: true
        changed_when: false
        failed_when: nodev_shm_file_system_results.rc not in [0, 1]
        register: nodev_shm_file_system_results

      - name: "[DISA_STIG_RHEL_08_040120] - Get the '/dev/shm' mount options"
        shell: findmnt /dev/shm | grep /dev/shm
        become: true
        changed_when: false
        failed_when: nodev_shm_mount_options_results.rc not in [0, 1]
        register: nodev_shm_mount_options_results
        when: nodev_shm_file_system_results.rc == 0

      - name: "[DISA_STIG_RHEL_08_040120] - Ensure that the mount option 'nodev' is set on the '/dev/shm' file system"
        mount:
          state: mounted
          path: "{{ (nodev_shm_mount_options_results.stdout | regex_replace('\\s+', ' ')).split(' ')[0] }}"
          src: "{{ (nodev_shm_mount_options_results.stdout | regex_replace('\\s+', ' ')).split(' ')[1] }}"
          fstype: "{{ (nodev_shm_mount_options_results.stdout | regex_replace('\\s+', ' ')).split(' ')[2] }}"
          opts: "{{ (nodev_shm_mount_options_results.stdout | regex_replace('\\s+', ' ')).split(' ')[3] }},nodev"
        become: true
        when:
          - nodev_shm_file_system_results.rc == 0
          - "'nodev' not in nodev_shm_mount_options_results.stdout"

    when:
      - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      - DISA_STIG_RHEL_08_040120 | bool
    tags:
      - DISA-STIG-RHEL-08-040120

  - name: "[BLOCK] - [DISA_STIG_RHEL_08_040121] - Ensure that the mount option 'nosuid' is set on the '/dev/shm' file system"
    block:

      - name: "[DISA_STIG_RHEL_08_040121] - Check whether the '/dev/shm' file system is present"
        command: findmnt /dev/shm
        become: true
        changed_when: false
        failed_when: nosuid_shm_file_system_results.rc not in [0, 1]
        register: nosuid_shm_file_system_results

      - name: "[DISA_STIG_RHEL_08_040121] - Get the '/dev/shm' mount options"
        shell: findmnt /dev/shm | grep /dev/shm
        become: true
        changed_when: false
        failed_when: nosuid_shm_mount_options_results.rc not in [0, 1]
        register: nosuid_shm_mount_options_results
        when: nosuid_shm_file_system_results.rc == 0

      - name: "[DISA_STIG_RHEL_08_040121] - Ensure that the mount option 'nosuid' is set on the '/dev/shm' file system"
        mount:
          state: mounted
          path: "{{ (nosuid_shm_mount_options_results.stdout | regex_replace('\\s+', ' ')).split(' ')[0] }}"
          src: "{{ (nosuid_shm_mount_options_results.stdout | regex_replace('\\s+', ' ')).split(' ')[1] }}"
          fstype: "{{ (nosuid_shm_mount_options_results.stdout | regex_replace('\\s+', ' ')).split(' ')[2] }}"
          opts: "{{ (nosuid_shm_mount_options_results.stdout | regex_replace('\\s+', ' ')).split(' ')[3] }},nosuid"
        become: true
        when:
          - nosuid_shm_file_system_results.rc == 0
          - "'nosuid' not in nosuid_shm_mount_options_results.stdout"

    when:
      - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      - DISA_STIG_RHEL_08_040121 | bool
    tags:
      - DISA-STIG-RHEL-08-040121

  - name: "[BLOCK] - [DISA_STIG_RHEL_08_040122] - Ensure that the mount option 'noexec' is set on the '/dev/shm' file system"
    block:

      - name: "[DISA_STIG_RHEL_08_040122] - Check whether the '/dev/shm' file system is present"
        command: findmnt /dev/shm
        become: true
        changed_when: false
        failed_when: noexec_shm_file_system_results.rc not in [0, 1]
        register: noexec_shm_file_system_results

      - name: "[DISA_STIG_RHEL_08_040122] - Get the '/dev/shm' mount options"
        shell: findmnt /dev/shm | grep /dev/shm
        become: true
        changed_when: false
        failed_when: noexec_shm_mount_options_results.rc not in [0, 1]
        register: noexec_shm_mount_options_results
        when: noexec_shm_file_system_results.rc == 0

      - name: "[DISA_STIG_RHEL_08_040122] - Ensure that the mount option 'noexec' is set on the '/dev/shm' file system"
        mount:
          state: mounted
          path: "{{ (noexec_shm_mount_options_results.stdout | regex_replace('\\s+', ' ')).split(' ')[0] }}"
          src: "{{ (noexec_shm_mount_options_results.stdout | regex_replace('\\s+', ' ')).split(' ')[1] }}"
          fstype: "{{ (noexec_shm_mount_options_results.stdout | regex_replace('\\s+', ' ')).split(' ')[2] }}"
          opts: "{{ (noexec_shm_mount_options_results.stdout | regex_replace('\\s+', ' ')).split(' ')[3] }},noexec"
        become: true
        when:
          - noexec_shm_file_system_results.rc == 0
          - "'noexec' not in noexec_shm_mount_options_results.stdout"

    when:
      - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      - DISA_STIG_RHEL_08_040122 | bool
    tags:
      - DISA-STIG-RHEL-08-040122

  - name: "[BLOCK] - [DISA_STIG_RHEL_08_040123] - Ensure that the mount option 'nodev' is set on the '/tmp' file system"
    block:

      - name: "[DISA_STIG_RHEL_08_040123] - Check whether the '/tmp' file system is present"
        command: findmnt --fstab /tmp
        become: true
        changed_when: false
        failed_when: nodev_tmp_file_system_results.rc not in [0, 1]
        register: nodev_tmp_file_system_results

      - name: "[DISA_STIG_RHEL_08_040123] - Get the '/tmp' mount options"
        shell: findmnt --fstab /tmp | grep /tmp
        become: true
        changed_when: false
        failed_when: nodev_tmp_mount_options_results.rc not in [0, 1]
        register: nodev_tmp_mount_options_results
        when: nodev_tmp_file_system_results.rc == 0

      - name: "[DISA_STIG_RHEL_08_040123] - Ensure that the mount option 'nodev' is set on the '/tmp' file system"
        mount:
          state: present
          path: "{{ (nodev_tmp_mount_options_results.stdout | regex_replace('\\s+', ' ')).split(' ')[0] }}"
          src: "{{ (nodev_tmp_mount_options_results.stdout | regex_replace('\\s+', ' ')).split(' ')[1] }}"
          fstype: "{{ (nodev_tmp_mount_options_results.stdout | regex_replace('\\s+', ' ')).split(' ')[2] }}"
          opts: "{{ (nodev_tmp_mount_options_results.stdout | regex_replace('\\s+', ' ')).split(' ')[3] }},nodev"
        become: true
        when:
          - nodev_tmp_file_system_results.rc == 0
          - "'nodev' not in nodev_tmp_mount_options_results.stdout"

    when:
      - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      - DISA_STIG_RHEL_08_040123 | bool
    tags:
      - DISA-STIG-RHEL-08-040123

  - name: "[BLOCK] - [DISA_STIG_RHEL_08_040124] - Ensure that the mount option 'nosuid' is set on the '/tmp' file system"
    block:

      - name: "[DISA_STIG_RHEL_08_040124] - Check whether the '/tmp' file system is present"
        command: findmnt --fstab /tmp
        become: true
        changed_when: false
        failed_when: nosuid_tmp_file_system_results.rc not in [0, 1]
        register: nosuid_tmp_file_system_results

      - name: "[DISA_STIG_RHEL_08_040124] - Get the '/tmp' mount options"
        shell: findmnt --fstab /tmp | grep /tmp
        become: true
        changed_when: false
        failed_when: nosuid_tmp_mount_options_results.rc not in [0, 1]
        register: nosuid_tmp_mount_options_results
        when: nosuid_tmp_file_system_results.rc == 0

      - name: "[DISA_STIG_RHEL_08_040124] - Ensure that the mount option 'nosuid' is set on the '/tmp' file system"
        mount:
          state: present
          path: "{{ (nosuid_tmp_mount_options_results.stdout | regex_replace('\\s+', ' ')).split(' ')[0] }}"
          src: "{{ (nosuid_tmp_mount_options_results.stdout | regex_replace('\\s+', ' ')).split(' ')[1] }}"
          fstype: "{{ (nosuid_tmp_mount_options_results.stdout | regex_replace('\\s+', ' ')).split(' ')[2] }}"
          opts: "{{ (nosuid_tmp_mount_options_results.stdout | regex_replace('\\s+', ' ')).split(' ')[3] }},nosuid"
        become: true
        when:
          - nosuid_tmp_file_system_results.rc == 0
          - "'nosuid' not in nosuid_tmp_mount_options_results.stdout"

    when:
      - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      - DISA_STIG_RHEL_08_040124 | bool
    tags:
      - DISA-STIG-RHEL-08-040124

  - name: "[BLOCK] - [DISA_STIG_RHEL_08_040125] - Ensure that the mount option 'noexec' is set on the '/tmp' file system"
    block:

      - name: "[DISA_STIG_RHEL_08_040125] - Check whether the '/tmp' file system is present"
        command: findmnt --fstab /tmp
        become: true
        changed_when: false
        failed_when: noexec_tmp_file_system_results.rc not in [0, 1]
        register: noexec_tmp_file_system_results

      - name: "[DISA_STIG_RHEL_08_040125] - Get the '/tmp' mount options"
        shell: findmnt --fstab /tmp | grep /tmp
        become: true
        changed_when: false
        failed_when: noexec_tmp_mount_options_results.rc not in [0, 1]
        register: noexec_tmp_mount_options_results
        when: noexec_tmp_file_system_results.rc == 0

      - name: "[DISA_STIG_RHEL_08_040125] - Ensure that the mount option 'noexec' is set on the '/tmp' file system"
        mount:
          state: present
          path: "{{ (noexec_tmp_mount_options_results.stdout | regex_replace('\\s+', ' ')).split(' ')[0] }}"
          src: "{{ (noexec_tmp_mount_options_results.stdout | regex_replace('\\s+', ' ')).split(' ')[1] }}"
          fstype: "{{ (noexec_tmp_mount_options_results.stdout | regex_replace('\\s+', ' ')).split(' ')[2] }}"
          opts: "{{ (noexec_tmp_mount_options_results.stdout | regex_replace('\\s+', ' ')).split(' ')[3] }},noexec"
        become: true
        when:
          - noexec_tmp_file_system_results.rc == 0
          - "'noexec' not in noexec_tmp_mount_options_results.stdout"

    when:
      - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      - DISA_STIG_RHEL_08_040125 | bool
    tags:
      - DISA-STIG-RHEL-08-040125

  - name: "[BLOCK] - [DISA_STIG_RHEL_08_040126] - Ensure that the mount option 'nodev' is set on the '/var/log' file system"
    block:

      - name: "[DISA_STIG_RHEL_08_040126] - Check whether the '/var/log' file system is present"
        command: findmnt --fstab /var/log
        become: true
        changed_when: false
        failed_when: nodev_var_log_file_system_results.rc not in [0, 1]
        register: nodev_var_log_file_system_results

      - name: "[DISA_STIG_RHEL_08_040126] - Get the '/var/log' mount options"
        shell: findmnt --fstab /var/log | grep /var/log
        become: true
        changed_when: false
        failed_when: nodev_var_log_mount_options_results.rc not in [0, 1]
        register: nodev_var_log_mount_options_results
        when: nodev_var_log_file_system_results.rc == 0

      - name: "[DISA_STIG_RHEL_08_040126] - Ensure that the mount option 'nodev' is set on the '/var/log' file system"
        mount:
          state: present
          path: "{{ (nodev_var_log_mount_options_results.stdout | regex_replace('\\s+', ' ')).split(' ')[0] }}"
          src: "{{ (nodev_var_log_mount_options_results.stdout | regex_replace('\\s+', ' ')).split(' ')[1] }}"
          fstype: "{{ (nodev_var_log_mount_options_results.stdout | regex_replace('\\s+', ' ')).split(' ')[2] }}"
          opts: "{{ (nodev_var_log_mount_options_results.stdout | regex_replace('\\s+', ' ')).split(' ')[3] }},nodev"
        become: true
        when:
          - nodev_var_log_file_system_results.rc == 0
          - "'nodev' not in nodev_var_log_mount_options_results.stdout"

    when:
      - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      - DISA_STIG_RHEL_08_040126 | bool
    tags:
      - DISA-STIG-RHEL-08-040126

  - name: "[BLOCK] - [DISA_STIG_RHEL_08_040127] - Ensure that the mount option 'nosuid' is set on the '/var/log' file system"
    block:

      - name: "[DISA_STIG_RHEL_08_040127] - Check whether the '/var/log' file system is present"
        command: findmnt --fstab /var/log
        become: true
        changed_when: false
        failed_when: nosuid_var_log_file_system_results.rc not in [0, 1]
        register: nosuid_var_log_file_system_results

      - name: "[DISA_STIG_RHEL_08_040127] - Get the '/var/log' mount options"
        shell: findmnt --fstab /var/log | grep /var/log
        become: true
        changed_when: false
        failed_when: nosuid_var_log_mount_options_results.rc not in [0, 1]
        register: nosuid_var_log_mount_options_results
        when: nosuid_var_log_file_system_results.rc == 0

      - name: "[DISA_STIG_RHEL_08_040127] - Ensure that the mount option 'nosuid' is set on the '/var/log' file system"
        mount:
          state: present
          path: "{{ (nosuid_var_log_mount_options_results.stdout | regex_replace('\\s+', ' ')).split(' ')[0] }}"
          src: "{{ (nosuid_var_log_mount_options_results.stdout | regex_replace('\\s+', ' ')).split(' ')[1] }}"
          fstype: "{{ (nosuid_var_log_mount_options_results.stdout | regex_replace('\\s+', ' ')).split(' ')[2] }}"
          opts: "{{ (nosuid_var_log_mount_options_results.stdout | regex_replace('\\s+', ' ')).split(' ')[3] }},nosuid"
        become: true
        when:
          - nosuid_var_log_file_system_results.rc == 0
          - "'nosuid' not in nosuid_var_log_mount_options_results.stdout"

    when:
      - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      - DISA_STIG_RHEL_08_040127 | bool
    tags:
      - DISA-STIG-RHEL-08-040127

  - name: "[BLOCK] - [DISA_STIG_RHEL_08_040128] - Ensure that the mount option 'noexec' is set on the '/var/log' file system"
    block:

      - name: "[DISA_STIG_RHEL_08_040128] - Check whether the '/var/log' file system is present"
        command: findmnt --fstab /var/log
        become: true
        changed_when: false
        failed_when: noexec_var_log_file_system_results.rc not in [0, 1]
        register: noexec_var_log_file_system_results

      - name: "[DISA_STIG_RHEL_08_040128] - Get the '/var/log' mount options"
        shell: findmnt --fstab /var/log | grep /var/log
        become: true
        changed_when: false
        failed_when: noexec_var_log_mount_options_results.rc not in [0, 1]
        register: noexec_var_log_mount_options_results
        when: noexec_var_log_file_system_results.rc == 0

      - name: "[DISA_STIG_RHEL_08_040128] - Ensure that the mount option 'noexec' is set on the '/var/log' file system"
        mount:
          state: present
          path: "{{ (noexec_var_log_mount_options_results.stdout | regex_replace('\\s+', ' ')).split(' ')[0] }}"
          src: "{{ (noexec_var_log_mount_options_results.stdout | regex_replace('\\s+', ' ')).split(' ')[1] }}"
          fstype: "{{ (noexec_var_log_mount_options_results.stdout | regex_replace('\\s+', ' ')).split(' ')[2] }}"
          opts: "{{ (noexec_var_log_mount_options_results.stdout | regex_replace('\\s+', ' ')).split(' ')[3] }},noexec"
        become: true
        when:
          - noexec_var_log_file_system_results.rc == 0
          - "'noexec' not in noexec_var_log_mount_options_results.stdout"

    when:
      - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      - DISA_STIG_RHEL_08_040128 | bool
    tags:
      - DISA-STIG-RHEL-08-040128

  - name: "[BLOCK] - [DISA_STIG_RHEL_08_040129] - Ensure that the mount option 'nodev' is set on the '/var/log/audit' file system"
    block:

      - name: "[DISA_STIG_RHEL_08_040129] - Check whether the '/var/log/audit' file system is present"
        command: findmnt --fstab /var/log/audit
        become: true
        changed_when: false
        failed_when: nodev_var_log_audit_file_system_results.rc not in [0, 1]
        register: nodev_var_log_audit_file_system_results

      - name: "[DISA_STIG_RHEL_08_040129] - Get the '/var/log/audit' mount options"
        shell: findmnt --fstab /var/log/audit | grep /var/log/audit
        become: true
        changed_when: false
        failed_when: nodev_var_log_audit_mount_options_results.rc not in [0, 1]
        register: nodev_var_log_audit_mount_options_results
        when: nodev_var_log_audit_file_system_results.rc == 0

      - name: "[DISA_STIG_RHEL_08_040129] - Ensure that the mount option 'nodev' is set on the '/var/log/audit' file system"
        mount:
          state: present
          path: "{{ (nodev_var_log_audit_mount_options_results.stdout | regex_replace('\\s+', ' ')).split(' ')[0] }}"
          src: "{{ (nodev_var_log_audit_mount_options_results.stdout | regex_replace('\\s+', ' ')).split(' ')[1] }}"
          fstype: "{{ (nodev_var_log_audit_mount_options_results.stdout | regex_replace('\\s+', ' ')).split(' ')[2] }}"
          opts: "{{ (nodev_var_log_audit_mount_options_results.stdout | regex_replace('\\s+', ' ')).split(' ')[3] }},nodev"
        become: true
        when:
          - nodev_var_log_audit_file_system_results.rc == 0
          - "'nodev' not in nodev_var_log_audit_mount_options_results.stdout"

    when:
      - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      - DISA_STIG_RHEL_08_040129 | bool
    tags:
      - DISA-STIG-RHEL-08-040129

  - name: "[BLOCK] - [DISA_STIG_RHEL_08_040130] - Ensure that the mount option 'nosuid' is set on the '/var/log/audit' file system"
    block:

      - name: "[DISA_STIG_RHEL_08_040130] - Check whether the '/var/log/audit' file system is present"
        command: findmnt --fstab /var/log/audit
        become: true
        changed_when: false
        failed_when: nosuid_var_log_audit_file_system_results.rc not in [0, 1]
        register: nosuid_var_log_audit_file_system_results

      - name: "[DISA_STIG_RHEL_08_040130] - Get the '/var/log/audit' mount options"
        shell: findmnt --fstab /var/log/audit | grep /var/log/audit
        become: true
        changed_when: false
        failed_when: nosuid_var_log_audit_mount_options_results.rc not in [0, 1]
        register: nosuid_var_log_audit_mount_options_results
        when: nosuid_var_log_audit_file_system_results.rc == 0

      - name: "[DISA_STIG_RHEL_08_040130] - Ensure that the mount option 'nosuid' is set on the '/var/log/audit' file system"
        mount:
          state: present
          path: "{{ (nosuid_var_log_audit_mount_options_results.stdout | regex_replace('\\s+', ' ')).split(' ')[0] }}"
          src: "{{ (nosuid_var_log_audit_mount_options_results.stdout | regex_replace('\\s+', ' ')).split(' ')[1] }}"
          fstype: "{{ (nosuid_var_log_audit_mount_options_results.stdout | regex_replace('\\s+', ' ')).split(' ')[2] }}"
          opts: "{{ (nosuid_var_log_audit_mount_options_results.stdout | regex_replace('\\s+', ' ')).split(' ')[3] }},nosuid"
        become: true
        when:
          - nosuid_var_log_audit_file_system_results.rc == 0
          - "'nosuid' not in nosuid_var_log_audit_mount_options_results.stdout"

    when:
      - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      - DISA_STIG_RHEL_08_040130 | bool
    tags:
      - DISA-STIG-RHEL-08-040130

  - name: "[BLOCK] - [DISA_STIG_RHEL_08_040131] - Ensure that the mount option 'noexec' is set on the '/var/log/audit' file system"
    block:

      - name: "[DISA_STIG_RHEL_08_040131] - Check whether the '/var/log/audit' file system is present"
        command: findmnt --fstab /var/log/audit
        become: true
        changed_when: false
        failed_when: noexec_var_log_audit_file_system_results.rc not in [0, 1]
        register: noexec_var_log_audit_file_system_results

      - name: "[DISA_STIG_RHEL_08_040131] - Get the '/var/log/audit' mount options"
        shell: findmnt --fstab /var/log/audit | grep /var/log/audit
        become: true
        changed_when: false
        failed_when: noexec_var_log_audit_mount_options_results.rc not in [0, 1]
        register: noexec_var_log_audit_mount_options_results
        when: noexec_var_log_audit_file_system_results.rc == 0

      - name: "[DISA_STIG_RHEL_08_040131] - Ensure that the mount option 'noexec' is set on the '/var/log/audit' file system"
        mount:
          state: present
          path: "{{ (noexec_var_log_audit_mount_options_results.stdout | regex_replace('\\s+', ' ')).split(' ')[0] }}"
          src: "{{ (noexec_var_log_audit_mount_options_results.stdout | regex_replace('\\s+', ' ')).split(' ')[1] }}"
          fstype: "{{ (noexec_var_log_audit_mount_options_results.stdout | regex_replace('\\s+', ' ')).split(' ')[2] }}"
          opts: "{{ (noexec_var_log_audit_mount_options_results.stdout | regex_replace('\\s+', ' ')).split(' ')[3] }},noexec"
        become: true
        when:
          - noexec_var_log_audit_file_system_results.rc == 0
          - "'noexec' not in noexec_var_log_audit_mount_options_results.stdout"

    when:
      - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      - DISA_STIG_RHEL_08_040131 | bool
    tags:
      - DISA-STIG-RHEL-08-040131

  - name: "[BLOCK] - [DISA_STIG_RHEL_08_040132] - Ensure that the mount option 'nodev' is set on the '/var/tmp' file system"
    block:

      - name: "[DISA_STIG_RHEL_08_040132] - Check whether the '/var/tmp' file system is present"
        command: findmnt --fstab /var/tmp
        become: true
        changed_when: false
        failed_when: nodev_var_tmp_file_system_results.rc not in [0, 1]
        register: nodev_var_tmp_file_system_results

      - name: "[DISA_STIG_RHEL_08_040132] - Get the '/var/tmp' mount options"
        shell: findmnt --fstab /var/tmp | grep /var/tmp
        become: true
        changed_when: false
        failed_when: nodev_var_tmp_mount_options_results.rc not in [0, 1]
        register: nodev_var_tmp_mount_options_results
        when: nodev_var_tmp_file_system_results.rc == 0

      - name: "[DISA_STIG_RHEL_08_040132] - Ensure that the mount option 'nodev' is set on the '/var/tmp' file system"
        mount:
          state: present
          path: "{{ (nodev_var_tmp_mount_options_results.stdout | regex_replace('\\s+', ' ')).split(' ')[0] }}"
          src: "{{ (nodev_var_tmp_mount_options_results.stdout | regex_replace('\\s+', ' ')).split(' ')[1] }}"
          fstype: "{{ (nodev_var_tmp_mount_options_results.stdout | regex_replace('\\s+', ' ')).split(' ')[2] }}"
          opts: "{{ (nodev_var_tmp_mount_options_results.stdout | regex_replace('\\s+', ' ')).split(' ')[3] }},nodev"
        become: true
        when:
          - nodev_var_tmp_file_system_results.rc == 0
          - "'nodev' not in nodev_var_tmp_mount_options_results.stdout"

    when:
      - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      - DISA_STIG_RHEL_08_040132 | bool
    tags:
      - DISA-STIG-RHEL-08-040132

  - name: "[BLOCK] - [DISA_STIG_RHEL_08_040133] - Ensure that the mount option 'nosuid' is set on the '/var/tmp' file system"
    block:

      - name: "[DISA_STIG_RHEL_08_040133] - Check whether the '/var/tmp' file system is present"
        command: findmnt --fstab /var/tmp
        become: true
        changed_when: false
        failed_when: nosuid_var_tmp_file_system_results.rc not in [0, 1]
        register: nosuid_var_tmp_file_system_results

      - name: "[DISA_STIG_RHEL_08_040133] - Get the '/var/tmp' mount options"
        shell: findmnt --fstab /var/tmp | grep /var/tmp
        become: true
        changed_when: false
        failed_when: nosuid_var_tmp_mount_options_results.rc not in [0, 1]
        register: nosuid_var_tmp_mount_options_results
        when: nosuid_var_tmp_file_system_results.rc == 0

      - name: "[DISA_STIG_RHEL_08_040133] - Ensure that the mount option 'nosuid' is set on the '/var/tmp' file system"
        mount:
          state: present
          path: "{{ (nosuid_var_tmp_mount_options_results.stdout | regex_replace('\\s+', ' ')).split(' ')[0] }}"
          src: "{{ (nosuid_var_tmp_mount_options_results.stdout | regex_replace('\\s+', ' ')).split(' ')[1] }}"
          fstype: "{{ (nosuid_var_tmp_mount_options_results.stdout | regex_replace('\\s+', ' ')).split(' ')[2] }}"
          opts: "{{ (nosuid_var_tmp_mount_options_results.stdout | regex_replace('\\s+', ' ')).split(' ')[3] }},nosuid"
        become: true
        when:
          - nosuid_var_tmp_file_system_results.rc == 0
          - "'nosuid' not in nosuid_var_tmp_mount_options_results.stdout"

    when:
      - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      - DISA_STIG_RHEL_08_040133 | bool
    tags:
      - DISA-STIG-RHEL-08-040133

  - name: "[BLOCK] - [DISA_STIG_RHEL_08_040134] - Ensure that the mount option 'noexec' is set on the '/var/tmp' file system"
    block:

      - name: "[DISA_STIG_RHEL_08_040134] - Check whether the '/var/tmp' file system is present"
        command: findmnt --fstab /var/tmp
        become: true
        changed_when: false
        failed_when: noexec_var_tmp_file_system_results.rc not in [0, 1]
        register: noexec_var_tmp_file_system_results

      - name: "[DISA_STIG_RHEL_08_040134] - Get the '/var/tmp' mount options"
        shell: findmnt --fstab /var/tmp | grep /var/tmp
        become: true
        changed_when: false
        failed_when: noexec_var_tmp_mount_options_results.rc not in [0, 1]
        register: noexec_var_tmp_mount_options_results
        when: noexec_var_tmp_file_system_results.rc == 0

      - name: "[DISA_STIG_RHEL_08_040134] - Ensure that the mount option 'noexec' is set on the '/var/tmp' file system"
        mount:
          state: present
          path: "{{ (noexec_var_tmp_mount_options_results.stdout | regex_replace('\\s+', ' ')).split(' ')[0] }}"
          src: "{{ (noexec_var_tmp_mount_options_results.stdout | regex_replace('\\s+', ' ')).split(' ')[1] }}"
          fstype: "{{ (noexec_var_tmp_mount_options_results.stdout | regex_replace('\\s+', ' ')).split(' ')[2] }}"
          opts: "{{ (noexec_var_tmp_mount_options_results.stdout | regex_replace('\\s+', ' ')).split(' ')[3] }},noexec"
        become: true
        when:
          - noexec_var_tmp_file_system_results.rc == 0
          - "'noexec' not in noexec_var_tmp_mount_options_results.stdout"

    when:
      - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      - DISA_STIG_RHEL_08_040134 | bool
    tags:
      - DISA-STIG-RHEL-08-040134

  - name: "[DISA_STIG_RHEL_08_040135] - Ensure that the 'fapolicyd' package is installed"
    package:
      state: present
      name: fapolicyd
    become: true
    when:
      - DISA_STIG_RHEL_08_040135 | bool
    tags:
      - DISA-STIG-RHEL-08-040135

# NOTE: The next two tasks are out of order due to RHEL-08-040136 requiring that RHEL-08-040137 be ran first.

  - name: "[BLOCK] - [DISA_STIG_RHEL_08_040137] - Ensure that 'fapolicyd' is configured with deny rules and mount rules for RHEL 8.5 and below"
    block:

      - name: "[DISA_STIG_RHEL_08_040137] - Ensure that 'fapolicyd' is set to enforcing mode"
        lineinfile:
          state: present
          path: /etc/fapolicyd/fapolicyd.conf
          regexp: ^permissive ?=
          line: permissive = {{ var_fapolicyd_permissive }}
          create: true
        become: true

      - name: "[DISA_STIG_RHEL_08_040137] - Ensure that 'fapolicyd' is configured with deny rules"
        lineinfile:
          state: present
          path: /etc/fapolicyd/fapolicyd.rules
          insertafter: EOF
          line: deny all all
          create: true
        become: true

      - name: "[DISA_STIG_RHEL_08_040137] - Get a list of mounts for 'fapolicyd'"
        shell: mount | egrep '^tmpfs| ext4| ext3| xfs' | awk '{ printf "%s\n", $3 }'
        become: true
        changed_when: false
        register: fapolicyd_mounts_results

      - name: "[DISA_STIG_RHEL_08_040137] - Ensure that 'fapolicyd' is configured with mount rules"
        lineinfile:
          state: present
          path: /etc/fapolicyd/fapolicyd.mounts
          line: '{{ item }}'
          create: true
        become: true
        loop: '{{ fapolicyd_mounts_results.stdout_lines }}'

    when:
      - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      - DISA_STIG_RHEL_08_040137 | bool
      - ansible_distribution_version is version('8.5', '<=')
    tags:
      - DISA-STIG-RHEL-08-040137

  - name: "[BLOCK] - [DISA_STIG_RHEL_08_040137] - Ensure that 'fapolicyd' is configured with deny rules and mount rules for RHEL 8.6 and above"
    block:

    # Inserting the "deny all all" rule into 95-allow-open.rules instead of 90-deny-execute.rules as several errors occur
    # including not being able to SSH in and "/bin/bash: Operation not permitted" when the rule is in 90-deny-execute.rules
      - name: "[DISA_STIG_RHEL_08_040137] - Ensure that 'fapolicyd' is configured with deny rules"
        lineinfile:
          state: present
          path: /etc/fapolicyd/rules.d/95-allow-open.rules
          insertafter: EOF
          line: '{{ item }}'
          create: true
        become: true
        with_items:
          - 'allow exe=/usr/bin/python3.7 : ftype=text/x-python'
          - 'deny perm=any all : all'

      - name: "[DISA_STIG_RHEL_08_040137] - Get a list of mounts for 'fapolicyd'"
        shell: mount | egrep '^tmpfs| ext4| ext3| xfs' | awk '{ printf "%s\n", $3 }'
        become: true
        changed_when: false
        register: fapolicyd_mounts_results

      - name: "[DISA_STIG_RHEL_08_040137] - Ensure that 'fapolicyd' is configured with mount rules"
        lineinfile:
          state: present
          path: /etc/fapolicyd/fapolicyd.mounts
          line: '{{ item }}'
          create: true
        become: true
        loop: '{{ fapolicyd_mounts_results.stdout_lines }}'

      - name: "[DISA_STIG_RHEL_08_040137] - Ensure that 'fapolicyd' is set to enforcing mode"
        lineinfile:
          state: present
          path: /etc/fapolicyd/fapolicyd.conf
          regexp: ^permissive ?=
          line: permissive = {{ var_fapolicyd_permissive }}
          create: true
        become: true

    when:
      - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      - DISA_STIG_RHEL_08_040137 | bool
      - ansible_distribution_version is version('8.6', '>=')
    tags:
      - DISA-STIG-RHEL-08-040137


  - name: "[DISA_STIG_RHEL_08_040136] - Start and enable the 'fapolicyd' service"
    systemd:
      state: started
      name: fapolicyd.service
      enabled: true
    become: true
    when:
      - DISA_STIG_RHEL_08_040136 | bool
    tags:
      - DISA-STIG-RHEL-08-040136

  - name: "[DISA_STIG_RHEL_08_040139] - Ensure that the 'usbguard' package is installed"
    package:
      state: present
      name: usbguard
    become: true
    when:
      - DISA_STIG_RHEL_08_040139 | bool
    tags:
      - DISA-STIG-RHEL-08-040139

  - name: "[DISA_STIG_RHEL_08_040140] - Configure the 'usbguard' rules file"
    copy:
      dest: /etc/usbguard/rules.conf
      content: ''
      group: root
      owner: root
      mode: '0600'
      force: true
    become: true
    when:
      - DISA_STIG_RHEL_08_040140 | bool
    tags:
      - DISA-STIG-RHEL-08-040140

  - name: "[DISA_STIG_RHEL_08_040141] - Start and enable the 'usbguard' service"
    systemd:
      state: started
      name: usbguard.service
      enabled: true
    become: true
    when:
      - DISA_STIG_RHEL_08_040141 | bool
    tags:
      - DISA-STIG-RHEL-08-040141

  - name: "[DISA_STIG_RHEL_08_040150] - Ensure that 'nftables' is configured to allow rate limits on connections"
    lineinfile:
      state: present
      path: /etc/firewalld/firewalld.conf
      regexp: ^FirewallBackend ?=
      line: FirewallBackend=nftables
      create: true
    become: true
    when:
      - DISA_STIG_RHEL_08_040150 | bool
    tags:
      - DISA-STIG-RHEL-08-040150

  - name: "[DISA_STIG_RHEL_08_040159] - Ensure that the 'openssh-server' package is installed"
    package:
      state: present
      name: openssh-server
    become: true
    when:
      - DISA_STIG_RHEL_08_040159 | bool
    tags:
      - DISA-STIG-RHEL-08-040159

  - name: "[DISA_STIG_RHEL_08_040160] - Start and enable the 'sshd' service"
    systemd:
      state: started
      name: sshd.service
      enabled: true
    become: true
    when:
      - DISA_STIG_RHEL_08_040160 | bool
    tags:
      - DISA-STIG-RHEL-08-040160

  - name: '[DISA_STIG_RHEL_08_040161] - Configure SSHD with the RekeyLimit setting'
    lineinfile:
      state: present
      path: /etc/ssh/sshd_config
      regexp: '^RekeyLimit '
      line: RekeyLimit 1G 1h
      create: true
      validate: sshd -t -f %s
    become: true
    notify:
      - systemctl restart sshd.service
    when:
      - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      - DISA_STIG_RHEL_08_040161 | bool
    tags:
      - DISA-STIG-RHEL-08-040161

  - name: "[DISA_STIG_RHEL_08_040170] - Stop and disable the 'ctrl-alt-del' sequence"
    systemd:
      state: stopped
      name: ctrl-alt-del.target
      enabled: false
      masked: true
    become: true
    notify:
      - systemctl daemon-reload
    when:
      - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      - DISA_STIG_RHEL_08_040170 | bool
    tags:
      - DISA-STIG-RHEL-08-040170

  - name: "[DISA_STIG_RHEL_08_040171] - Ensure that the 'ctrl-alt-del' sequence is disabled for the graphical user interface"
    ini_file:
      path: /etc/dconf/db/local.d/00-disable-CAD
      section: org/gnome/settings-daemon/plugins/media-keys
      option: logout
      value: "''"
      no_extra_spaces: true
      create: true
    become: true
    notify:
      - dconf update
    when:
      - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      - DISA_STIG_RHEL_08_040171 | bool
    tags:
      - DISA-STIG-RHEL-08-040171

  - name: "[DISA_STIG_RHEL_08_040172] - Ensure that the system disables 'CtrlAltDelBurstAction'"
    lineinfile:
      state: present
      path: /etc/systemd/system.conf
      regexp: ^CtrlAltDelBurstAction ?=
      line: CtrlAltDelBurstAction=none
      create: true
    become: true
    notify:
      - systemctl daemon-reload
    when:
      - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      - DISA_STIG_RHEL_08_040172 | bool
    tags:
      - DISA-STIG-RHEL-08-040172

  - name: "[DISA_STIG_RHEL_08_040180] - Stop and disable the 'debug-shell' service"
    systemd:
      state: stopped
      name: debug-shell.service
      enabled: false
      masked: true
    become: true
    notify:
      - systemctl daemon-reload
    when:
      - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      - DISA_STIG_RHEL_08_040180 | bool
    tags:
      - DISA-STIG-RHEL-08-040180

  - name: "[DISA_STIG_RHEL_08_040190] - Ensure that the 'tftp-server' package is not installed"
    package:
      state: absent
      name: tftp-server
    become: true
    when:
      - DISA_STIG_RHEL_08_040190 | bool
    tags:
      - DISA-STIG-RHEL-08-040190

  - name: '[Miscellaneous] - Flush all handlers'
    meta: flush_handlers

  - name: "[BLOCK] - [DISA_STIG_RHEL_08_040200] - Ensure that only the root user has a UID of '0'"
    block:

      - name: "[DISA_STIG_RHEL_08_040200] - Check whether multiple users have a UID of '0'"
        shell: "awk -F: '$3 == 0 {print $1}' /etc/passwd"
        become: true
        changed_when: false
        register: uid_zero_duplicate_results

      - name: "[DISA_STIG_RHEL_08_040200] - Ensure that only the root user has a UID of '0'"
        assert:
          that: uid_zero_duplicate_results.stdout == 'root'
          success_msg: The 'root' user is the only user with a UID of '0'.
          fail_msg: |
            Multiple users have a UID of '0'.
            Please manually correct this by changing non-root users' UIDs to a number other than '0'.
            {{ uid_zero_duplicate_results.stdout }}

    when:
      - DISA_STIG_RHEL_08_040200 | bool
    tags:
      - DISA-STIG-RHEL-08-040200

  - name: "[DISA_STIG_RHEL_08_040209] - Ensure that the system parameter 'net.ipv4.conf.default.accept_redirects' is set to '0'"
    sysctl:
      state: present
      name: net.ipv4.conf.default.accept_redirects
      value: '0'
      reload: true
    become: true
    when:
      - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      - DISA_STIG_RHEL_08_040209 | bool
    tags:
      - DISA-STIG-RHEL-08-040209

  - name: "[DISA_STIG_RHEL_08_040210] - Ensure that the system parameter 'net.ipv6.conf.default.accept_redirects' is set to '0'"
    sysctl:
      state: present
      name: net.ipv6.conf.default.accept_redirects
      value: '0'
      reload: true
    become: true
    when:
      - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      - DISA_STIG_RHEL_08_040210 | bool
    tags:
      - DISA-STIG-RHEL-08-040210

  - name: "[DISA_STIG_RHEL_08_040220] - Ensure that the system parameter 'net.ipv4.conf.all.send_redirects' is set to '0'"
    sysctl:
      state: present
      name: net.ipv4.conf.all.send_redirects
      value: '0'
      reload: true
    become: true
    when:
      - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      - DISA_STIG_RHEL_08_040220 | bool
    tags:
      - DISA-STIG-RHEL-08-040220

  - name: "[DISA_STIG_RHEL_08_040230] - Ensure that the system parameter 'net.ipv4.icmp_echo_ignore_broadcasts' is set to '1'"
    sysctl:
      state: present
      name: net.ipv4.icmp_echo_ignore_broadcasts
      value: '1'
      reload: true
    become: true
    when:
      - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      - DISA_STIG_RHEL_08_040230 | bool
    tags:
      - DISA-STIG-RHEL-08-040230

  - name: "[DISA_STIG_RHEL_08_040239] - Ensure that the system parameter 'net.ipv4.conf.all.accept_source_route' is set to '0'"
    sysctl:
      state: present
      name: net.ipv4.conf.all.accept_source_route
      value: '0'
      reload: true
    become: true
    when:
      - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      - DISA_STIG_RHEL_08_040239 | bool
    tags:
      - DISA-STIG-RHEL-08-040239

  - name: "[DISA_STIG_RHEL_08_040240] - Ensure that the system parameter 'net.ipv6.conf.all.accept_source_route' is set to '0'"
    sysctl:
      state: present
      name: net.ipv6.conf.all.accept_source_route
      value: '0'
      reload: true
    become: true
    when:
      - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      - DISA_STIG_RHEL_08_040240 | bool
    tags:
      - DISA-STIG-RHEL-08-040240

  - name: "[DISA_STIG_RHEL_08_040249] - Ensure that the system parameter 'net.ipv4.conf.default.accept_source_route' is set to '0'"
    sysctl:
      state: present
      name: net.ipv4.conf.default.accept_source_route
      value: '0'
      reload: true
    become: true
    when:
      - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      - DISA_STIG_RHEL_08_040249 | bool
    tags:
      - DISA-STIG-RHEL-08-040249

  - name: "[DISA_STIG_RHEL_08_040250] - Ensure that the system parameter 'net.ipv6.conf.default.accept_source_route' is set to '0'"
    sysctl:
      state: present
      name: net.ipv6.conf.default.accept_source_route
      value: '0'
      reload: true
    become: true
    when:
      - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      - DISA_STIG_RHEL_08_040250 | bool
    tags:
      - DISA-STIG-RHEL-08-040250

  - name: "[DISA_STIG_RHEL_08_040260] - Ensure that the system parameter 'net.ipv4.ip_forward' is set to '0'"
    sysctl:
      state: present
      name: net.ipv4.ip_forward
      value: '0'
      reload: true
    become: true
    when:
      - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      - DISA_STIG_RHEL_08_040260 | bool
    tags:
      - DISA-STIG-RHEL-08-040260

  - name: "[DISA_STIG_RHEL_08_040261] - Ensure that the system parameter 'net.ipv6.conf.all.accept_ra' is set to '0'"
    sysctl:
      state: present
      name: net.ipv6.conf.all.accept_ra
      value: '0'
      reload: true
    become: true
    when:
      - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      - DISA_STIG_RHEL_08_040261 | bool
    tags:
      - DISA-STIG-RHEL-08-040261

  - name: "[DISA_STIG_RHEL_08_040262] - Ensure that the system parameter 'net.ipv6.conf.default.accept_ra' is set to '0'"
    sysctl:
      state: present
      name: net.ipv6.conf.default.accept_ra
      value: '0'
      reload: true
    become: true
    when:
      - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      - DISA_STIG_RHEL_08_040262 | bool
    tags:
      - DISA-STIG-RHEL-08-040262

  - name: "[DISA_STIG_RHEL_08_040270] - Ensure that the system parameter 'net.ipv4.conf.default.send_redirects' is set to '0'"
    sysctl:
      state: present
      name: net.ipv4.conf.default.send_redirects
      value: '0'
      reload: true
    become: true
    when:
      - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      - DISA_STIG_RHEL_08_040270 | bool
    tags:
      - DISA-STIG-RHEL-08-040270

  - name: "[DISA_STIG_RHEL_08_040279] - Ensure that the system parameter 'net.ipv4.conf.all.accept_redirects' is set to '0'"
    sysctl:
      state: present
      name: net.ipv4.conf.all.accept_redirects
      value: '0'
      reload: true
    become: true
    when:
      - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      - DISA_STIG_RHEL_08_040279 | bool
    tags:
      - DISA-STIG-RHEL-08-040279

  - name: "[DISA_STIG_RHEL_08_040280] - Ensure that the system parameter 'net.ipv6.conf.all.accept_redirects' is set to '0'"
    sysctl:
      state: present
      name: net.ipv6.conf.all.accept_redirects
      value: '0'
      reload: true
    become: true
    when:
      - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      - DISA_STIG_RHEL_08_040280 | bool
    tags:
      - DISA-STIG-RHEL-08-040280

  - name: "[DISA_STIG_RHEL_08_040281] - Ensure that the kernel parameter 'kernel.unprivileged_bpf_disabled' is set to '1'"
    sysctl:
      state: present
      name: kernel.unprivileged_bpf_disabled
      value: '1'
      reload: true
    become: true
    when:
      - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      - DISA_STIG_RHEL_08_040281 | bool
    tags:
      - DISA-STIG-RHEL-08-040281

  - name: "[DISA_STIG_RHEL_08_040282] - Ensure that the kernel parameter 'kernel.yama.ptrace_scope' is set to '1'"
    sysctl:
      state: present
      name: kernel.yama.ptrace_scope
      value: '1'
      reload: true
    become: true
    when:
      - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      - DISA_STIG_RHEL_08_040282 | bool
    tags:
      - DISA-STIG-RHEL-08-040282

  - name: "[DISA_STIG_RHEL_08_040283] - Ensure that the kernel parameter 'kernel.kptr_restrict' is set to '1'"
    sysctl:
      state: present
      name: kernel.kptr_restrict
      value: '1'
      reload: true
    become: true
    when:
      - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      - DISA_STIG_RHEL_08_040283 | bool
    tags:
      - DISA-STIG-RHEL-08-040283

  - name: "[DISA_STIG_RHEL_08_040284] - Ensure that the system parameter 'user.max_user_namespaces' is set to '0'"
    sysctl:
      state: present
      name: user.max_user_namespaces
      value: '0'
      reload: true
    become: true
    when:
      - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      - DISA_STIG_RHEL_08_040284 | bool
    tags:
      - DISA-STIG-RHEL-08-040284

  - name: "[DISA_STIG_RHEL_08_040285] - Ensure that the system parameter 'net.ipv4.conf.all.rp_filter' is set to '1'"
    sysctl:
      state: present
      name: net.ipv4.conf.all.rp_filter
      value: '1'
      reload: true
    become: true
    when:
      - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      - DISA_STIG_RHEL_08_040285 | bool
    tags:
      - DISA-STIG-RHEL-08-040285

  - name: "[DISA_STIG_RHEL_08_040286] - Ensure that the system parameter 'net.core.bpf_jit_harden' is set to '2'"
    sysctl:
      state: present
      name: net.core.bpf_jit_harden
      value: '2'
      reload: true
    become: true
    when:
      - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      - DISA_STIG_RHEL_08_040286 | bool
    tags:
      - DISA-STIG-RHEL-08-040286

  - name: '[DISA_STIG_RHEL_08_040290] - Ensure that postfix restricts client connection to the local network'
    lineinfile:
      state: present
      path: /etc/postfix/main.cf
      regexp: ^smtpd_client_restrictions ?=
      line: smtpd_client_restrictions = permit_mynetworks,reject
      create: true
    become: true
    when:
      - ansible_facts.packages['postfix'] is defined and ansible_facts.packages['postfix'] | length > 0
      - DISA_STIG_RHEL_08_040290 | bool
    tags:
      - DISA-STIG-RHEL-08-040290

  - name: '[BLOCK] - [DISA_STIG_RHEL_08_040300,DISA_STIG_RHEL_08_040310] - Ensure that AIDE is configured to monitor access control lists and extended attributes
      through the STIG_DEFAULT custom rule'
    block:

      - name: '[DISA_STIG_RHEL_08_040300,DISA_STIG_RHEL_08_040310] - Ensure that AIDE is configured with the default STIG rules'
        lineinfile:
          state: present
          path: /etc/aide.conf
          insertbefore: ^NORMAL
          line: STIG_DEFAULT = acl+sha512+xattrs
        become: true

      - name: '[DISA_STIG_RHEL_08_040300,DISA_STIG_RHEL_08_040310] - Ensure that AIDE is configured to monitor access control lists and extended attributes
          through the STIG_DEFAULT custom rule'
        lineinfile:
          state: present
          path: /etc/aide.conf
          regexp: ^NORMAL
          line: NORMAL = STIG_DEFAULT+L
        become: true

    when: >-
      DISA_STIG_RHEL_08_040300 | bool or
      DISA_STIG_RHEL_08_040310 | bool
    tags:
      - DISA-STIG-RHEL-08-040300
      - DISA-STIG-RHEL-08-040310

  - name: '[DISA_STIG_RHEL_08_040320] - Ensure that the graphical user interface packages are not installed'
    package:
      state: absent
      name:
        - xorg-x11-server-Xorg
        - xorg-x11-server-common
        - xorg-x11-server-utils
        - xorg-x11-server-Xwayland
    become: true
    when:
      - DISA_STIG_RHEL_08_040320 | bool
    tags:
      - DISA-STIG-RHEL-08-040320

# TODO: RHEL-08-040330 - SV-230554r627750_rule

  - name: '[DISA_STIG_RHEL_08_040340] - Configure SSHD to disable automatic or unattended logins'
    lineinfile:
      state: present
      path: /etc/ssh/sshd_config
      regexp: '^X11Forwarding '
      line: X11Forwarding no
      create: true
      validate: sshd -t -f %s
    become: true
    notify:
      - systemctl restart sshd.service
    when:
      - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      - DISA_STIG_RHEL_08_040340 | bool
    tags:
      - DISA-STIG-RHEL-08-040340

  - name: '[DISA_STIG_RHEL_08_040341] - Configure SSHD to disable automatic or unattended logins'
    lineinfile:
      state: present
      path: /etc/ssh/sshd_config
      regexp: '^X11UseLocalhost '
      line: X11UseLocalhost yes
      create: true
      validate: sshd -t -f %s
    become: true
    notify:
      - systemctl restart sshd.service
    when:
      - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      - DISA_STIG_RHEL_08_040341 | bool
    tags:
      - DISA-STIG-RHEL-08-040341

  - name: '[DISA_STIG_RHEL_08_040342] - Configure sshd to use FIPS 140-2 approved key exchange algorithms'
    lineinfile:
      path: /etc/ssh/sshd_config
      line: KexAlgorithms ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,diffie-hellman-group-exchange-sha256
      state: present
      regexp: ^\s*KexAlgorithms\s*(?=[\w-])(\becdh-sha2-nistp256\b,?)?(\becdh-sha2-nistp384\b,?)?(\becdh-sha2-nistp521\b,?)?(\bdiffie-hellman-group-exchange-sha256)?[\s]*(?:#.*)?$
      create: true
    when:
      - ansible_virtualization_type not in ["docker", "lxc", "openvz", "podman", "container"]
      - DISA_STIG_RHEL_08_040342 | bool
    tags:
      - DISA-STIG-RHEL-08-040342

  - name: '[DISA_STIG_RHEL_08_040350] - Ensure that the TFTP operates in secure mode'
    lineinfile:
      state: present
      path: /etc/xinetd.d/tftp
      regexp: ^server_args ?=
      line: server_args = -s /var/lib/tftpboot
      create: true
    become: true
    when:
      - ansible_facts.packages['tftp-server'] is defined and ansible_facts.packages['tftp-server'] | length > 0
      - DISA_STIG_RHEL_08_040350 | bool
    tags:
      - DISA-STIG-RHEL-08-040350

  - name: "[DISA_STIG_RHEL_08_040360] - Ensure that the 'vsftpd' package is not installed"
    package:
      state: absent
      name: vsftpd
    become: true
    when:
      - DISA_STIG_RHEL_08_040360 | bool
    tags:
      - DISA-STIG-RHEL-08-040360

  - name: "[DISA_STIG_RHEL_08_040370] - Ensure that the 'gssproxy' package is not installed"
    package:
      state: absent
      name: gssproxy
    become: true
    when:
      - DISA_STIG_RHEL_08_040370 | bool
    tags:
      - DISA-STIG-RHEL-08-040370

  - name: "[DISA_STIG_RHEL_08_040380] - Ensure that the 'iprutils' package is not installed"
    package:
      state: absent
      name: iprutils
    become: true
    when:
      - DISA_STIG_RHEL_08_040380 | bool
    tags:
      - DISA-STIG-RHEL-08-040380

  - name: "[DISA_STIG_RHEL_08_040390] - Ensure that the 'tuned' package is not installed"
    package:
      state: absent
      name: tuned
    become: true
    when:
      - DISA_STIG_RHEL_08_040390 | bool
    tags:
      - DISA-STIG-RHEL-08-040390

# NOTE: The following task makes the auditd rules immutable, meaning that this task should be ran last.

  - name: '[DISA_STIG_RHEL_08_030121] - Ensure that the auditd rules are immutable'
    lineinfile:
      state: present
      path: /etc/audit/rules.d/audit.rules
      line: -e 2
      create: true
    become: true
    notify:
      - reboot
    when:
      - DISA_STIG_RHEL_08_030121 | bool
    tags:
      - DISA-STIG-RHEL-08-030121

# NOTE: The following are additional configurations deemed important by NS2. These configurations were not covered by the DISA STIGs.

  - name: '[NS2_STIG_RHEL_08_001020] - Put a file with shell wrapper to configure OpenSSL to always use strong entropy'
    copy:
      dest: /etc/profile.d/openssl-rand.sh
      content: "# provide a default -rand /dev/random option to openssl commands that\n# support it\n\n# written inefficiently for maximum shell compatibility\n\
        openssl()\n(\n  openssl_bin=/usr/bin/openssl\n\n  case \"$*\" in\n    # if user specified -rand, honor it\n    *\\ -rand\\ *|*\\ -help*) exec $openssl_bin\
        \ \"$@\" ;;\n  esac\n\n  cmds=`$openssl_bin list -digest-commands -cipher-commands | tr '\\n' ' '`\n  for i in `$openssl_bin list -commands`; do\n\
        \    if $openssl_bin list -options \"$i\" | grep -q '^rand '; then\n      cmds=\" $i $cmds\"\n    fi\n  done\n\n  case \"$cmds\" in\n    *\\ \"\
        $1\"\\ *)\n      cmd=\"$1\"; shift\n      exec $openssl_bin \"$cmd\" -rand /dev/random \"$@\" ;;\n  esac\n\n  exec $openssl_bin \"$@\"\n)\n"
    when:
      - NS2_STIG_RHEL_08_001020 | bool
    tags:
      - NS2-STIG-RHEL-08-001020

  - name: "[NS2_STIG_RHEL_08_001030] - Configure SSHD with the 'LoginGraceTime' setting"
    lineinfile:
      state: present
      path: /etc/ssh/sshd_config
      regexp: '^LoginGraceTime '
      line: LoginGraceTime {{ var_sshd_login_grace_time }}
      validate: sshd -t -f %s
    become: true
    when:
      - NS2_STIG_RHEL_08_001030 | bool
    tags:
      - NS2-STIG-RHEL-08-001030

  - name: '[BLOCK] - [NS2_STIG_RHEL_08_001040] - Ensure that local user credentials are set to random unique values'
    block:

      - name: "[NS2_STIG_RHEL_08_001040] - Check whether the 'ec2-user' exists"
        shell: cat /etc/passwd | grep -o '^ec2-user'
        become: true
        changed_when: false
        failed_when: check_ec2_user_results.rc not in [0, 1]
        register: check_ec2_user_results

      - name: "[NS2_STIG_RHEL_08_001040] - Check whether the 'cloud-user' exists"
        shell: cat /etc/passwd | grep -o '^cloud-user'
        become: true
        changed_when: false
        failed_when: check_cloud_user_results.rc not in [0, 1]
        register: check_cloud_user_results

      - name: '[NS2_STIG_RHEL_08_001040] - Ensure that local user credentials are set to random unique values'
        user:
          name: '{{ item }}'
          password: "{{ lookup('password', '/dev/null chars=ascii_letters,digits,hexdigits,punctuation encrypt=sha512_crypt length=20') }}"
        changed_when: false
        register: password_change_results
        loop: "{{ ['root'] + check_ec2_user_results.stdout_lines + check_cloud_user_results.stdout_lines }}"

    when:
      - NS2_STIG_RHEL_08_001040 | bool
    tags:
      - NS2-STIG-RHEL-08-001040

  - name: '[NS2_STIG_RHEL_08_001050] - Configure /etc/cloud/cloud.cfg and set ssh_deletekeys'
    lineinfile:
      path: /etc/cloud/cloud.cfg
      regexp: ^(.*)ssh_deletekeys(.*)$
      line: 'ssh_deletekeys:   1'
      backrefs: yes
    when:
      - NS2_STIG_RHEL_08_001050 | bool
    tags:
      - NS2-STIG-RHEL-08-001050
...
