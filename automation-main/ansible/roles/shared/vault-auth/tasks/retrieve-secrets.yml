---
# Synopsis: This task file pulls secrets from Vault. The Vault server's address via the 'vault_address' variable and a list of dictionaries
#           specifying the secrets to pull from Vault via the 'vault_secrets' variable must be provided to the task file.
#
# Inputs:
#   - vault_token: The token used to authenticate with Vault. If the 'vault_token' Ansible variable is not provided, then the 'VAULT_TOKEN' environment variable
#                  will be checked for a value, followed by the '~/.vault-token' file on the localhost.
#   - vault_address: The address of the Vault server (Include https:// in the value).
#   - vault_delegate: The host to delegate the Vault API calls to. Defaults to 'localhost'.
#   - vault_ssl_verify: Whether to verify SSL certificates of the Vault server. Defaults to true.
#   - vault_secrets: A list of dictionaries defining each secret to pull from Vault.
#       - secret_path: path to the secret within vault beginning with the engine name
#         secret_version: (Optional) only applies to versioned (v2) key-value engines, the specific version of the secret to retrieve
#         secret_key: (Optional) specific key within the secret to pull the value from, otherwise the whole blob is retured
#         ansible_fact_name: (Optional) when specified, an ansible variable will be created with this name and the secret's value stored in it
#
# Outputs:
#   - ansible_fact_name: A custom named Ansible fact variable who's value is the secret pulled from Vault.
#   - vault_retrieved_secrets: If no 'ansible_fact_name' was specified for a secret, then it will be added to this variable.
#
# Comments:
#   Example usage of this task file:
#   - name: Pull the secrets from Vault and set them as facts
#     include_role:
#       name: ../roles/vault-auth
#       tasks_from: 'retrieve-secrets.yml'
#     vars:
#       vault_address: 'https://build-vault.ns2-build-dev.sapns2.us'
#       vault_secrets:
#         - secret_path: 'application/git'
#           secret_key: 'svc-username'
#           ansible_fact_name: 'gitlab_svc_account_username'
#         - secret_path: 'application/git'
#           secret_key: 'svc-password'
#           ansible_fact_name: 'gitlab_svc_account_password'
#         - secret_path: 'application/concourse'
#           secret_key: ''
#           ansible_fact_name: ''

  - name: Validate Vault token
    include_tasks: validate-token.yml

  - name: Get version of secrets engine
    uri:
      url: "{{ vault_address }}/v1/{{ item_vault_secrets.secret_path.split('/')[0] }}/config"
      method: GET
      validate_certs: '{{ vault_ssl_verify | default(true) }}'
      headers:
        X-Vault-Token: '{{ vault_token }}'
      status_code: [200, 403, 404]
    loop: '{{ vault_secrets }}'
    loop_control:
      loop_var: item_vault_secrets
    register: vault_engine_version_results
    delegate_to: '{{ vault_delegate | default(omit, true) }}'
    no_log: '{{ not vault_retrieve_secrets_debugging | bool }}'

  - name: Retrieve the secrets from Vault
    uri:
      url: "{{ vault_address }}/v1/{{ item_vault_secrets.secret_path.split('/')[0] }}/{% if (vault_engine_version_results.results[secret_index].status ==\
        \ 200) or (item_vault_secrets.secret_version is defined and item_vault_secrets.secret_version | length > 0) %}data/{% endif %}{{ item_vault_secrets.secret_path\
        \ | regex_replace('^([a-zA-Z0-9-_]*)/(.*)', '\\2') }}{% if (item_vault_secrets.secret_version is defined) and (item_vault_secrets.secret_version\
        \ | length > 0) and (item_vault_secrets.secret_version != 'latest') %}?version={{ item_vault_secrets.secret_version }}{% endif %}"
      method: GET
      validate_certs: '{{ vault_ssl_verify | default(true) }}'
      headers:
        X-Vault-Token: '{{ vault_token }}'
      status_code: [200, 403, 404]
    loop: '{{ vault_secrets }}'
    loop_control:
      loop_var: item_vault_secrets
      index_var: secret_index
    register: vault_secret_results
    delegate_to: '{{ vault_delegate | default(omit, true) }}'
    no_log: '{{ not vault_retrieve_secrets_debugging | bool }}'

  - name: Save non-sensitive secrets retrieval output
    set_fact:
      vault_secret_retrieval_messages: "{{ vault_secret_retrieval_messages | default({}, true) | combine({ secret_index: { 'msg' : item.msg, 'status' :\
        \ item.status, 'url' : item.url, 'secret_key' : item.item_vault_secrets.secret_key | default(''), 'ansible_fact_name' : item.item_vault_secrets.ansible_fact_name\
        \ | default('') } }) }}"
    loop: '{{ vault_secret_results.results }}'
    loop_control:
      index_var: secret_index
    no_log: '{{ not vault_retrieve_secrets_debugging | bool }}'

  - name: Report errors if necessary
    fail:
      msg: '{{ item.value }}'
    when: item.value.status != 200
    loop: "{{ query('dict', vault_secret_retrieval_messages) }}"
    no_log: '{{ not vault_retrieve_secrets_debugging | bool }}'

  - name: Initialize empty lists for appending retrieved secrets to if not already defined
    set_fact:
      '{{ item.item_vault_secrets.ansible_list_name }}': []
    loop: '{{ vault_secret_results.results }}'
    when:
      - item.item_vault_secrets.ansible_list_name is defined
      - lookup('vars', item.item_vault_secrets.ansible_list_name, default=[]) | list | length == 0
    no_log: '{{ not vault_retrieve_secrets_debugging | bool }}'

  - name: Append retrieved secrets to desired lists if defined
    set_fact:
      '{{ item.item_vault_secrets.ansible_list_name }}': >-
        {{
          lookup('vars', item.item_vault_secrets.ansible_list_name) + [
            item.json.data[ item.item_vault_secrets.secret_key ] | default(item.json.data)
            if vault_engine_version_results.results[secret_index].status != 200 else
            item.json.data.data[ item.item_vault_secrets.secret_key ] | default(item.json.data.data)
          ]
        }}
    loop: '{{ vault_secret_results.results }}'
    loop_control:
      index_var: secret_index
    when: item.item_vault_secrets.ansible_list_name is defined
    no_log: '{{ not vault_retrieve_secrets_debugging | bool }}'

  - name: Initialize empty dictionaries for appending retrieved secrets to if not already defined
    set_fact:
      '{{ item.item_vault_secrets.ansible_dict_name }}': {}
    loop: '{{ vault_secret_results.results }}'
    when:
      - item.item_vault_secrets.ansible_dict_name is defined
      - lookup('vars', item.item_vault_secrets.ansible_dict_name, default={}).keys() | length == 0
    no_log: '{{ not vault_retrieve_secrets_debugging | bool }}'

  - name: Append retrieved secrets as key-value pair to desired dictionary if defined
    set_fact:
      '{{ item.item_vault_secrets.ansible_dict_name }}': >-
        {{
          lookup('vars', item.item_vault_secrets.ansible_dict_name) | combine({
            item.item_vault_secrets.ansible_dict_key
            if item.item_vault_secrets.ansible_dict_key is defined else
            item.item_vault_secrets.secret_key :
              item.json.data[ item.item_vault_secrets.secret_key ] | default(item.json.data)
              if vault_engine_version_results.results[secret_index].status != 200 else
              item.json.data.data[ item.item_vault_secrets.secret_key ] | default(item.json.data.data)
          })
        }}
    loop: '{{ vault_secret_results.results }}'
    loop_control:
      index_var: secret_index
    when:
      - item.item_vault_secrets.ansible_dict_name is defined
    no_log: '{{ not vault_retrieve_secrets_debugging | bool }}'

  - name: Save the secrets to a fact with a custom name
    set_fact:
      '{{ item.item_vault_secrets.ansible_fact_name }}': '{%- if vault_engine_version_results.results[secret_index].status != 200 -%} {%- if item.item_vault_secrets.secret_key
        is defined and item.item_vault_secrets.secret_key is not none -%} {{ item.json.data[ item.item_vault_secrets.secret_key ] | default(item.json.data)
        }} {%- else -%} {{ item.json.data }} {%- endif -%} {%- else -%} {%- if item.item_vault_secrets.secret_key is defined and item.item_vault_secrets.secret_key
        is not none -%} {{ item.json.data.data[ item.item_vault_secrets.secret_key ] | default(item.json.data.data) }} {%- else -%} {{ item.json.data.data
        }} {%- endif -%} {%- endif -%}'
    when: item.item_vault_secrets.ansible_fact_name is defined and item.item_vault_secrets.ansible_fact_name | length > 0
    loop: '{{ vault_secret_results.results }}'
    loop_control:
      index_var: secret_index
    no_log: '{{ not vault_retrieve_secrets_debugging | bool }}'

  - name: Save the secrets to the 'vault_retrieved_secrets' fact when 'secret_key' is defined
    set_fact:
      vault_retrieved_secrets: '{% if vault_engine_version_results.results[secret_index].status != 200 %}{{ vault_retrieved_secrets | default({}, true)
        | combine({ item.item_vault_secrets.secret_key : item.json.data[ item.item_vault_secrets.secret_key ] }) }}{% else %}{{ vault_retrieved_secrets
        | default({}, true) | combine({ item.item_vault_secrets.secret_key : item.json.data.data[ item.item_vault_secrets.secret_key ] }) }}{% endif %}'
    when:
      - item.item_vault_secrets.secret_key is defined and item.item_vault_secrets.secret_key | length > 0
      - item.item_vault_secrets.ansible_fact_name is not defined or item.item_vault_secrets.ansible_fact_name | length == 0
      - item.item_vault_secrets.ansible_list_name is not defined or item.item_vault_secrets.ansible_list_name | length == 0
      - item.item_vault_secrets.ansible_dict_name is not defined or item.item_vault_secrets.ansible_dict_name | length == 0
    loop: '{{ vault_secret_results.results }}'
    loop_control:
      index_var: secret_index
    no_log: '{{ not vault_retrieve_secrets_debugging | bool }}'

  - name: Save the secrets to the 'vault_retrieved_secrets' fact when 'secret_key' is not defined
    set_fact:
      vault_retrieved_secrets: '{% if vault_engine_version_results.results[secret_index].status != 200 %}{{ vault_retrieved_secrets | default({}, true)
        | combine(item.json.data) }}{% else %}{{ vault_retrieved_secrets | default({}, true) | combine(item.json.data.data) }}{% endif %}'
    when:
      - item.item_vault_secrets.secret_key is not defined or item.item_vault_secrets.secret_key | length == 0
      - item.item_vault_secrets.ansible_fact_name is not defined or item.item_vault_secrets.ansible_fact_name | length == 0
      - item.item_vault_secrets.ansible_list_name is not defined or item.item_vault_secrets.ansible_list_name | length == 0
      - item.item_vault_secrets.ansible_dict_name is not defined or item.item_vault_secrets.ansible_dict_name | length == 0
    loop: '{{ vault_secret_results.results }}'
    loop_control:
      index_var: secret_index
    no_log: '{{ not vault_retrieve_secrets_debugging | bool }}'
...
