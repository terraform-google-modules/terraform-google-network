---
# Synopsis: This task file uploads secrets to Vault. The Vault server's address via the 'vault_address' variable and a list of dictionaries
#           specifying the secrets to upload to Vault via the 'vault_upload_secrets' variable must be provided to the task file.
#
# Inputs:
#   - vault_token: The token used to authenticate with Vault. If the 'vault_token' Ansible variable is not provided, then the 'VAULT_TOKEN' environment variable
#                  will be checked for a value, followed by the '~/.vault-token' file on the localhost.
#   - vault_address: The address of the Vault server (Include https:// in the value).
#   - vault_delegate: The host to delegate the Vault API calls to. Defaults to 'localhost'.
#   - vault_ssl_verify: Whether to verify SSL certificates of the Vault server. Defaults to true.
#   - vault_upload_secrets: A list of dictionaries defining each secret to post to Vault.
#       - secret_path: kv_sms_secrets/products/sms/us/infrastructure/test
#         secret_key_value_dict: A dictionary of key value pairs for the Vault secret
#
# Comments:
#   Example usage of this task file:
#   - name: Upload secrets to Vault
#     include_role:
#       tasks_from: 'upload-secrets.yml'
#     vars:
#       vault_address: 'https://build-vault.ns2-build-dev.sapns2.us'
#       vault_upload_secrets:
#         - secret_path: kv_sms_secrets/products/sms/us/infrastructure/test
#           secret_key_value_dict:
#             example_key_1: example_secret_1
#             example_key_2: example_secret_2
#         - secret_path: kv_sms_secrets/products/sms/us/infrastructure/test2
#           secret_key_value_dict:
#             example_key_1: example_secret_1
#             example_key_2: example_secret_2

  - name: Validate Vault token
    include_tasks: validate-token.yml

  - name: Get version of secrets engine
    uri:
      url: "{{ vault_address }}/v1/{{ item_vault_upload_secrets.secret_path.split('/')[0] }}/config"
      method: GET
      validate_certs: '{{ vault_ssl_verify | default(true) }}'
      headers:
        X-Vault-Token: '{{ vault_token }}'
      status_code: [200, 403, 404]
    loop: '{{ vault_upload_secrets }}'
    loop_control:
      loop_var: item_vault_upload_secrets
    register: vault_engine_version_results
    delegate_to: '{{ vault_delegate | default(omit, true) }}'
    no_log: '{{ not vault_upload_secrets_debugging | bool }}'

  - name: Upload the secrets to Vault (kv1)
    uri:
      url: "{{ vault_address }}/v1/{{ item_vault_upload_secrets.secret_path.split('/')[0] }}/{{ item_vault_upload_secrets.secret_path | regex_replace('^([a-zA-Z0-9-_]*)/(.*)',\
        \ '\\2') }}"
      method: POST
      validate_certs: '{{ vault_ssl_verify | default(true) }}'
      headers:
        X-Vault-Token: '{{ vault_token }}'
      status_code: [200, 204]
      body_format: json
      body: '{{ item_vault_upload_secrets.secret_key_value_dict }}'
    loop: '{{ vault_upload_secrets }}'
    loop_control:
      loop_var: item_vault_upload_secrets
      index_var: secret_index
    register: vault_upload_secret_results
    delegate_to: '{{ vault_delegate | default(omit, true) }}'
    no_log: '{{ not vault_upload_secrets_debugging | bool }}'
    when: vault_engine_version_results.results[secret_index].status == 404

  - name: Upload the secrets to Vault (kv2)
    uri:
      url: "{{ vault_address }}/v1/{{ item_vault_upload_secrets.secret_path.split('/')[0] }}/data/{{ item_vault_upload_secrets.secret_path | regex_replace('^([a-zA-Z0-9-_]*)/(.*)',\
        \ '\\2') }}"
      method: POST
      validate_certs: '{{ vault_ssl_verify | default(true) }}'
      headers:
        X-Vault-Token: '{{ vault_token }}'
      status_code: [200, 204]
      body_format: json
      body:
        data: '{{ item_vault_upload_secrets.secret_key_value_dict }}'
    loop: '{{ vault_upload_secrets }}'
    loop_control:
      loop_var: item_vault_upload_secrets
      index_var: secret_index
    register: vault_upload_secret_results
    delegate_to: '{{ vault_delegate | default(omit, true) }}'
    no_log: '{{ not vault_upload_secrets_debugging | bool }}'
    when: vault_engine_version_results.results[secret_index].status == 200
...
