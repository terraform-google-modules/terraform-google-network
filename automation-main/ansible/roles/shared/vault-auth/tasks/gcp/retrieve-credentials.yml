---
# Synopsis: This task file pulls GCP credentials Vault and saves them to the 'vault_retrieved_credentials'
#
# Inputs:
#   - vault_token: The token used to authenticate with Vault. If the 'vault_token' Ansible variable is not provided, then the 'VAULT_TOKEN' environment variable
#                  will be checked for a value, followed by the '~/.vault-token' file on the localhost.
#   - vault_address: The address of the Vault server (Include https:// in the value).
#   - vault_delegate: The host to delegate the Vault API calls to. Defaults to 'localhost'.
#   - vault_ssl_verify: Whether to verify SSL certificates of the Vault server. Defaults to true.
#   - vault_secrets_type: Must be set to 'gcp' for this task file to be included. Default is 'kv'
#   - vault_credentials: A list of dictionaries defining each secret to pull from Vault.
#       vault_gcp_secrets_engine: The name of the GCP secrets engine that is being used to generate credentials
#       vault_gcp_secrets_engine_role:List of roles that credentials will be generated for. These roles must all be configured in the secrets engine specified in 'vault_gcp_secrets_engine'
#       ansible_dict_name: (Optional) when specified, the credentials retrieved from the GCP secrets engine will be appended to the dictionary specified in this variable.
#                          This can be an existing dictionary or a new dictionary.
#       ansible_fact_name: (Optional) when specified, an ansible variable will be created with this name and the secret's value stored in it
#
# Outputs:
#   - ansible_fact_name: A custom named Ansible fact variable who's value is the credentials pulled from Vault.
#   - ansible_dict_name: A custom named Ansible dictionary that the vault_retrieved_secrets are appended to.
#   - vault_retrieved_secrets: If no 'ansible_fact_name' was specified for a secret, then it will be added to this variable.
#
# Comments:
#   Example usage of this task file:
#   - name: Pull the secrets from Vault and set them as facts
#     include_role:
#       name: ../roles/vault-auth
#       tasks_from: 'gcp/retrieve-credentials.yml'
#     vars:
#       vault_address: 'https://build-vault.ns2-build-dev.sapns2.us'
#       vault_secrets_type: gcp
#       vault_credentials:
#         vault_gcp_secrets_engine: gcp_engine_example
#         vault_gcp_secrets_engine_roles:
#           - gcp_engine_role_example_1
#           - gcp_engine_role_example_2
#         ansible_dict_name: example_dict

  - name: Save the Vault address as a fact
    set_fact:
      vault_address: "{{ vault_address | default(lookup('env', 'VAULT_ADDR'), true) }}"

  - name: Ensure that the Vault address is set
    assert:
      that:
        - vault_address is defined and vault_address | length > 0
      fail_msg: The Vault address is empty. Please specify a Vault address in either the 'vault_address' Ansible variable or the 'VAULT_ADDR' environment
        variable.
    run_once: true

  - name: Save the Vault token as a fact
    set_fact:
      vault_token: "{{ vault_token | default(lookup('env', 'VAULT_TOKEN') | default(lookup('file', '~/.vault-token', errors='ignore'), true), true) }}"
    no_log: true

  - name: Ensure that the Vault token is set
    assert:
      that:
        - vault_token is defined and vault_token | length > 0
      fail_msg: The Vault token is empty. Please specify a Vault token in either the 'vault_token' Ansible variable, the 'VAULT_TOKEN' environment variable,
        or the '~/.vault-token' file.
    run_once: true

  - name: Ensure that the Vault token is valid
    uri:
      url: '{{ vault_address }}/v1/auth/token/lookup-self'
      method: GET
      validate_certs: '{{ vault_ssl_verify | default(true) }}'
      headers:
        X-Vault-Token: '{{ vault_token }}'
      status_code: [200, 403]
    register: vault_check_token_results
    delegate_to: '{{ vault_delegate | default(omit, true) }}'
    ignore_errors: yes
    no_log: true

  - name: Check for SSL verification failure
    fail:
      msg: SSL verification failed for {{ vault_address }}. Consider running with flag '-e vault_ssl_verify=false'
    when:
      - vault_check_token_results.status == -1
      - '"CERTIFICATE_VERIFY_FAILED" in vault_check_token_results.msg'

  - name: Check whether the Vault token is valid
    fail:
      msg: The provided Vault token is either expired or not valid.
    when: vault_check_token_results.status == 403

  - name: Check for any other Vault token verification errors
    fail:
      msg: Something went wrong verifying the vault token against {{ vault_address }}.
    when: vault_check_token_results.status != 200

  - name: Retrieve the credentials from Vault
    uri:
      url: '{{ vault_address }}/v1/{{ vault_credentials.vault_gcp_secrets_engine }}/static-account/{{ item }}/key'
      method: GET
      validate_certs: '{{ vault_ssl_verify | default(true) }}'
      headers:
        X-Vault-Token: '{{ vault_token }}'
      status_code: [200, 403, 404]
    loop: '{{ vault_credentials.vault_gcp_secrets_engine_roles }}'
    register: vault_credential_results
    delegate_to: '{{ vault_delegate | default(omit, true) }}'
    no_log: true

  - name: Report errors if necessary
    fail:
      msg: '{{ item }}'
    when: item.status != 200
    loop: '{{ vault_credential_results.results }}'

  - name: Set retrieved credentials fact
    set_fact:
      vault_retrieved_credentials: "{{ vault_retrieved_credentials | default({}, true) | combine({ item.item | replace('-', '_') : { 'gcp_credentials' :\
        \ item.json.data.private_key_data } }) }}"
    loop: '{{ vault_credential_results.results }}'
    when: vault_credentials.ansible_fact_name is not defined
    no_log: true

  - name: Set retrieved credentials custom fact
    set_fact:
      '{{ vault_credentials.ansible_fact_name }}': "{{ lookup('vars', vault_credentials.ansible_fact_name, default={}) | combine({ item.item | replace('-',\
        \ '_') : { 'gcp_credentials' : item.json.data.private_key_data } }) }}"
    loop: '{{ vault_credential_results.results }}'
    when: vault_credentials.ansible_fact_name is defined
    no_log: true

  - name: Initialize empty dictionary to append retrieved credentials to if not already defined
    set_fact:
      '{{ vault_credentials.ansible_dict_name }}': {}
    when:
      - vault_credentials.ansible_dict_name is defined
      - vault_credentials.ansible_fact_name is not defined
      - lookup('vars', vault_credentials.ansible_dict_name, default={}).keys() | length == 0

  - name: Append retrieved credentials to desired dictionary if defined
    set_fact:
      '{{ vault_credentials.ansible_dict_name }}': "{{ lookup('vars', vault_credentials.ansible_dict_name) | combine(vault_retrieved_credentials) }}"
    when:
      - vault_credentials.ansible_dict_name is defined
      - vault_credentials.ansible_fact_name is not defined
    no_log: true
...
