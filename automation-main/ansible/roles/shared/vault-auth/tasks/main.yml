---
# Synopsis: Calls other task files to either get a temporary Vault token or to retrieve secrets from Vault.
#
# Inputs:
#   - vault_token: The token used to authenticate with Vault. If the 'vault_token' Ansible variable is not provided, then the 'VAULT_TOKEN' environment variable
#                  will be checked for a value, followed by the '~/.vault-token' file on the localhost.
#   - vault_secrets: A list of dictionaries defining each secret to pull from Vault.
#
# Outputs:
#   - Gets a temporary Vault token if the 'vault_token' variable is undefined or empty (Requires that the AWS engine be setup in Vault).
#   - Pulls secrets from Vault if the 'vault_secrets' variable is defined.
#
# Comments:
#   Example usage of this role to retrieve secrets:
#   - name: Pull the secrets from Vault and set them as facts
#     include_role:
#       name: ../roles/vault-auth
#     vars:
#       vault_address: 'https://build-vault.ns2-build-dev.sapns2.us'
#       vault_delegate: 'localhost'
#       vault_secrets:
#         - secret_path: 'application/git'
#           secret_key: 'svc-username'
#           ansible_fact_name: 'gitlab_svc_account_username'
#         - secret_path: 'application/git'
#           secret_key: 'svc-password'
#           ansible_fact_name: ''
#         - secret_path: 'application/concourse'
#           secret_key: ''
#           ansible_fact_name: 'all_concourse_secrets'
#
#   Example usage of this role to retrieve credentials:
#   - name: Pull the credentials from Vault and set them as facts
#     include_role:
#       name: ../roles/vault-auth
#     vars:
#       vault_address: 'https://build-vault.ns2-build-dev.sapns2.us'
#       vault_delegate: 'localhost'
#       vault_aws_auth: true
#       vault_secrets_type: aws
#       vault_credentials:
#         vault_aws_secrets_engine: aws_engine_example
#         vault_aws_secrets_engine_roles:
#           - aws_engine_role_example_1
#           - aws_engine_role_example_2
#         ansible_dict_name: example_dict

  - name: Save the Vault address as a fact if present
    set_fact:
      vault_address: "{{ vault_address | default(lookup('env', 'VAULT_ADDR'), true) }}"

  - name: Save the Vault token as a fact if present
    set_fact:
      vault_token: "{{ vault_token | default(lookup('env', 'VAULT_TOKEN') | default(lookup('file', '~/.vault-token', errors='ignore') | default('', true),\
        \ true), true) }}"
    no_log: true

  - name: Retrieve temporary vault token to access secrets for AWS instance
    include_tasks: aws/retrieve-token.yml
    when:
      - vault_aws_auth | bool
      - vault_token is undefined or vault_token | length == 0 or vault_token is none

  - name: Retrieve temporary vault token to access secrets for Azure instance
    include_tasks: azure/retrieve-token.yml
    when:
      - vault_azure_auth | bool
      - vault_token is undefined or vault_token | length == 0 or vault_token is none

  - name: Retrieve temporary vault token to access secrets for GCP instance
    include_tasks: gcp/retrieve-token.yml
    when:
      - vault_gcp_auth | bool
      - vault_token is undefined or vault_token | length == 0 or vault_token is none

  - name: Retrieve secrets from Vault
    include_tasks: retrieve-secrets.yml
    when:
      - vault_secrets is defined
      - vault_secrets is not none
      - vault_secrets | length > 0
      - vault_secrets_type == 'kv'

  - name: Upload secrets to Vault
    include_tasks: upload-secrets.yml
    when:
      - vault_upload_secrets is defined
      - vault_upload_secrets is not none
      - vault_upload_secrets | length > 0
      - vault_secrets_type == 'kv'

  - name: Retrieve AWS credentials from Vault
    include_tasks: aws/retrieve-credentials.yml
    when:
      - vault_credentials is defined
      - vault_secrets_type == 'aws'

  - name: Retrieve Azure credentials from Vault
    include_tasks: azure/retrieve-credentials.yml
    when:
      - vault_credentials is defined
      - vault_secrets_type == 'azure'

  - name: Retrieve GCP credentials from Vault
    include_tasks: gcp/retrieve-credentials.yml
    when:
      - vault_credentials is defined
      - vault_secrets_type == 'gcp'
...
