---
# +----------------------------------------------------------------------------------------+
# | __   __      _             _                   _              ___           __ _       |
# | \ \ / /__ __| |_ ___ _ _  | |   ___  __ _ __ _(_)_ _  __ _   / __|___ _ _  / _(_)__ _  |
# |  \ V / -_) _|  _/ _ \ '_| | |__/ _ \/ _` / _` | | ' \/ _` | | (__/ _ \ ' \|  _| / _` | |
# |   \_/\___\__|\__\___/_|   |____\___/\__, \__, |_|_||_\__, |  \___\___/_||_|_| |_\__, | |
# |                                     |___/|___/       |___/                      |___/  |
# | Managed by Ansible                                                                     |
# +----------------------------------------------------------------------------------------+
#
# Description: GCE Postgres Metadata for Cross Project Host Logs in GCP Logging
# Vector Output Name: text__gce_postgres_logs__metadata
# Notes:
#
# +----------------------------------------------------------------------------------------+

type: remap
inputs:
  - gcp_log_router.text_postgres_logs
drop_on_abort: true
drop_on_error: true
reroute_dropped: true
source: |
  .metadata.custom.index.suffix = "app"

  .metadata.custom.gcp, err = merge(.metadata.custom.gcp,
      compact({
          "resource": {
              "database_id": string(.resource.labels.database_id) ?? null,
              "region": string(.resource.labels.region) ?? null,
              "project_id":  string(.resource.labels.project_id) ?? null
          },
      }),
      deep: true
  )

  if err != null {
      abort "error merging gcp metadata: {{err}}"
  }

  .metadata.fields.postgres = {}
  .metadata.fields.postgres.labels = del(.labels)

  .sourcetype = "app:postgres"
  .source = ((string(.metadata.cloud.project.id) ?? "unknown" ) + ":" + (string(.metadata.cloud.region) ?? "global")  + ":postgres.log")
...
