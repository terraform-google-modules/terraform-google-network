---
# +----------------------------------------------------------------------------------------+
# | __   __      _             _                   _              ___           __ _       |
# | \ \ / /__ __| |_ ___ _ _  | |   ___  __ _ __ _(_)_ _  __ _   / __|___ _ _  / _(_)__ _  |
# |  \ V / -_) _|  _/ _ \ '_| | |__/ _ \/ _` / _` | | ' \/ _` | | (__/ _ \ ' \|  _| / _` | |
# |   \_/\___\__|\__\___/_|   |____\___/\__, \__, |_|_||_\__, |  \___\___/_||_|_| |_\__, | |
# |                                     |___/|___/       |___/                      |___/  |
# | Managed by Ansible                                                                     |
# +----------------------------------------------------------------------------------------+
#
# Description: OpenVPN log transforms
# Vector Output Name: openvpn__system_logs_parsed
# Notes:
#
# +----------------------------------------------------------------------------------------+

type: remap
inputs:
  - openvpn_metadata
drop_on_error: true
reroute_dropped: true
drop_on_abort: true
source: |
  .message, err = parse_groks(string!(.message), ["%{TIMESTAMP_ISO8601:timestamp} %{IPORHOST:src_ip}:%{POSINT:src_port} %{GREEDYDATA:message}", "%{TIMESTAMP_ISO8601:timestamp} %{IP:src_ip}:%{POSINT:src_port} SENT CONTROL [%{USER:user}]: '%{DATA:message}' (status=%{INT:status_code})"])
  if err != null {
      abort "error parsing log: {{err}}"
  }
  .timestamp, err = parse_timestamp(.message.timestamp, "%Y-%m-%d %H:%M:%S")
  if err != null {
      abort "error parsing timestamp: {{err}}"
  }
...
