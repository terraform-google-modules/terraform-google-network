---
# Description: Molecule create.yml playbook used to create AWS EC2 instances and supporting infrastructure for testing.

  - name: Create
    hosts: localhost
    connection: local
    gather_facts: false
    no_log: false
    vars:
      ssh_user: ec2-user
      ssh_port: 22

      security_group_name: test-ansible-molecule
      security_group_description: Security group for Ansible Molecule testing
      security_group_rules_ingress:
        - proto: tcp
          from_port: '{{ ssh_port }}'
          to_port: '{{ ssh_port }}'
          cidr_ip: 0.0.0.0/0    # TODO: Explore ways of having users supply their own CIDR so that security groups are locked down (Probably via environment variables).
        - proto: icmp
          from_port: 8
          to_port: -1
          cidr_ip: 0.0.0.0/0
      security_group_rules_egress:
        - proto: -1
          from_port: 0
          to_port: 0
          cidr_ip: 0.0.0.0/0

      key_pair_name: test-ansible-molecule
      key_pair_path: "{{ lookup('env', 'MOLECULE_EPHEMERAL_DIRECTORY') }}/ssh_key"
    tasks:
      - name: Find the vpc for the subnet
        ec2_vpc_subnet_info:
          subnet_ids: '{{ item.vpc_subnet_id }}'
        loop: '{{ molecule_yml.platforms }}'
        register: subnet_info

      - name: Create security groups
        ec2_group:
          vpc_id: '{{ item.subnets[0].vpc_id }}'
          name: '{{ security_group_name }}'
          description: '{{ security_group_name }}'
          rules: '{{ security_group_rules_ingress }}'
          rules_egress: '{{ security_group_rules_egress }}'
        loop: '{{ subnet_info.results }}'

      - name: Test for presence of local key pair
        stat:
          path: '{{ key_pair_path }}'
        register: key_pair_local

      - name: Delete remote key pair
        ec2_key:
          name: '{{ key_pair_name }}'
          state: absent
        when: not key_pair_local.stat.exists

      - name: Create key pair
        ec2_key:
          name: '{{ key_pair_name }}'
        register: key_pair

      - name: Persist the key pair
        copy:
          dest: '{{ key_pair_path }}'
          content: '{{ key_pair.key.private_key }}'
          mode: 0600
        when: key_pair.changed

      - name: Get the ec2 ami(s) by owner and name, if image not set
        ec2_ami_info:
          owners: '{{ item.image_owner }}'
          filters:
            name: '{{ item.image_name }}'
        loop: '{{ molecule_yml.platforms }}'
        when: item.image is not defined
        register: ami_info

      - name: Create molecule instance(s)
        ec2:
          key_name: '{{ key_pair_name }}'
          image: ami-01703a623d2649887
          instance_type: '{{ item.instance_type }}'
          vpc_subnet_id: '{{ item.vpc_subnet_id }}'
          group: '{{ security_group_name }}'
          instance_tags: "{{ item.instance_tags | combine({'instance': item.name}) if item.instance_tags is defined else {'instance': item.name} }}"
          wait: true
          assign_public_ip: true
          exact_count: 1
          count_tag:
            instance: '{{ item.name }}'
        register: server
        loop: '{{ molecule_yml.platforms }}'
        loop_control:
          index_var: index
        async: 7200
        poll: 0

      - name: Wait for instance(s) creation to complete
        async_status:
          jid: '{{ item.ansible_job_id }}'
        register: ec2_jobs
        until: ec2_jobs.finished
        retries: 300
        with_items: '{{ server.results }}'

    # Mandatory configuration for Molecule to function.

      - name: Populate instance config dict
        set_fact:
          instance_conf_dict: {instance: '{{ item.instances[0].tags.instance }}', address: '{{ item.instances[0].public_ip }}', user: '{{ ssh_user }}',
            port: '{{ ssh_port }}', identity_file: '{{ key_pair_path }}', instance_ids: '{{ item.instance_ids }}', key_pair_name: '{{ key_pair_name }}'}
        with_items: '{{ ec2_jobs.results }}'
        register: instance_config_dict
        when: server.changed | bool

      - name: Convert instance config dict to a list
        set_fact:
          instance_conf: "{{ instance_config_dict.results | map(attribute='ansible_facts.instance_conf_dict') | list }}"
        when: server.changed | bool

      - name: Dump instance config
        copy:
          content: '{{ instance_conf | to_json | from_json | to_yaml }}'
          dest: '{{ molecule_instance_config }}'
        when: server.changed | bool

      - name: Wait for SSH
        wait_for:
          port: '{{ ssh_port }}'
          host: '{{ item.address }}'
          search_regex: SSH
          delay: 10
          timeout: 320
        with_items: "{{ lookup('file', molecule_instance_config) | from_yaml }}"
...
