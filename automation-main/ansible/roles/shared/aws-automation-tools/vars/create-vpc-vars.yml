---
# Filename: create-vpc-vars.yml
# Synopsis: Variables file for create-vpc task
# Comments: You can use extra vars to specify the vpc_name and vpc_octet to generate completly unique VPCs

###################
## VPC Variables ##
###################
vpc_name: example                           # Name of the VPC
vpc_octet: '10.20'                          # The first two octet of the VPC
vpc_cidr_block: '{{ vpc_octet }}.0.0/16'    # CIDR of the entire VPC

######################
## Subnet Variables ##
######################
vpc_subnets:
  private-a:                                # This key name has no relevence except for clarity
    subnet_name: subnet                     # Name tag  ex. vpc_name-az1a-subnet_name
    cidr: '{{ vpc_octet }}.1.0/24'          # The subnet range
    az: '{{ aws_region }}a'                 # Availability zone this subnet will be in (a|b|c)
    give_publicip: no                       # Whether or not new instances get a public ip by default
  private-b:
    subnet_name: subnet
    cidr: '{{ vpc_octet }}.2.0/24'
    az: '{{ aws_region }}b'
    give_publicip: no
  private-c:
    subnet_name: subnet
    cidr: '{{ vpc_octet }}.3.0/24'
    az: '{{ aws_region }}c'
    give_publicip: no
  # public-a:
  #   subnet_name: 'subnet'
  #   cidr: 10.20.4.0/24
  #   az: "{{ aws_region }}a"
  #   give_publicip: yes

##############################
## Security Group Variables ##
##############################
vpc_security_groups:
  ### NS2 Access
  - name: '{{ vpc_name }}-access-ns2'
    description: Allows access from NS2 Guest and NS2 Corporate networks to {{ vpc_name }} VPC
    rules:
      - proto: tcp
        ports: 22
        cidr_ip: 4.35.15.246/32
        rule_desc: NS2 Wifi in to SSH
    rules_egress: []
  ### VPC Access
  - name: '{{ vpc_name }}-vpc'
    description: Allows all communication within the {{ vpc_name }} VPC subnet
    rules:
      - proto: all
        cidr_ip: '{{ vpc_cidr_block }}'
        rule_desc: From VPC subnet in to all protocols
    rules_egress:
      - proto: all
        cidr_ip: '{{ vpc_cidr_block }}'
        rule_desc: From VPC subnet out to all protocols
  ### Public egress
  - name: '{{ vpc_name }}-public-egress'
    description: Allows outbound traffic for {{ vpc_name }} VPC subnet
    rules: []
    rules_egress: []
  ##### This is in here twice to deal with a weird timeout bug in the ec2_group module
  - name: '{{ vpc_name }}-public-egress'
    description: Allows outbound traffic for {{ vpc_name }} VPC subnet
    rules: []
    rules_egress:
      - proto: all
        cidr_ip: 0.0.0.0/0
        rule_desc: All Outbound

  # - name: "{{ vpc_name }}-public-web"                 # This is both the group name and tag name of the security group
  #   description: "Allow public web traffic"           # The hardcoded sg description
  #   rules:                                            # Inbound rules
  #     - proto: tcp                                      # Protocol, valid values are: all, tcp, udp, icmp, or 58 (ICMPv6),
  #       ports: 80                                       # Ports (list)
  #       cidr_ip: 0.0.0.0/0                              # Source/Destination
  #       rule_desc: All inbound to HTTPS                 # Rule Description
  #     - proto: tcp
  #       ports: 443
  #       cidr_ip: 0.0.0.0/0
  #       rule_desc: All inbound to HTTPS
  #     - proto: tcp
  #       from_port: 8200                                 # Port range (bottom)
  #       to_port: 8200                                   # Port range (top)
  #       cidr_ip: 0.0.0.0/0
  #       rule_desc: All inbound to Vault
  #   rules_egress: []                                  # Outbound rules
...
